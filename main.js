/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var fs = require('fs');
var path = require('path');
var timers = require('timers');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function setPrototypeOf(obj, proto) {
    // eslint-disable-line @typescript-eslint/no-explicit-any
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(obj, proto);
    }
    else {
        obj.__proto__ = proto;
    }
}
// This is pretty much the only way to get nice, extended Errors
// without using ES6
/**
 * This returns a new Error with a custom prototype. Note that it's _not_ a constructor
 *
 * @param message Error message
 *
 * **Example**
 *
 * ```js
 * throw EtaErr("template not found")
 * ```
 */
function EtaErr(message) {
    var err = new Error(message);
    setPrototypeOf(err, EtaErr.prototype);
    return err;
}
EtaErr.prototype = Object.create(Error.prototype, {
    name: { value: 'Eta Error', enumerable: false }
});
/**
 * Throws an EtaErr with a nicely formatted error and message showing where in the template the error occurred.
 */
function ParseErr(message, str, indx) {
    var whitespace = str.slice(0, indx).split(/\n/);
    var lineNo = whitespace.length;
    var colNo = whitespace[lineNo - 1].length + 1;
    message +=
        ' at line ' +
            lineNo +
            ' col ' +
            colNo +
            ':\n\n' +
            '  ' +
            str.split(/\n/)[lineNo - 1] +
            '\n' +
            '  ' +
            Array(colNo).join(' ') +
            '^';
    throw EtaErr(message);
}

/**
 * @returns The global Promise function
 */
var promiseImpl = new Function('return this')().Promise;
/**
 * @returns A new AsyncFunction constuctor
 */
function getAsyncFunctionConstructor() {
    try {
        return new Function('return (async function(){}).constructor')();
    }
    catch (e) {
        if (e instanceof SyntaxError) {
            throw EtaErr("This environment doesn't support async/await");
        }
        else {
            throw e;
        }
    }
}
/**
 * str.trimLeft polyfill
 *
 * @param str - Input string
 * @returns The string with left whitespace removed
 *
 */
function trimLeft(str) {
    // eslint-disable-next-line no-extra-boolean-cast
    if (!!String.prototype.trimLeft) {
        return str.trimLeft();
    }
    else {
        return str.replace(/^\s+/, '');
    }
}
/**
 * str.trimRight polyfill
 *
 * @param str - Input string
 * @returns The string with right whitespace removed
 *
 */
function trimRight(str) {
    // eslint-disable-next-line no-extra-boolean-cast
    if (!!String.prototype.trimRight) {
        return str.trimRight();
    }
    else {
        return str.replace(/\s+$/, ''); // TODO: do we really need to replace BOM's?
    }
}

// TODO: allow '-' to trim up until newline. Use [^\S\n\r] instead of \s
/* END TYPES */
function hasOwnProp$1(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
function copyProps$1(toObj, fromObj) {
    for (var key in fromObj) {
        if (hasOwnProp$1(fromObj, key)) {
            toObj[key] = fromObj[key];
        }
    }
    return toObj;
}
/**
 * Takes a string within a template and trims it, based on the preceding tag's whitespace control and `config.autoTrim`
 */
function trimWS(str, config, wsLeft, wsRight) {
    var leftTrim;
    var rightTrim;
    if (Array.isArray(config.autoTrim)) {
        // kinda confusing
        // but _}} will trim the left side of the following string
        leftTrim = config.autoTrim[1];
        rightTrim = config.autoTrim[0];
    }
    else {
        leftTrim = rightTrim = config.autoTrim;
    }
    if (wsLeft || wsLeft === false) {
        leftTrim = wsLeft;
    }
    if (wsRight || wsRight === false) {
        rightTrim = wsRight;
    }
    if (!rightTrim && !leftTrim) {
        return str;
    }
    if (leftTrim === 'slurp' && rightTrim === 'slurp') {
        return str.trim();
    }
    if (leftTrim === '_' || leftTrim === 'slurp') {
        // console.log('trimming left' + leftTrim)
        // full slurp
        str = trimLeft(str);
    }
    else if (leftTrim === '-' || leftTrim === 'nl') {
        // nl trim
        str = str.replace(/^(?:\r\n|\n|\r)/, '');
    }
    if (rightTrim === '_' || rightTrim === 'slurp') {
        // full slurp
        str = trimRight(str);
    }
    else if (rightTrim === '-' || rightTrim === 'nl') {
        // nl trim
        str = str.replace(/(?:\r\n|\n|\r)$/, ''); // TODO: make sure this gets \r\n
    }
    return str;
}
/**
 * A map of special HTML characters to their XML-escaped equivalents
 */
var escMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
};
function replaceChar(s) {
    return escMap[s];
}
/**
 * XML-escapes an input value after converting it to a string
 *
 * @param str - Input value (usually a string)
 * @returns XML-escaped string
 */
function XMLEscape(str) {
    // eslint-disable-line @typescript-eslint/no-explicit-any
    // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.
    var newStr = String(str);
    if (/[&<>"']/.test(newStr)) {
        return newStr.replace(/[&<>"']/g, replaceChar);
    }
    else {
        return newStr;
    }
}

/* END TYPES */
var templateLitReg = /`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})*}|(?!\${)[^\\`])*`/g;
var singleQuoteReg = /'(?:\\[\s\w"'\\`]|[^\n\r'\\])*?'/g;
var doubleQuoteReg = /"(?:\\[\s\w"'\\`]|[^\n\r"\\])*?"/g;
/** Escape special regular expression characters inside a string */
function escapeRegExp(string) {
    // From MDN
    return string.replace(/[.*+\-?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}
function parse$1(str, config) {
    var buffer = [];
    var trimLeftOfNextStr = false;
    var lastIndex = 0;
    var parseOptions = config.parse;
    if (config.plugins) {
        for (var i = 0; i < config.plugins.length; i++) {
            var plugin = config.plugins[i];
            if (plugin.processTemplate) {
                str = plugin.processTemplate(str, config);
            }
        }
    }
    /* Adding for EJS compatibility */
    if (config.rmWhitespace) {
        // Code taken directly from EJS
        // Have to use two separate replaces here as `^` and `$` operators don't
        // work well with `\r` and empty lines don't work well with the `m` flag.
        // Essentially, this replaces the whitespace at the beginning and end of
        // each line and removes multiple newlines.
        str = str.replace(/[\r\n]+/g, '\n').replace(/^\s+|\s+$/gm, '');
    }
    /* End rmWhitespace option */
    templateLitReg.lastIndex = 0;
    singleQuoteReg.lastIndex = 0;
    doubleQuoteReg.lastIndex = 0;
    function pushString(strng, shouldTrimRightOfString) {
        if (strng) {
            // if string is truthy it must be of type 'string'
            strng = trimWS(strng, config, trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined
            shouldTrimRightOfString);
            if (strng) {
                // replace \ with \\, ' with \'
                // we're going to convert all CRLF to LF so it doesn't take more than one replace
                strng = strng.replace(/\\|'/g, '\\$&').replace(/\r\n|\n|\r/g, '\\n');
                buffer.push(strng);
            }
        }
    }
    var prefixes = [parseOptions.exec, parseOptions.interpolate, parseOptions.raw].reduce(function (accumulator, prefix) {
        if (accumulator && prefix) {
            return accumulator + '|' + escapeRegExp(prefix);
        }
        else if (prefix) {
            // accumulator is falsy
            return escapeRegExp(prefix);
        }
        else {
            // prefix and accumulator are both falsy
            return accumulator;
        }
    }, '');
    var parseOpenReg = new RegExp('([^]*?)' + escapeRegExp(config.tags[0]) + '(-|_)?\\s*(' + prefixes + ')?\\s*', 'g');
    var parseCloseReg = new RegExp('\'|"|`|\\/\\*|(\\s*(-|_)?' + escapeRegExp(config.tags[1]) + ')', 'g');
    // TODO: benchmark having the \s* on either side vs using str.trim()
    var m;
    while ((m = parseOpenReg.exec(str))) {
        lastIndex = m[0].length + m.index;
        var precedingString = m[1];
        var wsLeft = m[2];
        var prefix = m[3] || ''; // by default either ~, =, or empty
        pushString(precedingString, wsLeft);
        parseCloseReg.lastIndex = lastIndex;
        var closeTag = void 0;
        var currentObj = false;
        while ((closeTag = parseCloseReg.exec(str))) {
            if (closeTag[1]) {
                var content = str.slice(lastIndex, closeTag.index);
                parseOpenReg.lastIndex = lastIndex = parseCloseReg.lastIndex;
                trimLeftOfNextStr = closeTag[2];
                var currentType = prefix === parseOptions.exec
                    ? 'e'
                    : prefix === parseOptions.raw
                        ? 'r'
                        : prefix === parseOptions.interpolate
                            ? 'i'
                            : '';
                currentObj = { t: currentType, val: content };
                break;
            }
            else {
                var char = closeTag[0];
                if (char === '/*') {
                    var commentCloseInd = str.indexOf('*/', parseCloseReg.lastIndex);
                    if (commentCloseInd === -1) {
                        ParseErr('unclosed comment', str, closeTag.index);
                    }
                    parseCloseReg.lastIndex = commentCloseInd;
                }
                else if (char === "'") {
                    singleQuoteReg.lastIndex = closeTag.index;
                    var singleQuoteMatch = singleQuoteReg.exec(str);
                    if (singleQuoteMatch) {
                        parseCloseReg.lastIndex = singleQuoteReg.lastIndex;
                    }
                    else {
                        ParseErr('unclosed string', str, closeTag.index);
                    }
                }
                else if (char === '"') {
                    doubleQuoteReg.lastIndex = closeTag.index;
                    var doubleQuoteMatch = doubleQuoteReg.exec(str);
                    if (doubleQuoteMatch) {
                        parseCloseReg.lastIndex = doubleQuoteReg.lastIndex;
                    }
                    else {
                        ParseErr('unclosed string', str, closeTag.index);
                    }
                }
                else if (char === '`') {
                    templateLitReg.lastIndex = closeTag.index;
                    var templateLitMatch = templateLitReg.exec(str);
                    if (templateLitMatch) {
                        parseCloseReg.lastIndex = templateLitReg.lastIndex;
                    }
                    else {
                        ParseErr('unclosed string', str, closeTag.index);
                    }
                }
            }
        }
        if (currentObj) {
            buffer.push(currentObj);
        }
        else {
            ParseErr('unclosed tag', str, m.index + precedingString.length);
        }
    }
    pushString(str.slice(lastIndex, str.length), false);
    if (config.plugins) {
        for (var i = 0; i < config.plugins.length; i++) {
            var plugin = config.plugins[i];
            if (plugin.processAST) {
                buffer = plugin.processAST(buffer, config);
            }
        }
    }
    return buffer;
}

/* END TYPES */
/**
 * Compiles a template string to a function string. Most often users just use `compile()`, which calls `compileToString` and creates a new function using the result
 *
 * **Example**
 *
 * ```js
 * compileToString("Hi <%= it.user %>", eta.config)
 * // "var tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR"
 * ```
 */
function compileToString$1(str, config) {
    var buffer = parse$1(str, config);
    var res = "var tR='',__l,__lP" +
        (config.include ? ',include=E.include.bind(E)' : '') +
        (config.includeFile ? ',includeFile=E.includeFile.bind(E)' : '') +
        '\nfunction layout(p,d){__l=p;__lP=d}\n' +
        (config.useWith ? 'with(' + config.varName + '||{}){' : '') +
        compileScope$1(buffer, config) +
        (config.includeFile
            ? 'if(__l)tR=' +
                (config.async ? 'await ' : '') +
                ("includeFile(__l,Object.assign(" + config.varName + ",{body:tR},__lP))\n")
            : config.include
                ? 'if(__l)tR=' +
                    (config.async ? 'await ' : '') +
                    ("include(__l,Object.assign(" + config.varName + ",{body:tR},__lP))\n")
                : '') +
        'if(cb){cb(null,tR)} return tR' +
        (config.useWith ? '}' : '');
    if (config.plugins) {
        for (var i = 0; i < config.plugins.length; i++) {
            var plugin = config.plugins[i];
            if (plugin.processFnString) {
                res = plugin.processFnString(res, config);
            }
        }
    }
    return res;
}
/**
 * Loops through the AST generated by `parse` and transform each item into JS calls
 *
 * **Example**
 *
 * ```js
 * // AST version of 'Hi <%= it.user %>'
 * let templateAST = ['Hi ', { val: 'it.user', t: 'i' }]
 * compileScope(templateAST, eta.config)
 * // "tR+='Hi ';tR+=E.e(it.user);"
 * ```
 */
function compileScope$1(buff, config) {
    var i = 0;
    var buffLength = buff.length;
    var returnStr = '';
    for (i; i < buffLength; i++) {
        var currentBlock = buff[i];
        if (typeof currentBlock === 'string') {
            var str = currentBlock;
            // we know string exists
            returnStr += "tR+='" + str + "'\n";
        }
        else {
            var type = currentBlock.t; // ~, s, !, ?, r
            var content = currentBlock.val || '';
            if (type === 'r') {
                // raw
                if (config.filter) {
                    content = 'E.filter(' + content + ')';
                }
                returnStr += 'tR+=' + content + '\n';
            }
            else if (type === 'i') {
                // interpolate
                if (config.filter) {
                    content = 'E.filter(' + content + ')';
                }
                if (config.autoEscape) {
                    content = 'E.e(' + content + ')';
                }
                returnStr += 'tR+=' + content + '\n';
                // reference
            }
            else if (type === 'e') {
                // execute
                returnStr += content + '\n'; // you need a \n in case you have <% } %>
            }
        }
    }
    return returnStr;
}

/**
 * Handles storage and accessing of values
 *
 * In this case, we use it to store compiled template functions
 * Indexed by their `name` or `filename`
 */
var Cacher$1 = /** @class */ (function () {
    function Cacher(cache) {
        this.cache = cache;
    }
    Cacher.prototype.define = function (key, val) {
        this.cache[key] = val;
    };
    Cacher.prototype.get = function (key) {
        // string | array.
        // TODO: allow array of keys to look down
        // TODO: create plugin to allow referencing helpers, filters with dot notation
        return this.cache[key];
    };
    Cacher.prototype.remove = function (key) {
        delete this.cache[key];
    };
    Cacher.prototype.reset = function () {
        this.cache = {};
    };
    Cacher.prototype.load = function (cacheObj) {
        copyProps$1(this.cache, cacheObj);
    };
    return Cacher;
}());

/* END TYPES */
/**
 * Eta's template storage
 *
 * Stores partials and cached templates
 */
var templates = new Cacher$1({});

/* END TYPES */
/**
 * Include a template based on its name (or filepath, if it's already been cached).
 *
 * Called like `include(templateNameOrPath, data)`
 */
function includeHelper(templateNameOrPath, data) {
    var template = this.templates.get(templateNameOrPath);
    if (!template) {
        throw EtaErr('Could not fetch template "' + templateNameOrPath + '"');
    }
    return template(data, this);
}
/** Eta's base (global) configuration */
var config = {
    async: false,
    autoEscape: true,
    autoTrim: [false, 'nl'],
    cache: false,
    e: XMLEscape,
    include: includeHelper,
    parse: {
        exec: '',
        interpolate: '=',
        raw: '~'
    },
    plugins: [],
    rmWhitespace: false,
    tags: ['<%', '%>'],
    templates: templates,
    useWith: false,
    varName: 'it'
};
/**
 * Takes one or two partial (not necessarily complete) configuration objects, merges them 1 layer deep into eta.config, and returns the result
 *
 * @param override Partial configuration object
 * @param baseConfig Partial configuration object to merge before `override`
 *
 * **Example**
 *
 * ```js
 * let customConfig = getConfig({tags: ['!#', '#!']})
 * ```
 */
function getConfig(override, baseConfig) {
    // TODO: run more tests on this
    var res = {}; // Linked
    copyProps$1(res, config); // Creates deep clone of eta.config, 1 layer deep
    if (baseConfig) {
        copyProps$1(res, baseConfig);
    }
    if (override) {
        copyProps$1(res, override);
    }
    return res;
}

/* END TYPES */
/**
 * Takes a template string and returns a template function that can be called with (data, config, [cb])
 *
 * @param str - The template string
 * @param config - A custom configuration object (optional)
 *
 * **Example**
 *
 * ```js
 * let compiledFn = eta.compile("Hi <%= it.user %>")
 * // function anonymous()
 * let compiledFnStr = compiledFn.toString()
 * // "function anonymous(it,E,cb\n) {\nvar tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR\n}"
 * ```
 */
function compile(str, config) {
    var options = getConfig(config || {});
    /* ASYNC HANDLING */
    // The below code is modified from mde/ejs. All credit should go to them.
    var ctor = options.async ? getAsyncFunctionConstructor() : Function;
    /* END ASYNC HANDLING */
    try {
        return new ctor(options.varName, 'E', // EtaConfig
        'cb', // optional callback
        compileToString$1(str, options)); // eslint-disable-line no-new-func
    }
    catch (e) {
        if (e instanceof SyntaxError) {
            throw EtaErr('Bad template syntax\n\n' +
                e.message +
                '\n' +
                Array(e.message.length + 1).join('=') +
                '\n' +
                compileToString$1(str, options) +
                '\n' // This will put an extra newline before the callstack for extra readability
            );
        }
        else {
            throw e;
        }
    }
}

var _BOM = /^\uFEFF/;
/* END TYPES */
/**
 * Get the path to the included file from the parent file path and the
 * specified path.
 *
 * If `name` does not have an extension, it will default to `.eta`
 *
 * @param name specified path
 * @param parentfile parent file path
 * @param isDirectory whether parentfile is a directory
 * @return absolute path to template
 */
function getWholeFilePath(name, parentfile, isDirectory) {
    var includePath = path.resolve(isDirectory ? parentfile : path.dirname(parentfile), // returns directory the parent file is in
    name // file
    ) + (path.extname(name) ? '' : '.eta');
    return includePath;
}
/**
 * Get the absolute path to an included template
 *
 * If this is called with an absolute path (for example, starting with '/' or 'C:\')
 * then Eta will attempt to resolve the absolute path within options.views. If it cannot,
 * Eta will fallback to options.root or '/'
 *
 * If this is called with a relative path, Eta will:
 * - Look relative to the current template (if the current template has the `filename` property)
 * - Look inside each directory in options.views
 *
 * Note: if Eta is unable to find a template using path and options, it will throw an error.
 *
 * @param path    specified path
 * @param options compilation options
 * @return absolute path to template
 */
function getPath(path, options) {
    var includePath = false;
    var views = options.views;
    var searchedPaths = [];
    // If these four values are the same,
    // getPath() will return the same result every time.
    // We can cache the result to avoid expensive
    // file operations.
    var pathOptions = JSON.stringify({
        filename: options.filename,
        path: path,
        root: options.root,
        views: options.views
    });
    if (options.cache && options.filepathCache && options.filepathCache[pathOptions]) {
        // Use the cached filepath
        return options.filepathCache[pathOptions];
    }
    /** Add a filepath to the list of paths we've checked for a template */
    function addPathToSearched(pathSearched) {
        if (!searchedPaths.includes(pathSearched)) {
            searchedPaths.push(pathSearched);
        }
    }
    /**
     * Take a filepath (like 'partials/mypartial.eta'). Attempt to find the template file inside `views`;
     * return the resulting template file path, or `false` to indicate that the template was not found.
     *
     * @param views the filepath that holds templates, or an array of filepaths that hold templates
     * @param path the path to the template
     */
    function searchViews(views, path) {
        var filePath;
        // If views is an array, then loop through each directory
        // And attempt to find the template
        if (Array.isArray(views) &&
            views.some(function (v) {
                filePath = getWholeFilePath(path, v, true);
                addPathToSearched(filePath);
                return fs.existsSync(filePath);
            })) {
            // If the above returned true, we know that the filePath was just set to a path
            // That exists (Array.some() returns as soon as it finds a valid element)
            return filePath;
        }
        else if (typeof views === 'string') {
            // Search for the file if views is a single directory
            filePath = getWholeFilePath(path, views, true);
            addPathToSearched(filePath);
            if (fs.existsSync(filePath)) {
                return filePath;
            }
        }
        // Unable to find a file
        return false;
    }
    // Path starts with '/', 'C:\', etc.
    var match = /^[A-Za-z]+:\\|^\//.exec(path);
    // Absolute path, like /partials/partial.eta
    if (match && match.length) {
        // We have to trim the beginning '/' off the path, or else
        // path.resolve(dir, path) will always resolve to just path
        var formattedPath = path.replace(/^\/*/, '');
        // First, try to resolve the path within options.views
        includePath = searchViews(views, formattedPath);
        if (!includePath) {
            // If that fails, searchViews will return false. Try to find the path
            // inside options.root (by default '/', the base of the filesystem)
            var pathFromRoot = getWholeFilePath(formattedPath, options.root || '/', true);
            addPathToSearched(pathFromRoot);
            includePath = pathFromRoot;
        }
    }
    else {
        // Relative paths
        // Look relative to a passed filename first
        if (options.filename) {
            var filePath = getWholeFilePath(path, options.filename);
            addPathToSearched(filePath);
            if (fs.existsSync(filePath)) {
                includePath = filePath;
            }
        }
        // Then look for the template in options.views
        if (!includePath) {
            includePath = searchViews(views, path);
        }
        if (!includePath) {
            throw EtaErr('Could not find the template "' + path + '". Paths tried: ' + searchedPaths);
        }
    }
    // If caching and filepathCache are enabled,
    // cache the input & output of this function.
    if (options.cache && options.filepathCache) {
        options.filepathCache[pathOptions] = includePath;
    }
    return includePath;
}
/**
 * Reads a file synchronously
 */
function readFile(filePath) {
    try {
        return fs.readFileSync(filePath).toString().replace(_BOM, ''); // TODO: is replacing BOM's necessary?
    }
    catch (_a) {
        throw EtaErr("Failed to read template at '" + filePath + "'");
    }
}

// express is set like: app.engine('html', require('eta').renderFile)
/* END TYPES */
/**
 * Reads a template, compiles it into a function, caches it if caching isn't disabled, returns the function
 *
 * @param filePath Absolute path to template file
 * @param options Eta configuration overrides
 * @param noCache Optionally, make Eta not cache the template
 */
function loadFile(filePath, options, noCache) {
    var config = getConfig(options);
    var template = readFile(filePath);
    try {
        var compiledTemplate = compile(template, config);
        if (!noCache) {
            config.templates.define(config.filename, compiledTemplate);
        }
        return compiledTemplate;
    }
    catch (e) {
        throw EtaErr('Loading file: ' + filePath + ' failed:\n\n' + e.message);
    }
}
/**
 * Get the template from a string or a file, either compiled on-the-fly or
 * read from cache (if enabled), and cache the template if needed.
 *
 * If `options.cache` is true, this function reads the file from
 * `options.filename` so it must be set prior to calling this function.
 *
 * @param options   compilation options
 * @return Eta template function
 */
function handleCache(options) {
    var filename = options.filename;
    if (options.cache) {
        var func = options.templates.get(filename);
        if (func) {
            return func;
        }
        return loadFile(filename, options);
    }
    // Caching is disabled, so pass noCache = true
    return loadFile(filename, options, true);
}
/**
 * Get the template function.
 *
 * If `options.cache` is `true`, then the template is cached.
 *
 * This returns a template function and the config object with which that template function should be called.
 *
 * @remarks
 *
 * It's important that this returns a config object with `filename` set.
 * Otherwise, the included file would not be able to use relative paths
 *
 * @param path path for the specified file (if relative, specify `views` on `options`)
 * @param options compilation options
 * @return [Eta template function, new config object]
 */
function includeFile(path, options) {
    // the below creates a new options object, using the parent filepath of the old options object and the path
    var newFileOptions = getConfig({ filename: getPath(path, options) }, options);
    // TODO: make sure properties are currectly copied over
    return [handleCache(newFileOptions), newFileOptions];
}

/* END TYPES */
/**
 * Called with `includeFile(path, data)`
 */
function includeFileHelper(path, data) {
    var templateAndConfig = includeFile(path, this);
    return templateAndConfig[0](data, templateAndConfig[1]);
}

/* END TYPES */
function handleCache$1(template, options) {
    if (options.cache && options.name && options.templates.get(options.name)) {
        return options.templates.get(options.name);
    }
    var templateFunc = typeof template === 'function' ? template : compile(template, options);
    // Note that we don't have to check if it already exists in the cache;
    // it would have returned earlier if it had
    if (options.cache && options.name) {
        options.templates.define(options.name, templateFunc);
    }
    return templateFunc;
}
/**
 * Render a template
 *
 * If `template` is a string, Eta will compile it to a function and then call it with the provided data.
 * If `template` is a template function, Eta will call it with the provided data.
 *
 * If `config.async` is `false`, Eta will return the rendered template.
 *
 * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.
 * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template.
 *
 * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.
 *
 * @param template Template string or template function
 * @param data Data to render the template with
 * @param config Optional config options
 * @param cb Callback function
 */
function render(template, data, config, cb) {
    var options = getConfig(config || {});
    if (options.async) {
        if (cb) {
            // If user passes callback
            try {
                // Note: if there is an error while rendering the template,
                // It will bubble up and be caught here
                var templateFn = handleCache$1(template, options);
                templateFn(data, options, cb);
            }
            catch (err) {
                return cb(err);
            }
        }
        else {
            // No callback, try returning a promise
            if (typeof promiseImpl === 'function') {
                return new promiseImpl(function (resolve, reject) {
                    try {
                        resolve(handleCache$1(template, options)(data, options));
                    }
                    catch (err) {
                        reject(err);
                    }
                });
            }
            else {
                throw EtaErr("Please provide a callback function, this env doesn't support Promises");
            }
        }
    }
    else {
        return handleCache$1(template, options)(data, options);
    }
}
/**
 * Render a template asynchronously
 *
 * If `template` is a string, Eta will compile it to a function and call it with the provided data.
 * If `template` is a function, Eta will call it with the provided data.
 *
 * If there is a callback function, Eta will call it with `(err, renderedTemplate)`.
 * If there is not a callback function, Eta will return a Promise that resolves to the rendered template
 *
 * @param template Template string or template function
 * @param data Data to render the template with
 * @param config Optional config options
 * @param cb Callback function
 */
function renderAsync(template, data, config, cb) {
    // Using Object.assign to lower bundle size, using spread operator makes it larger because of typescript injected polyfills
    return render(template, data, Object.assign({}, config, { async: true }), cb);
}

// @denoify-ignore
config.includeFile = includeFileHelper;
config.filepathCache = {};

const VAR_NAME = 'sk';
const EBAR = `\n---------------------------\n`;
const CLS = {
    virtual: "skribi-render-virtual",
    anim: "skribi-anims",
};
const REGENT_CLS = {
    regent: "skribi-regent",
    error: "skr-error",
    abort: "skr-abort",
    depth: "skr-depth",
    stasis: "skr-stasis",
    wait: "skr-waiting",
    eval: "skr-evaluating",
    self: "skr-self",
    state: "skr-state",
    generic: "skr-generic",
    syntax_eta: "skr-syntax-eta",
    syntax_js: "skr-syntax-js" // For JS syntax errors
};

Element.prototype.addClazz = function (str) {
    if (Array.isArray(str)) {
        this.addClass(...str);
    }
    else
        this.addClass(str);
};
function getFiles(app, dir) {
    let dirPath = obsidian.normalizePath(dir);
    let fo = app.vault.getAbstractFileByPath(dirPath);
    if (!fo || !(fo instanceof obsidian.TFolder))
        throw new Error(`Could not locate directory "${dirPath}"`);
    let files = [];
    obsidian.Vault.recurseChildren(fo, (fi) => {
        if (fi instanceof obsidian.TFile)
            files.push(fi);
    });
    // console.log(files)
    return files;
}
function checkFileExt(files, exts) {
    exts = toArray(exts);
    return toArray(files).every((f) => { return exts.contains(f.extension); });
}
function filterFileExt(files, exts) {
    exts = toArray(exts);
    return toArray(files).filter((f) => { if (checkFileExt(f, exts))
        return f; });
}
function toArray(args) {
    return (Array.isArray(args) ? args : [args]);
}
function isInFolder(e, dir) {
    let boo = (obsidian.normalizePath((/.+\//g).exec(e.path)[0]) == obsidian.normalizePath(dir));
    return boo;
}
function isExtant(obj) {
    return !((obj === null) || (obj === undefined));
}
function roundTo(x, to) {
    return parseFloat(parseFloat(x).toPrecision(to !== null && to !== void 0 ? to : 4));
}
function getVerbosity() {
    var _a;
    //@ts-ignore
    return ((_a = window.app.plugins.plugins["obsidian-skribi"]) === null || _a === void 0 ? void 0 : _a.settings.verboseLogging) || false;
}
function vLog(...args) {
    if (getVerbosity()) {
        console.log("Skribi:", ...args);
    }
}
function vWarn(...args) {
    if (getVerbosity()) {
        console.warn("Skribi:", ...args);
    }
}
function dLog(...args) {
    var _a, _b;
    //@ts-ignore
    if (((_b = (_a = window === null || window === void 0 ? void 0 : window.app.plugins.plugins["obsidian-skribi"]) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.devLogging) || false) {
        console.log(...args);
    }
}
/* Takes an array of strings and returns a record of key/value pairs for each, where the key and value are the same */
function toDupeRecord(arr) {
    return arr.reduce((a, i) => (Object.assign(Object.assign({}, a), { [i]: i })), {});
}
/**
 * @param input An object to clone
 * @param keys The keys of properties to omit from the clone
 * @returns A clone of 'input' without the omitted properties */
function withoutKey(input, key) {
    const clone = Object.assign({}, input);
    if (Array.isArray(key)) {
        key.forEach((k) => {
            delete clone[k];
        });
    }
    else {
        delete clone[key];
    }
    return clone;
}
Object.getPrototypeOf(function () {
    return __awaiter(this, void 0, void 0, function* () { });
}).constructor;
new Function('return this')().Promise;
const getAsyncConstructor = () => new Function('return (async function(){}).constructor')();
const isFunc = (func) => (func instanceof Function);
const isFile = (item) => (item) instanceof obsidian.TFile;
function average(...numbers) {
    return numbers.reduce((val, cur) => val + cur) / numbers.length;
}
/* Get link to documentation page. */
function linkDocs(page) {
    // return `https://azulaloi.net/obsidian-skribi/${page}`
    return `https://azulaloi.github.io/obsidian-skribi/${page}`;
}
/* Prefixes string with plugin name. Makes reusing code across plugins easier. */
function kls(cls) { return `skribi-${cls}`; }
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while (i) {
        hash = (hash * 33) ^ str.charCodeAt(--i);
    }
    return hash >>> 0;
}

// Reserved word lists for various dialects of the language

var reservedWords = {
  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
  5: "class enum extends super const export import",
  6: "enum",
  strict: "implements interface let package private protected public static yield",
  strictBind: "eval arguments"
};

// And the keywords

var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";

var keywords = {
  5: ecma5AndLessKeywords,
  "5module": ecma5AndLessKeywords + " export import",
  6: ecma5AndLessKeywords + " const class extends export import super"
};

var keywordRelationalOperator = /^in(stanceof)?$/;

// ## Character categories

// Big ugly regular expressions that match characters in the
// whitespace, identifier, and identifier-start categories. These
// are only applied when a character is found to actually have a
// code point above 128.
// Generated by `bin/generate-identifier-regex.js`.
var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08c7\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\u9ffc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7bf\ua7c2-\ua7ca\ua7f5-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf\u1ac0\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";

var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

// These are a run-length and offset encoded representation of the
// >0xffff code points that are a valid part of identifiers. The
// offset starts at 0x10000, and each pair of numbers represents an
// offset to the next range, and then a size of the range. They were
// generated by bin/generate-identifier-regex.js

// eslint-disable-next-line comma-spacing
var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];

// eslint-disable-next-line comma-spacing
var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];

// This has a complexity linear to the value of the code. The
// assumption is that looking up astral identifier characters is
// rare.
function isInAstralSet(code, set) {
  var pos = 0x10000;
  for (var i = 0; i < set.length; i += 2) {
    pos += set[i];
    if (pos > code) { return false }
    pos += set[i + 1];
    if (pos >= code) { return true }
  }
}

// Test whether a given character code starts an identifier.

function isIdentifierStart(code, astral) {
  if (code < 65) { return code === 36 }
  if (code < 91) { return true }
  if (code < 97) { return code === 95 }
  if (code < 123) { return true }
  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }
  if (astral === false) { return false }
  return isInAstralSet(code, astralIdentifierStartCodes)
}

// Test whether a given character is part of an identifier.

function isIdentifierChar(code, astral) {
  if (code < 48) { return code === 36 }
  if (code < 58) { return true }
  if (code < 65) { return false }
  if (code < 91) { return true }
  if (code < 97) { return code === 95 }
  if (code < 123) { return true }
  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }
  if (astral === false) { return false }
  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)
}

// ## Token types

// The assignment of fine-grained, information-carrying type objects
// allows the tokenizer to store the information it has about a
// token in a way that is very cheap for the parser to look up.

// All token type variables start with an underscore, to make them
// easy to recognize.

// The `beforeExpr` property is used to disambiguate between regular
// expressions and divisions. It is set on all token types that can
// be followed by an expression (thus, a slash after them would be a
// regular expression).
//
// The `startsExpr` property is used to check if the token ends a
// `yield` expression. It is set on all token types that either can
// directly start an expression (like a quotation mark) or can
// continue an expression (like the body of a string).
//
// `isLoop` marks a keyword as starting a loop, which is important
// to know when parsing a label, in order to allow or disallow
// continue jumps to that label.

var TokenType = function TokenType(label, conf) {
  if ( conf === void 0 ) conf = {};

  this.label = label;
  this.keyword = conf.keyword;
  this.beforeExpr = !!conf.beforeExpr;
  this.startsExpr = !!conf.startsExpr;
  this.isLoop = !!conf.isLoop;
  this.isAssign = !!conf.isAssign;
  this.prefix = !!conf.prefix;
  this.postfix = !!conf.postfix;
  this.binop = conf.binop || null;
  this.updateContext = null;
};

function binop(name, prec) {
  return new TokenType(name, {beforeExpr: true, binop: prec})
}
var beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};

// Map keyword names to token types.

var keywords$1 = {};

// Succinct definitions of keyword token types
function kw(name, options) {
  if ( options === void 0 ) options = {};

  options.keyword = name;
  return keywords$1[name] = new TokenType(name, options)
}

var types = {
  num: new TokenType("num", startsExpr),
  regexp: new TokenType("regexp", startsExpr),
  string: new TokenType("string", startsExpr),
  name: new TokenType("name", startsExpr),
  privateId: new TokenType("privateId", startsExpr),
  eof: new TokenType("eof"),

  // Punctuation token types.
  bracketL: new TokenType("[", {beforeExpr: true, startsExpr: true}),
  bracketR: new TokenType("]"),
  braceL: new TokenType("{", {beforeExpr: true, startsExpr: true}),
  braceR: new TokenType("}"),
  parenL: new TokenType("(", {beforeExpr: true, startsExpr: true}),
  parenR: new TokenType(")"),
  comma: new TokenType(",", beforeExpr),
  semi: new TokenType(";", beforeExpr),
  colon: new TokenType(":", beforeExpr),
  dot: new TokenType("."),
  question: new TokenType("?", beforeExpr),
  questionDot: new TokenType("?."),
  arrow: new TokenType("=>", beforeExpr),
  template: new TokenType("template"),
  invalidTemplate: new TokenType("invalidTemplate"),
  ellipsis: new TokenType("...", beforeExpr),
  backQuote: new TokenType("`", startsExpr),
  dollarBraceL: new TokenType("${", {beforeExpr: true, startsExpr: true}),

  // Operators. These carry several kinds of properties to help the
  // parser use them properly (the presence of these properties is
  // what categorizes them as operators).
  //
  // `binop`, when present, specifies that this operator is a binary
  // operator, and will refer to its precedence.
  //
  // `prefix` and `postfix` mark the operator as a prefix or postfix
  // unary operator.
  //
  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
  // binary operators with a very low precedence, that should result
  // in AssignmentExpression nodes.

  eq: new TokenType("=", {beforeExpr: true, isAssign: true}),
  assign: new TokenType("_=", {beforeExpr: true, isAssign: true}),
  incDec: new TokenType("++/--", {prefix: true, postfix: true, startsExpr: true}),
  prefix: new TokenType("!/~", {beforeExpr: true, prefix: true, startsExpr: true}),
  logicalOR: binop("||", 1),
  logicalAND: binop("&&", 2),
  bitwiseOR: binop("|", 3),
  bitwiseXOR: binop("^", 4),
  bitwiseAND: binop("&", 5),
  equality: binop("==/!=/===/!==", 6),
  relational: binop("</>/<=/>=", 7),
  bitShift: binop("<</>>/>>>", 8),
  plusMin: new TokenType("+/-", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),
  modulo: binop("%", 10),
  star: binop("*", 10),
  slash: binop("/", 10),
  starstar: new TokenType("**", {beforeExpr: true}),
  coalesce: binop("??", 1),

  // Keyword token types.
  _break: kw("break"),
  _case: kw("case", beforeExpr),
  _catch: kw("catch"),
  _continue: kw("continue"),
  _debugger: kw("debugger"),
  _default: kw("default", beforeExpr),
  _do: kw("do", {isLoop: true, beforeExpr: true}),
  _else: kw("else", beforeExpr),
  _finally: kw("finally"),
  _for: kw("for", {isLoop: true}),
  _function: kw("function", startsExpr),
  _if: kw("if"),
  _return: kw("return", beforeExpr),
  _switch: kw("switch"),
  _throw: kw("throw", beforeExpr),
  _try: kw("try"),
  _var: kw("var"),
  _const: kw("const"),
  _while: kw("while", {isLoop: true}),
  _with: kw("with"),
  _new: kw("new", {beforeExpr: true, startsExpr: true}),
  _this: kw("this", startsExpr),
  _super: kw("super", startsExpr),
  _class: kw("class", startsExpr),
  _extends: kw("extends", beforeExpr),
  _export: kw("export"),
  _import: kw("import", startsExpr),
  _null: kw("null", startsExpr),
  _true: kw("true", startsExpr),
  _false: kw("false", startsExpr),
  _in: kw("in", {beforeExpr: true, binop: 7}),
  _instanceof: kw("instanceof", {beforeExpr: true, binop: 7}),
  _typeof: kw("typeof", {beforeExpr: true, prefix: true, startsExpr: true}),
  _void: kw("void", {beforeExpr: true, prefix: true, startsExpr: true}),
  _delete: kw("delete", {beforeExpr: true, prefix: true, startsExpr: true})
};

// Matches a whole line break (where CRLF is considered a single
// line break). Used to count lines.

var lineBreak = /\r\n?|\n|\u2028|\u2029/;
var lineBreakG = new RegExp(lineBreak.source, "g");

function isNewLine(code) {
  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029
}

var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;

var ref = Object.prototype;
var hasOwnProperty = ref.hasOwnProperty;
var toString = ref.toString;

// Checks if an object has a property.

function has(obj, propName) {
  return hasOwnProperty.call(obj, propName)
}

var isArray = Array.isArray || (function (obj) { return (
  toString.call(obj) === "[object Array]"
); });

function wordsRegexp(words) {
  return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$")
}

// These are used when `options.locations` is on, for the
// `startLoc` and `endLoc` properties.

var Position = function Position(line, col) {
  this.line = line;
  this.column = col;
};

Position.prototype.offset = function offset (n) {
  return new Position(this.line, this.column + n)
};

var SourceLocation = function SourceLocation(p, start, end) {
  this.start = start;
  this.end = end;
  if (p.sourceFile !== null) { this.source = p.sourceFile; }
};

// The `getLineInfo` function is mostly useful when the
// `locations` option is off (for performance reasons) and you
// want to find the line/column position for a given character
// offset. `input` should be the code string that the offset refers
// into.

function getLineInfo(input, offset) {
  for (var line = 1, cur = 0;;) {
    lineBreakG.lastIndex = cur;
    var match = lineBreakG.exec(input);
    if (match && match.index < offset) {
      ++line;
      cur = match.index + match[0].length;
    } else {
      return new Position(line, offset - cur)
    }
  }
}

// A second argument must be given to configure the parser process.
// These options are recognized (only `ecmaVersion` is required):

var defaultOptions = {
  // `ecmaVersion` indicates the ECMAScript version to parse. Must be
  // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10
  // (2019), 11 (2020), 12 (2021), 13 (2022), or `"latest"` (the
  // latest version the library supports). This influences support
  // for strict mode, the set of reserved words, and support for
  // new syntax features.
  ecmaVersion: null,
  // `sourceType` indicates the mode the code should be parsed in.
  // Can be either `"script"` or `"module"`. This influences global
  // strict mode and parsing of `import` and `export` declarations.
  sourceType: "script",
  // `onInsertedSemicolon` can be a callback that will be called
  // when a semicolon is automatically inserted. It will be passed
  // the position of the comma as an offset, and if `locations` is
  // enabled, it is given the location as a `{line, column}` object
  // as second argument.
  onInsertedSemicolon: null,
  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
  // trailing commas.
  onTrailingComma: null,
  // By default, reserved words are only enforced if ecmaVersion >= 5.
  // Set `allowReserved` to a boolean value to explicitly turn this on
  // an off. When this option has the value "never", reserved words
  // and keywords can also not be used as property names.
  allowReserved: null,
  // When enabled, a return at the top level is not considered an
  // error.
  allowReturnOutsideFunction: false,
  // When enabled, import/export statements are not constrained to
  // appearing at the top of the program, and an import.meta expression
  // in a script isn't considered an error.
  allowImportExportEverywhere: false,
  // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.
  // When enabled, await identifiers are allowed to appear at the top-level scope,
  // but they are still not allowed in non-async functions.
  allowAwaitOutsideFunction: null,
  // When enabled, super identifiers are not constrained to
  // appearing in methods and do not raise an error when they appear elsewhere.
  allowSuperOutsideMethod: null,
  // When enabled, hashbang directive in the beginning of file
  // is allowed and treated as a line comment.
  allowHashBang: false,
  // When `locations` is on, `loc` properties holding objects with
  // `start` and `end` properties in `{line, column}` form (with
  // line being 1-based and column 0-based) will be attached to the
  // nodes.
  locations: false,
  // A function can be passed as `onToken` option, which will
  // cause Acorn to call that function with object in the same
  // format as tokens returned from `tokenizer().getToken()`. Note
  // that you are not allowed to call the parser from the
  // callback—that will corrupt its internal state.
  onToken: null,
  // A function can be passed as `onComment` option, which will
  // cause Acorn to call that function with `(block, text, start,
  // end)` parameters whenever a comment is skipped. `block` is a
  // boolean indicating whether this is a block (`/* */`) comment,
  // `text` is the content of the comment, and `start` and `end` are
  // character offsets that denote the start and end of the comment.
  // When the `locations` option is on, two more parameters are
  // passed, the full `{line, column}` locations of the start and
  // end of the comments. Note that you are not allowed to call the
  // parser from the callback—that will corrupt its internal state.
  onComment: null,
  // Nodes have their start and end characters offsets recorded in
  // `start` and `end` properties (directly on the node, rather than
  // the `loc` object, which holds line/column data. To also add a
  // [semi-standardized][range] `range` property holding a `[start,
  // end]` array with the same numbers, set the `ranges` option to
  // `true`.
  //
  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
  ranges: false,
  // It is possible to parse multiple files into a single AST by
  // passing the tree produced by parsing the first file as
  // `program` option in subsequent parses. This will add the
  // toplevel forms of the parsed file to the `Program` (top) node
  // of an existing parse tree.
  program: null,
  // When `locations` is on, you can pass this to record the source
  // file in every node's `loc` object.
  sourceFile: null,
  // This value, if given, is stored in every node, whether
  // `locations` is on or off.
  directSourceFile: null,
  // When enabled, parenthesized expressions are represented by
  // (non-standard) ParenthesizedExpression nodes
  preserveParens: false
};

// Interpret and default an options object

var warnedAboutEcmaVersion = false;

function getOptions(opts) {
  var options = {};

  for (var opt in defaultOptions)
    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }

  if (options.ecmaVersion === "latest") {
    options.ecmaVersion = 1e8;
  } else if (options.ecmaVersion == null) {
    if (!warnedAboutEcmaVersion && typeof console === "object" && console.warn) {
      warnedAboutEcmaVersion = true;
      console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.");
    }
    options.ecmaVersion = 11;
  } else if (options.ecmaVersion >= 2015) {
    options.ecmaVersion -= 2009;
  }

  if (options.allowReserved == null)
    { options.allowReserved = options.ecmaVersion < 5; }

  if (isArray(options.onToken)) {
    var tokens = options.onToken;
    options.onToken = function (token) { return tokens.push(token); };
  }
  if (isArray(options.onComment))
    { options.onComment = pushComment(options, options.onComment); }

  return options
}

function pushComment(options, array) {
  return function(block, text, start, end, startLoc, endLoc) {
    var comment = {
      type: block ? "Block" : "Line",
      value: text,
      start: start,
      end: end
    };
    if (options.locations)
      { comment.loc = new SourceLocation(this, startLoc, endLoc); }
    if (options.ranges)
      { comment.range = [start, end]; }
    array.push(comment);
  }
}

// Each scope gets a bitset that may contain these flags
var
    SCOPE_TOP = 1,
    SCOPE_FUNCTION = 2,
    SCOPE_ASYNC = 4,
    SCOPE_GENERATOR = 8,
    SCOPE_ARROW = 16,
    SCOPE_SIMPLE_CATCH = 32,
    SCOPE_SUPER = 64,
    SCOPE_DIRECT_SUPER = 128,
    SCOPE_CLASS_STATIC_BLOCK = 256,
    SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;

function functionFlags(async, generator) {
  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)
}

// Used in checkLVal* and declareName to determine the type of a binding
var
    BIND_NONE = 0, // Not a binding
    BIND_VAR = 1, // Var-style binding
    BIND_LEXICAL = 2, // Let- or const-style binding
    BIND_FUNCTION = 3, // Function declaration
    BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding
    BIND_OUTSIDE = 5; // Special case for function names as bound inside the function

var Parser = function Parser(options, input, startPos) {
  this.options = options = getOptions(options);
  this.sourceFile = options.sourceFile;
  this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
  var reserved = "";
  if (options.allowReserved !== true) {
    reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];
    if (options.sourceType === "module") { reserved += " await"; }
  }
  this.reservedWords = wordsRegexp(reserved);
  var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
  this.reservedWordsStrict = wordsRegexp(reservedStrict);
  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
  this.input = String(input);

  // Used to signal to callers of `readWord1` whether the word
  // contained any escape sequences. This is needed because words with
  // escape sequences must not be interpreted as keywords.
  this.containsEsc = false;

  // Set up token state

  // The current position of the tokenizer in the input.
  if (startPos) {
    this.pos = startPos;
    this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
  } else {
    this.pos = this.lineStart = 0;
    this.curLine = 1;
  }

  // Properties of the current token:
  // Its type
  this.type = types.eof;
  // For tokens that include more information than their type, the value
  this.value = null;
  // Its start and end offset
  this.start = this.end = this.pos;
  // And, if locations are used, the {line, column} object
  // corresponding to those offsets
  this.startLoc = this.endLoc = this.curPosition();

  // Position information for the previous token
  this.lastTokEndLoc = this.lastTokStartLoc = null;
  this.lastTokStart = this.lastTokEnd = this.pos;

  // The context stack is used to superficially track syntactic
  // context to predict whether a regular expression is allowed in a
  // given position.
  this.context = this.initialContext();
  this.exprAllowed = true;

  // Figure out if it's a module code.
  this.inModule = options.sourceType === "module";
  this.strict = this.inModule || this.strictDirective(this.pos);

  // Used to signify the start of a potential arrow function
  this.potentialArrowAt = -1;
  this.potentialArrowInForAwait = false;

  // Positions to delayed-check that yield/await does not exist in default parameters.
  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
  // Labels in scope.
  this.labels = [];
  // Thus-far undefined exports.
  this.undefinedExports = Object.create(null);

  // If enabled, skip leading hashbang line.
  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!")
    { this.skipLineComment(2); }

  // Scope tracking for duplicate variable names (see scope.js)
  this.scopeStack = [];
  this.enterScope(SCOPE_TOP);

  // For RegExp validation
  this.regexpState = null;

  // The stack of private names.
  // Each element has two properties: 'declared' and 'used'.
  // When it exited from the outermost class definition, all used private names must be declared.
  this.privateNameStack = [];
};

var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },canAwait: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },allowNewDotTarget: { configurable: true },inClassStaticBlock: { configurable: true } };

Parser.prototype.parse = function parse () {
  var node = this.options.program || this.startNode();
  this.nextToken();
  return this.parseTopLevel(node)
};

prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };
prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };
prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };
prototypeAccessors.canAwait.get = function () {
  for (var i = this.scopeStack.length - 1; i >= 0; i--) {
    var scope = this.scopeStack[i];
    if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) { return false }
    if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }
  }
  return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction
};
prototypeAccessors.allowSuper.get = function () {
  var ref = this.currentThisScope();
    var flags = ref.flags;
    var inClassFieldInit = ref.inClassFieldInit;
  return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod
};
prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };
prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };
prototypeAccessors.allowNewDotTarget.get = function () {
  var ref = this.currentThisScope();
    var flags = ref.flags;
    var inClassFieldInit = ref.inClassFieldInit;
  return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit
};
prototypeAccessors.inClassStaticBlock.get = function () {
  return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0
};

Parser.extend = function extend () {
    var plugins = [], len = arguments.length;
    while ( len-- ) plugins[ len ] = arguments[ len ];

  var cls = this;
  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }
  return cls
};

Parser.parse = function parse (input, options) {
  return new this(options, input).parse()
};

Parser.parseExpressionAt = function parseExpressionAt (input, pos, options) {
  var parser = new this(options, input, pos);
  parser.nextToken();
  return parser.parseExpression()
};

Parser.tokenizer = function tokenizer (input, options) {
  return new this(options, input)
};

Object.defineProperties( Parser.prototype, prototypeAccessors );

var pp = Parser.prototype;

// ## Parser utilities

var literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
pp.strictDirective = function(start) {
  for (;;) {
    // Try to find string literal.
    skipWhiteSpace.lastIndex = start;
    start += skipWhiteSpace.exec(this.input)[0].length;
    var match = literal.exec(this.input.slice(start));
    if (!match) { return false }
    if ((match[1] || match[2]) === "use strict") {
      skipWhiteSpace.lastIndex = start + match[0].length;
      var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
      var next = this.input.charAt(end);
      return next === ";" || next === "}" ||
        (lineBreak.test(spaceAfter[0]) &&
         !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "="))
    }
    start += match[0].length;

    // Skip semicolon, if any.
    skipWhiteSpace.lastIndex = start;
    start += skipWhiteSpace.exec(this.input)[0].length;
    if (this.input[start] === ";")
      { start++; }
  }
};

// Predicate that tests whether the next token is of the given
// type, and if yes, consumes it as a side effect.

pp.eat = function(type) {
  if (this.type === type) {
    this.next();
    return true
  } else {
    return false
  }
};

// Tests whether parsed token is a contextual keyword.

pp.isContextual = function(name) {
  return this.type === types.name && this.value === name && !this.containsEsc
};

// Consumes contextual keyword if possible.

pp.eatContextual = function(name) {
  if (!this.isContextual(name)) { return false }
  this.next();
  return true
};

// Asserts that following token is given contextual keyword.

pp.expectContextual = function(name) {
  if (!this.eatContextual(name)) { this.unexpected(); }
};

// Test whether a semicolon can be inserted at the current position.

pp.canInsertSemicolon = function() {
  return this.type === types.eof ||
    this.type === types.braceR ||
    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
};

pp.insertSemicolon = function() {
  if (this.canInsertSemicolon()) {
    if (this.options.onInsertedSemicolon)
      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }
    return true
  }
};

// Consume a semicolon, or, failing that, see if we are allowed to
// pretend that there is a semicolon at this position.

pp.semicolon = function() {
  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }
};

pp.afterTrailingComma = function(tokType, notNext) {
  if (this.type === tokType) {
    if (this.options.onTrailingComma)
      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }
    if (!notNext)
      { this.next(); }
    return true
  }
};

// Expect a token of a given type. If found, consume it, otherwise,
// raise an unexpected token error.

pp.expect = function(type) {
  this.eat(type) || this.unexpected();
};

// Raise an unexpected token error.

pp.unexpected = function(pos) {
  this.raise(pos != null ? pos : this.start, "Unexpected token");
};

function DestructuringErrors() {
  this.shorthandAssign =
  this.trailingComma =
  this.parenthesizedAssign =
  this.parenthesizedBind =
  this.doubleProto =
    -1;
}

pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {
  if (!refDestructuringErrors) { return }
  if (refDestructuringErrors.trailingComma > -1)
    { this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element"); }
  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
  if (parens > -1) { this.raiseRecoverable(parens, "Parenthesized pattern"); }
};

pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
  if (!refDestructuringErrors) { return false }
  var shorthandAssign = refDestructuringErrors.shorthandAssign;
  var doubleProto = refDestructuringErrors.doubleProto;
  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }
  if (shorthandAssign >= 0)
    { this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"); }
  if (doubleProto >= 0)
    { this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property"); }
};

pp.checkYieldAwaitInDefaultParams = function() {
  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))
    { this.raise(this.yieldPos, "Yield expression cannot be a default value"); }
  if (this.awaitPos)
    { this.raise(this.awaitPos, "Await expression cannot be a default value"); }
};

pp.isSimpleAssignTarget = function(expr) {
  if (expr.type === "ParenthesizedExpression")
    { return this.isSimpleAssignTarget(expr.expression) }
  return expr.type === "Identifier" || expr.type === "MemberExpression"
};

var pp$1 = Parser.prototype;

// ### Statement parsing

// Parse a program. Initializes the parser, reads any number of
// statements, and wraps them in a Program node.  Optionally takes a
// `program` argument.  If present, the statements will be appended
// to its body instead of creating a new node.

pp$1.parseTopLevel = function(node) {
  var exports = Object.create(null);
  if (!node.body) { node.body = []; }
  while (this.type !== types.eof) {
    var stmt = this.parseStatement(null, true, exports);
    node.body.push(stmt);
  }
  if (this.inModule)
    { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)
      {
        var name = list[i];

        this.raiseRecoverable(this.undefinedExports[name].start, ("Export '" + name + "' is not defined"));
      } }
  this.adaptDirectivePrologue(node.body);
  this.next();
  node.sourceType = this.options.sourceType;
  return this.finishNode(node, "Program")
};

var loopLabel = {kind: "loop"}, switchLabel = {kind: "switch"};

pp$1.isLet = function(context) {
  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) { return false }
  skipWhiteSpace.lastIndex = this.pos;
  var skip = skipWhiteSpace.exec(this.input);
  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
  // For ambiguous cases, determine if a LexicalDeclaration (or only a
  // Statement) is allowed here. If context is not empty then only a Statement
  // is allowed. However, `let [` is an explicit negative lookahead for
  // ExpressionStatement, so special-case it first.
  if (nextCh === 91 || nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '[', '/', astral
  if (context) { return false }

  if (nextCh === 123) { return true } // '{'
  if (isIdentifierStart(nextCh, true)) {
    var pos = next + 1;
    while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) { ++pos; }
    if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }
    var ident = this.input.slice(next, pos);
    if (!keywordRelationalOperator.test(ident)) { return true }
  }
  return false
};

// check 'async [no LineTerminator here] function'
// - 'async /*foo*/ function' is OK.
// - 'async /*\n*/ function' is invalid.
pp$1.isAsyncFunction = function() {
  if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
    { return false }

  skipWhiteSpace.lastIndex = this.pos;
  var skip = skipWhiteSpace.exec(this.input);
  var next = this.pos + skip[0].length, after;
  return !lineBreak.test(this.input.slice(this.pos, next)) &&
    this.input.slice(next, next + 8) === "function" &&
    (next + 8 === this.input.length ||
     !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))
};

// Parse a single statement.
//
// If expecting a statement and finding a slash operator, parse a
// regular expression literal. This is to handle cases like
// `if (foo) /blah/.exec(foo)`, where looking at the previous token
// does not help.

pp$1.parseStatement = function(context, topLevel, exports) {
  var starttype = this.type, node = this.startNode(), kind;

  if (this.isLet(context)) {
    starttype = types._var;
    kind = "let";
  }

  // Most types of statements are recognized by the keyword they
  // start with. Many are trivial to parse, some require a bit of
  // complexity.

  switch (starttype) {
  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)
  case types._debugger: return this.parseDebuggerStatement(node)
  case types._do: return this.parseDoStatement(node)
  case types._for: return this.parseForStatement(node)
  case types._function:
    // Function as sole body of either an if statement or a labeled statement
    // works, but not when it is part of a labeled statement that is the sole
    // body of an if statement.
    if ((context && (this.strict || context !== "if" && context !== "label")) && this.options.ecmaVersion >= 6) { this.unexpected(); }
    return this.parseFunctionStatement(node, false, !context)
  case types._class:
    if (context) { this.unexpected(); }
    return this.parseClass(node, true)
  case types._if: return this.parseIfStatement(node)
  case types._return: return this.parseReturnStatement(node)
  case types._switch: return this.parseSwitchStatement(node)
  case types._throw: return this.parseThrowStatement(node)
  case types._try: return this.parseTryStatement(node)
  case types._const: case types._var:
    kind = kind || this.value;
    if (context && kind !== "var") { this.unexpected(); }
    return this.parseVarStatement(node, kind)
  case types._while: return this.parseWhileStatement(node)
  case types._with: return this.parseWithStatement(node)
  case types.braceL: return this.parseBlock(true, node)
  case types.semi: return this.parseEmptyStatement(node)
  case types._export:
  case types._import:
    if (this.options.ecmaVersion > 10 && starttype === types._import) {
      skipWhiteSpace.lastIndex = this.pos;
      var skip = skipWhiteSpace.exec(this.input);
      var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
      if (nextCh === 40 || nextCh === 46) // '(' or '.'
        { return this.parseExpressionStatement(node, this.parseExpression()) }
    }

    if (!this.options.allowImportExportEverywhere) {
      if (!topLevel)
        { this.raise(this.start, "'import' and 'export' may only appear at the top level"); }
      if (!this.inModule)
        { this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'"); }
    }
    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)

    // If the statement does not start with a statement keyword or a
    // brace, it's an ExpressionStatement or LabeledStatement. We
    // simply start parsing an expression, and afterwards, if the
    // next token is a colon and the expression was a simple
    // Identifier node, we switch to interpreting it as a label.
  default:
    if (this.isAsyncFunction()) {
      if (context) { this.unexpected(); }
      this.next();
      return this.parseFunctionStatement(node, true, !context)
    }

    var maybeName = this.value, expr = this.parseExpression();
    if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon))
      { return this.parseLabeledStatement(node, maybeName, expr, context) }
    else { return this.parseExpressionStatement(node, expr) }
  }
};

pp$1.parseBreakContinueStatement = function(node, keyword) {
  var isBreak = keyword === "break";
  this.next();
  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }
  else if (this.type !== types.name) { this.unexpected(); }
  else {
    node.label = this.parseIdent();
    this.semicolon();
  }

  // Verify that there is an actual destination to break or
  // continue to.
  var i = 0;
  for (; i < this.labels.length; ++i) {
    var lab = this.labels[i];
    if (node.label == null || lab.name === node.label.name) {
      if (lab.kind != null && (isBreak || lab.kind === "loop")) { break }
      if (node.label && isBreak) { break }
    }
  }
  if (i === this.labels.length) { this.raise(node.start, "Unsyntactic " + keyword); }
  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement")
};

pp$1.parseDebuggerStatement = function(node) {
  this.next();
  this.semicolon();
  return this.finishNode(node, "DebuggerStatement")
};

pp$1.parseDoStatement = function(node) {
  this.next();
  this.labels.push(loopLabel);
  node.body = this.parseStatement("do");
  this.labels.pop();
  this.expect(types._while);
  node.test = this.parseParenExpression();
  if (this.options.ecmaVersion >= 6)
    { this.eat(types.semi); }
  else
    { this.semicolon(); }
  return this.finishNode(node, "DoWhileStatement")
};

// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
// loop is non-trivial. Basically, we have to parse the init `var`
// statement or expression, disallowing the `in` operator (see
// the second parameter to `parseExpression`), and then check
// whether the next token is `in` or `of`. When there is no init
// part (semicolon immediately after the opening parenthesis), it
// is a regular `for` loop.

pp$1.parseForStatement = function(node) {
  this.next();
  var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await")) ? this.lastTokStart : -1;
  this.labels.push(loopLabel);
  this.enterScope(0);
  this.expect(types.parenL);
  if (this.type === types.semi) {
    if (awaitAt > -1) { this.unexpected(awaitAt); }
    return this.parseFor(node, null)
  }
  var isLet = this.isLet();
  if (this.type === types._var || this.type === types._const || isLet) {
    var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
    this.next();
    this.parseVar(init$1, true, kind);
    this.finishNode(init$1, "VariableDeclaration");
    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) && init$1.declarations.length === 1) {
      if (this.options.ecmaVersion >= 9) {
        if (this.type === types._in) {
          if (awaitAt > -1) { this.unexpected(awaitAt); }
        } else { node.await = awaitAt > -1; }
      }
      return this.parseForIn(node, init$1)
    }
    if (awaitAt > -1) { this.unexpected(awaitAt); }
    return this.parseFor(node, init$1)
  }
  var startsWithLet = this.isContextual("let"), isForOf = false;
  var refDestructuringErrors = new DestructuringErrors;
  var init = this.parseExpression(awaitAt > -1 ? "await" : true, refDestructuringErrors);
  if (this.type === types._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
    if (this.options.ecmaVersion >= 9) {
      if (this.type === types._in) {
        if (awaitAt > -1) { this.unexpected(awaitAt); }
      } else { node.await = awaitAt > -1; }
    }
    if (startsWithLet && isForOf) { this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'."); }
    this.toAssignable(init, false, refDestructuringErrors);
    this.checkLValPattern(init);
    return this.parseForIn(node, init)
  } else {
    this.checkExpressionErrors(refDestructuringErrors, true);
  }
  if (awaitAt > -1) { this.unexpected(awaitAt); }
  return this.parseFor(node, init)
};

pp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {
  this.next();
  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)
};

pp$1.parseIfStatement = function(node) {
  this.next();
  node.test = this.parseParenExpression();
  // allow function declarations in branches, but only in non-strict mode
  node.consequent = this.parseStatement("if");
  node.alternate = this.eat(types._else) ? this.parseStatement("if") : null;
  return this.finishNode(node, "IfStatement")
};

pp$1.parseReturnStatement = function(node) {
  if (!this.inFunction && !this.options.allowReturnOutsideFunction)
    { this.raise(this.start, "'return' outside of function"); }
  this.next();

  // In `return` (and `break`/`continue`), the keywords with
  // optional arguments, we eagerly look for a semicolon or the
  // possibility to insert one.

  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }
  else { node.argument = this.parseExpression(); this.semicolon(); }
  return this.finishNode(node, "ReturnStatement")
};

pp$1.parseSwitchStatement = function(node) {
  this.next();
  node.discriminant = this.parseParenExpression();
  node.cases = [];
  this.expect(types.braceL);
  this.labels.push(switchLabel);
  this.enterScope(0);

  // Statements under must be grouped (by label) in SwitchCase
  // nodes. `cur` is used to keep the node that we are currently
  // adding statements to.

  var cur;
  for (var sawDefault = false; this.type !== types.braceR;) {
    if (this.type === types._case || this.type === types._default) {
      var isCase = this.type === types._case;
      if (cur) { this.finishNode(cur, "SwitchCase"); }
      node.cases.push(cur = this.startNode());
      cur.consequent = [];
      this.next();
      if (isCase) {
        cur.test = this.parseExpression();
      } else {
        if (sawDefault) { this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"); }
        sawDefault = true;
        cur.test = null;
      }
      this.expect(types.colon);
    } else {
      if (!cur) { this.unexpected(); }
      cur.consequent.push(this.parseStatement(null));
    }
  }
  this.exitScope();
  if (cur) { this.finishNode(cur, "SwitchCase"); }
  this.next(); // Closing brace
  this.labels.pop();
  return this.finishNode(node, "SwitchStatement")
};

pp$1.parseThrowStatement = function(node) {
  this.next();
  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))
    { this.raise(this.lastTokEnd, "Illegal newline after throw"); }
  node.argument = this.parseExpression();
  this.semicolon();
  return this.finishNode(node, "ThrowStatement")
};

// Reused empty array added for node fields that are always empty.

var empty = [];

pp$1.parseTryStatement = function(node) {
  this.next();
  node.block = this.parseBlock();
  node.handler = null;
  if (this.type === types._catch) {
    var clause = this.startNode();
    this.next();
    if (this.eat(types.parenL)) {
      clause.param = this.parseBindingAtom();
      var simple = clause.param.type === "Identifier";
      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
      this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
      this.expect(types.parenR);
    } else {
      if (this.options.ecmaVersion < 10) { this.unexpected(); }
      clause.param = null;
      this.enterScope(0);
    }
    clause.body = this.parseBlock(false);
    this.exitScope();
    node.handler = this.finishNode(clause, "CatchClause");
  }
  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;
  if (!node.handler && !node.finalizer)
    { this.raise(node.start, "Missing catch or finally clause"); }
  return this.finishNode(node, "TryStatement")
};

pp$1.parseVarStatement = function(node, kind) {
  this.next();
  this.parseVar(node, false, kind);
  this.semicolon();
  return this.finishNode(node, "VariableDeclaration")
};

pp$1.parseWhileStatement = function(node) {
  this.next();
  node.test = this.parseParenExpression();
  this.labels.push(loopLabel);
  node.body = this.parseStatement("while");
  this.labels.pop();
  return this.finishNode(node, "WhileStatement")
};

pp$1.parseWithStatement = function(node) {
  if (this.strict) { this.raise(this.start, "'with' in strict mode"); }
  this.next();
  node.object = this.parseParenExpression();
  node.body = this.parseStatement("with");
  return this.finishNode(node, "WithStatement")
};

pp$1.parseEmptyStatement = function(node) {
  this.next();
  return this.finishNode(node, "EmptyStatement")
};

pp$1.parseLabeledStatement = function(node, maybeName, expr, context) {
  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)
    {
    var label = list[i$1];

    if (label.name === maybeName)
      { this.raise(expr.start, "Label '" + maybeName + "' is already declared");
  } }
  var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;
  for (var i = this.labels.length - 1; i >= 0; i--) {
    var label$1 = this.labels[i];
    if (label$1.statementStart === node.start) {
      // Update information about previous labels on this node
      label$1.statementStart = this.start;
      label$1.kind = kind;
    } else { break }
  }
  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});
  node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
  this.labels.pop();
  node.label = expr;
  return this.finishNode(node, "LabeledStatement")
};

pp$1.parseExpressionStatement = function(node, expr) {
  node.expression = expr;
  this.semicolon();
  return this.finishNode(node, "ExpressionStatement")
};

// Parse a semicolon-enclosed block of statements, handling `"use
// strict"` declarations when `allowStrict` is true (used for
// function bodies).

pp$1.parseBlock = function(createNewLexicalScope, node, exitStrict) {
  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;
  if ( node === void 0 ) node = this.startNode();

  node.body = [];
  this.expect(types.braceL);
  if (createNewLexicalScope) { this.enterScope(0); }
  while (this.type !== types.braceR) {
    var stmt = this.parseStatement(null);
    node.body.push(stmt);
  }
  if (exitStrict) { this.strict = false; }
  this.next();
  if (createNewLexicalScope) { this.exitScope(); }
  return this.finishNode(node, "BlockStatement")
};

// Parse a regular `for` loop. The disambiguation code in
// `parseStatement` will already have parsed the init statement or
// expression.

pp$1.parseFor = function(node, init) {
  node.init = init;
  this.expect(types.semi);
  node.test = this.type === types.semi ? null : this.parseExpression();
  this.expect(types.semi);
  node.update = this.type === types.parenR ? null : this.parseExpression();
  this.expect(types.parenR);
  node.body = this.parseStatement("for");
  this.exitScope();
  this.labels.pop();
  return this.finishNode(node, "ForStatement")
};

// Parse a `for`/`in` and `for`/`of` loop, which are almost
// same from parser's perspective.

pp$1.parseForIn = function(node, init) {
  var isForIn = this.type === types._in;
  this.next();

  if (
    init.type === "VariableDeclaration" &&
    init.declarations[0].init != null &&
    (
      !isForIn ||
      this.options.ecmaVersion < 8 ||
      this.strict ||
      init.kind !== "var" ||
      init.declarations[0].id.type !== "Identifier"
    )
  ) {
    this.raise(
      init.start,
      ((isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer")
    );
  }
  node.left = init;
  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
  this.expect(types.parenR);
  node.body = this.parseStatement("for");
  this.exitScope();
  this.labels.pop();
  return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement")
};

// Parse a list of variable declarations.

pp$1.parseVar = function(node, isFor, kind) {
  node.declarations = [];
  node.kind = kind;
  for (;;) {
    var decl = this.startNode();
    this.parseVarId(decl, kind);
    if (this.eat(types.eq)) {
      decl.init = this.parseMaybeAssign(isFor);
    } else if (kind === "const" && !(this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual("of")))) {
      this.unexpected();
    } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types._in || this.isContextual("of")))) {
      this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
    } else {
      decl.init = null;
    }
    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
    if (!this.eat(types.comma)) { break }
  }
  return node
};

pp$1.parseVarId = function(decl, kind) {
  decl.id = this.parseBindingAtom();
  this.checkLValPattern(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
};

var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;

// Parse a function declaration or literal (depending on the
// `statement & FUNC_STATEMENT`).

// Remove `allowExpressionBody` for 7.0.0, as it is only called with false
pp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
  this.initFunction(node);
  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
    if (this.type === types.star && (statement & FUNC_HANGING_STATEMENT))
      { this.unexpected(); }
    node.generator = this.eat(types.star);
  }
  if (this.options.ecmaVersion >= 8)
    { node.async = !!isAsync; }

  if (statement & FUNC_STATEMENT) {
    node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types.name ? null : this.parseIdent();
    if (node.id && !(statement & FUNC_HANGING_STATEMENT))
      // If it is a regular function declaration in sloppy mode, then it is
      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding
      // mode depends on properties of the current scope (see
      // treatFunctionsAsVar).
      { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }
  }

  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;
  this.enterScope(functionFlags(node.async, node.generator));

  if (!(statement & FUNC_STATEMENT))
    { node.id = this.type === types.name ? this.parseIdent() : null; }

  this.parseFunctionParams(node);
  this.parseFunctionBody(node, allowExpressionBody, false, forInit);

  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node, (statement & FUNC_STATEMENT) ? "FunctionDeclaration" : "FunctionExpression")
};

pp$1.parseFunctionParams = function(node) {
  this.expect(types.parenL);
  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
  this.checkYieldAwaitInDefaultParams();
};

// Parse a class declaration or literal (depending on the
// `isStatement` parameter).

pp$1.parseClass = function(node, isStatement) {
  this.next();

  // ecma-262 14.6 Class Definitions
  // A class definition is always strict mode code.
  var oldStrict = this.strict;
  this.strict = true;

  this.parseClassId(node, isStatement);
  this.parseClassSuper(node);
  var privateNameMap = this.enterClassBody();
  var classBody = this.startNode();
  var hadConstructor = false;
  classBody.body = [];
  this.expect(types.braceL);
  while (this.type !== types.braceR) {
    var element = this.parseClassElement(node.superClass !== null);
    if (element) {
      classBody.body.push(element);
      if (element.type === "MethodDefinition" && element.kind === "constructor") {
        if (hadConstructor) { this.raise(element.start, "Duplicate constructor in the same class"); }
        hadConstructor = true;
      } else if (element.key && element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element)) {
        this.raiseRecoverable(element.key.start, ("Identifier '#" + (element.key.name) + "' has already been declared"));
      }
    }
  }
  this.strict = oldStrict;
  this.next();
  node.body = this.finishNode(classBody, "ClassBody");
  this.exitClassBody();
  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression")
};

pp$1.parseClassElement = function(constructorAllowsSuper) {
  if (this.eat(types.semi)) { return null }

  var ecmaVersion = this.options.ecmaVersion;
  var node = this.startNode();
  var keyName = "";
  var isGenerator = false;
  var isAsync = false;
  var kind = "method";
  var isStatic = false;

  if (this.eatContextual("static")) {
    // Parse static init block
    if (ecmaVersion >= 13 && this.eat(types.braceL)) {
      this.parseClassStaticBlock(node);
      return node
    }
    if (this.isClassElementNameStart() || this.type === types.star) {
      isStatic = true;
    } else {
      keyName = "static";
    }
  }
  node.static = isStatic;
  if (!keyName && ecmaVersion >= 8 && this.eatContextual("async")) {
    if ((this.isClassElementNameStart() || this.type === types.star) && !this.canInsertSemicolon()) {
      isAsync = true;
    } else {
      keyName = "async";
    }
  }
  if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types.star)) {
    isGenerator = true;
  }
  if (!keyName && !isAsync && !isGenerator) {
    var lastValue = this.value;
    if (this.eatContextual("get") || this.eatContextual("set")) {
      if (this.isClassElementNameStart()) {
        kind = lastValue;
      } else {
        keyName = lastValue;
      }
    }
  }

  // Parse element name
  if (keyName) {
    // 'async', 'get', 'set', or 'static' were not a keyword contextually.
    // The last token is any of those. Make it the element name.
    node.computed = false;
    node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
    node.key.name = keyName;
    this.finishNode(node.key, "Identifier");
  } else {
    this.parseClassElementName(node);
  }

  // Parse element value
  if (ecmaVersion < 13 || this.type === types.parenL || kind !== "method" || isGenerator || isAsync) {
    var isConstructor = !node.static && checkKeyName(node, "constructor");
    var allowsDirectSuper = isConstructor && constructorAllowsSuper;
    // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.
    if (isConstructor && kind !== "method") { this.raise(node.key.start, "Constructor can't have get/set modifier"); }
    node.kind = isConstructor ? "constructor" : kind;
    this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
  } else {
    this.parseClassField(node);
  }

  return node
};

pp$1.isClassElementNameStart = function() {
  return (
    this.type === types.name ||
    this.type === types.privateId ||
    this.type === types.num ||
    this.type === types.string ||
    this.type === types.bracketL ||
    this.type.keyword
  )
};

pp$1.parseClassElementName = function(element) {
  if (this.type === types.privateId) {
    if (this.value === "constructor") {
      this.raise(this.start, "Classes can't have an element named '#constructor'");
    }
    element.computed = false;
    element.key = this.parsePrivateIdent();
  } else {
    this.parsePropertyName(element);
  }
};

pp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
  // Check key and flags
  var key = method.key;
  if (method.kind === "constructor") {
    if (isGenerator) { this.raise(key.start, "Constructor can't be a generator"); }
    if (isAsync) { this.raise(key.start, "Constructor can't be an async method"); }
  } else if (method.static && checkKeyName(method, "prototype")) {
    this.raise(key.start, "Classes may not have a static property named prototype");
  }

  // Parse value
  var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);

  // Check value
  if (method.kind === "get" && value.params.length !== 0)
    { this.raiseRecoverable(value.start, "getter should have no params"); }
  if (method.kind === "set" && value.params.length !== 1)
    { this.raiseRecoverable(value.start, "setter should have exactly one param"); }
  if (method.kind === "set" && value.params[0].type === "RestElement")
    { this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params"); }

  return this.finishNode(method, "MethodDefinition")
};

pp$1.parseClassField = function(field) {
  if (checkKeyName(field, "constructor")) {
    this.raise(field.key.start, "Classes can't have a field named 'constructor'");
  } else if (field.static && checkKeyName(field, "prototype")) {
    this.raise(field.key.start, "Classes can't have a static field named 'prototype'");
  }

  if (this.eat(types.eq)) {
    // To raise SyntaxError if 'arguments' exists in the initializer.
    var scope = this.currentThisScope();
    var inClassFieldInit = scope.inClassFieldInit;
    scope.inClassFieldInit = true;
    field.value = this.parseMaybeAssign();
    scope.inClassFieldInit = inClassFieldInit;
  } else {
    field.value = null;
  }
  this.semicolon();

  return this.finishNode(field, "PropertyDefinition")
};

pp$1.parseClassStaticBlock = function(node) {
  node.body = [];

  var oldLabels = this.labels;
  this.labels = [];
  this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);
  while (this.type !== types.braceR) {
    var stmt = this.parseStatement(null);
    node.body.push(stmt);
  }
  this.next();
  this.exitScope();
  this.labels = oldLabels;

  return this.finishNode(node, "StaticBlock")
};

pp$1.parseClassId = function(node, isStatement) {
  if (this.type === types.name) {
    node.id = this.parseIdent();
    if (isStatement)
      { this.checkLValSimple(node.id, BIND_LEXICAL, false); }
  } else {
    if (isStatement === true)
      { this.unexpected(); }
    node.id = null;
  }
};

pp$1.parseClassSuper = function(node) {
  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts(false) : null;
};

pp$1.enterClassBody = function() {
  var element = {declared: Object.create(null), used: []};
  this.privateNameStack.push(element);
  return element.declared
};

pp$1.exitClassBody = function() {
  var ref = this.privateNameStack.pop();
  var declared = ref.declared;
  var used = ref.used;
  var len = this.privateNameStack.length;
  var parent = len === 0 ? null : this.privateNameStack[len - 1];
  for (var i = 0; i < used.length; ++i) {
    var id = used[i];
    if (!has(declared, id.name)) {
      if (parent) {
        parent.used.push(id);
      } else {
        this.raiseRecoverable(id.start, ("Private field '#" + (id.name) + "' must be declared in an enclosing class"));
      }
    }
  }
};

function isPrivateNameConflicted(privateNameMap, element) {
  var name = element.key.name;
  var curr = privateNameMap[name];

  var next = "true";
  if (element.type === "MethodDefinition" && (element.kind === "get" || element.kind === "set")) {
    next = (element.static ? "s" : "i") + element.kind;
  }

  // `class { get #a(){}; static set #a(_){} }` is also conflict.
  if (
    curr === "iget" && next === "iset" ||
    curr === "iset" && next === "iget" ||
    curr === "sget" && next === "sset" ||
    curr === "sset" && next === "sget"
  ) {
    privateNameMap[name] = "true";
    return false
  } else if (!curr) {
    privateNameMap[name] = next;
    return false
  } else {
    return true
  }
}

function checkKeyName(node, name) {
  var computed = node.computed;
  var key = node.key;
  return !computed && (
    key.type === "Identifier" && key.name === name ||
    key.type === "Literal" && key.value === name
  )
}

// Parses module export declaration.

pp$1.parseExport = function(node, exports) {
  this.next();
  // export * from '...'
  if (this.eat(types.star)) {
    if (this.options.ecmaVersion >= 11) {
      if (this.eatContextual("as")) {
        node.exported = this.parseIdent(true);
        this.checkExport(exports, node.exported.name, this.lastTokStart);
      } else {
        node.exported = null;
      }
    }
    this.expectContextual("from");
    if (this.type !== types.string) { this.unexpected(); }
    node.source = this.parseExprAtom();
    this.semicolon();
    return this.finishNode(node, "ExportAllDeclaration")
  }
  if (this.eat(types._default)) { // export default ...
    this.checkExport(exports, "default", this.lastTokStart);
    var isAsync;
    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
      var fNode = this.startNode();
      this.next();
      if (isAsync) { this.next(); }
      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
    } else if (this.type === types._class) {
      var cNode = this.startNode();
      node.declaration = this.parseClass(cNode, "nullableID");
    } else {
      node.declaration = this.parseMaybeAssign();
      this.semicolon();
    }
    return this.finishNode(node, "ExportDefaultDeclaration")
  }
  // export var|const|let|function|class ...
  if (this.shouldParseExportStatement()) {
    node.declaration = this.parseStatement(null);
    if (node.declaration.type === "VariableDeclaration")
      { this.checkVariableExport(exports, node.declaration.declarations); }
    else
      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }
    node.specifiers = [];
    node.source = null;
  } else { // export { x, y as z } [from '...']
    node.declaration = null;
    node.specifiers = this.parseExportSpecifiers(exports);
    if (this.eatContextual("from")) {
      if (this.type !== types.string) { this.unexpected(); }
      node.source = this.parseExprAtom();
    } else {
      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
        // check for keywords used as local names
        var spec = list[i];

        this.checkUnreserved(spec.local);
        // check if export is defined
        this.checkLocalExport(spec.local);
      }

      node.source = null;
    }
    this.semicolon();
  }
  return this.finishNode(node, "ExportNamedDeclaration")
};

pp$1.checkExport = function(exports, name, pos) {
  if (!exports) { return }
  if (has(exports, name))
    { this.raiseRecoverable(pos, "Duplicate export '" + name + "'"); }
  exports[name] = true;
};

pp$1.checkPatternExport = function(exports, pat) {
  var type = pat.type;
  if (type === "Identifier")
    { this.checkExport(exports, pat.name, pat.start); }
  else if (type === "ObjectPattern")
    { for (var i = 0, list = pat.properties; i < list.length; i += 1)
      {
        var prop = list[i];

        this.checkPatternExport(exports, prop);
      } }
  else if (type === "ArrayPattern")
    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
      var elt = list$1[i$1];

        if (elt) { this.checkPatternExport(exports, elt); }
    } }
  else if (type === "Property")
    { this.checkPatternExport(exports, pat.value); }
  else if (type === "AssignmentPattern")
    { this.checkPatternExport(exports, pat.left); }
  else if (type === "RestElement")
    { this.checkPatternExport(exports, pat.argument); }
  else if (type === "ParenthesizedExpression")
    { this.checkPatternExport(exports, pat.expression); }
};

pp$1.checkVariableExport = function(exports, decls) {
  if (!exports) { return }
  for (var i = 0, list = decls; i < list.length; i += 1)
    {
    var decl = list[i];

    this.checkPatternExport(exports, decl.id);
  }
};

pp$1.shouldParseExportStatement = function() {
  return this.type.keyword === "var" ||
    this.type.keyword === "const" ||
    this.type.keyword === "class" ||
    this.type.keyword === "function" ||
    this.isLet() ||
    this.isAsyncFunction()
};

// Parses a comma-separated list of module exports.

pp$1.parseExportSpecifiers = function(exports) {
  var nodes = [], first = true;
  // export { x, y as z } [from '...']
  this.expect(types.braceL);
  while (!this.eat(types.braceR)) {
    if (!first) {
      this.expect(types.comma);
      if (this.afterTrailingComma(types.braceR)) { break }
    } else { first = false; }

    var node = this.startNode();
    node.local = this.parseIdent(true);
    node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
    this.checkExport(exports, node.exported.name, node.exported.start);
    nodes.push(this.finishNode(node, "ExportSpecifier"));
  }
  return nodes
};

// Parses import declaration.

pp$1.parseImport = function(node) {
  this.next();
  // import '...'
  if (this.type === types.string) {
    node.specifiers = empty;
    node.source = this.parseExprAtom();
  } else {
    node.specifiers = this.parseImportSpecifiers();
    this.expectContextual("from");
    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
  }
  this.semicolon();
  return this.finishNode(node, "ImportDeclaration")
};

// Parses a comma-separated list of module imports.

pp$1.parseImportSpecifiers = function() {
  var nodes = [], first = true;
  if (this.type === types.name) {
    // import defaultObj, { x, y as z } from '...'
    var node = this.startNode();
    node.local = this.parseIdent();
    this.checkLValSimple(node.local, BIND_LEXICAL);
    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
    if (!this.eat(types.comma)) { return nodes }
  }
  if (this.type === types.star) {
    var node$1 = this.startNode();
    this.next();
    this.expectContextual("as");
    node$1.local = this.parseIdent();
    this.checkLValSimple(node$1.local, BIND_LEXICAL);
    nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
    return nodes
  }
  this.expect(types.braceL);
  while (!this.eat(types.braceR)) {
    if (!first) {
      this.expect(types.comma);
      if (this.afterTrailingComma(types.braceR)) { break }
    } else { first = false; }

    var node$2 = this.startNode();
    node$2.imported = this.parseIdent(true);
    if (this.eatContextual("as")) {
      node$2.local = this.parseIdent();
    } else {
      this.checkUnreserved(node$2.imported);
      node$2.local = node$2.imported;
    }
    this.checkLValSimple(node$2.local, BIND_LEXICAL);
    nodes.push(this.finishNode(node$2, "ImportSpecifier"));
  }
  return nodes
};

// Set `ExpressionStatement#directive` property for directive prologues.
pp$1.adaptDirectivePrologue = function(statements) {
  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
    statements[i].directive = statements[i].expression.raw.slice(1, -1);
  }
};
pp$1.isDirectiveCandidate = function(statement) {
  return (
    statement.type === "ExpressionStatement" &&
    statement.expression.type === "Literal" &&
    typeof statement.expression.value === "string" &&
    // Reject parenthesized strings.
    (this.input[statement.start] === "\"" || this.input[statement.start] === "'")
  )
};

var pp$2 = Parser.prototype;

// Convert existing expression atom to assignable pattern
// if possible.

pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {
  if (this.options.ecmaVersion >= 6 && node) {
    switch (node.type) {
    case "Identifier":
      if (this.inAsync && node.name === "await")
        { this.raise(node.start, "Cannot use 'await' as identifier inside an async function"); }
      break

    case "ObjectPattern":
    case "ArrayPattern":
    case "AssignmentPattern":
    case "RestElement":
      break

    case "ObjectExpression":
      node.type = "ObjectPattern";
      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
      for (var i = 0, list = node.properties; i < list.length; i += 1) {
        var prop = list[i];

      this.toAssignable(prop, isBinding);
        // Early error:
        //   AssignmentRestProperty[Yield, Await] :
        //     `...` DestructuringAssignmentTarget[Yield, Await]
        //
        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.
        if (
          prop.type === "RestElement" &&
          (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")
        ) {
          this.raise(prop.argument.start, "Unexpected token");
        }
      }
      break

    case "Property":
      // AssignmentProperty has type === "Property"
      if (node.kind !== "init") { this.raise(node.key.start, "Object pattern can't contain getter or setter"); }
      this.toAssignable(node.value, isBinding);
      break

    case "ArrayExpression":
      node.type = "ArrayPattern";
      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
      this.toAssignableList(node.elements, isBinding);
      break

    case "SpreadElement":
      node.type = "RestElement";
      this.toAssignable(node.argument, isBinding);
      if (node.argument.type === "AssignmentPattern")
        { this.raise(node.argument.start, "Rest elements cannot have a default value"); }
      break

    case "AssignmentExpression":
      if (node.operator !== "=") { this.raise(node.left.end, "Only '=' operator can be used for specifying default value."); }
      node.type = "AssignmentPattern";
      delete node.operator;
      this.toAssignable(node.left, isBinding);
      break

    case "ParenthesizedExpression":
      this.toAssignable(node.expression, isBinding, refDestructuringErrors);
      break

    case "ChainExpression":
      this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
      break

    case "MemberExpression":
      if (!isBinding) { break }

    default:
      this.raise(node.start, "Assigning to rvalue");
    }
  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
  return node
};

// Convert list of expression atoms to binding list.

pp$2.toAssignableList = function(exprList, isBinding) {
  var end = exprList.length;
  for (var i = 0; i < end; i++) {
    var elt = exprList[i];
    if (elt) { this.toAssignable(elt, isBinding); }
  }
  if (end) {
    var last = exprList[end - 1];
    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier")
      { this.unexpected(last.argument.start); }
  }
  return exprList
};

// Parses spread element.

pp$2.parseSpread = function(refDestructuringErrors) {
  var node = this.startNode();
  this.next();
  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
  return this.finishNode(node, "SpreadElement")
};

pp$2.parseRestBinding = function() {
  var node = this.startNode();
  this.next();

  // RestElement inside of a function parameter must be an identifier
  if (this.options.ecmaVersion === 6 && this.type !== types.name)
    { this.unexpected(); }

  node.argument = this.parseBindingAtom();

  return this.finishNode(node, "RestElement")
};

// Parses lvalue (assignable) atom.

pp$2.parseBindingAtom = function() {
  if (this.options.ecmaVersion >= 6) {
    switch (this.type) {
    case types.bracketL:
      var node = this.startNode();
      this.next();
      node.elements = this.parseBindingList(types.bracketR, true, true);
      return this.finishNode(node, "ArrayPattern")

    case types.braceL:
      return this.parseObj(true)
    }
  }
  return this.parseIdent()
};

pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
  var elts = [], first = true;
  while (!this.eat(close)) {
    if (first) { first = false; }
    else { this.expect(types.comma); }
    if (allowEmpty && this.type === types.comma) {
      elts.push(null);
    } else if (allowTrailingComma && this.afterTrailingComma(close)) {
      break
    } else if (this.type === types.ellipsis) {
      var rest = this.parseRestBinding();
      this.parseBindingListItem(rest);
      elts.push(rest);
      if (this.type === types.comma) { this.raise(this.start, "Comma is not permitted after the rest element"); }
      this.expect(close);
      break
    } else {
      var elem = this.parseMaybeDefault(this.start, this.startLoc);
      this.parseBindingListItem(elem);
      elts.push(elem);
    }
  }
  return elts
};

pp$2.parseBindingListItem = function(param) {
  return param
};

// Parses assignment pattern around given atom if possible.

pp$2.parseMaybeDefault = function(startPos, startLoc, left) {
  left = left || this.parseBindingAtom();
  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }
  var node = this.startNodeAt(startPos, startLoc);
  node.left = left;
  node.right = this.parseMaybeAssign();
  return this.finishNode(node, "AssignmentPattern")
};

// The following three functions all verify that a node is an lvalue —
// something that can be bound, or assigned to. In order to do so, they perform
// a variety of checks:
//
// - Check that none of the bound/assigned-to identifiers are reserved words.
// - Record name declarations for bindings in the appropriate scope.
// - Check duplicate argument names, if checkClashes is set.
//
// If a complex binding pattern is encountered (e.g., object and array
// destructuring), the entire pattern is recursively checked.
//
// There are three versions of checkLVal*() appropriate for different
// circumstances:
//
// - checkLValSimple() shall be used if the syntactic construct supports
//   nothing other than identifiers and member expressions. Parenthesized
//   expressions are also correctly handled. This is generally appropriate for
//   constructs for which the spec says
//
//   > It is a Syntax Error if AssignmentTargetType of [the production] is not
//   > simple.
//
//   It is also appropriate for checking if an identifier is valid and not
//   defined elsewhere, like import declarations or function/class identifiers.
//
//   Examples where this is used include:
//     a += …;
//     import a from '…';
//   where a is the node to be checked.
//
// - checkLValPattern() shall be used if the syntactic construct supports
//   anything checkLValSimple() supports, as well as object and array
//   destructuring patterns. This is generally appropriate for constructs for
//   which the spec says
//
//   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor
//   > an ArrayLiteral and AssignmentTargetType of [the production] is not
//   > simple.
//
//   Examples where this is used include:
//     (a = …);
//     const a = …;
//     try { … } catch (a) { … }
//   where a is the node to be checked.
//
// - checkLValInnerPattern() shall be used if the syntactic construct supports
//   anything checkLValPattern() supports, as well as default assignment
//   patterns, rest elements, and other constructs that may appear within an
//   object or array destructuring pattern.
//
//   As a special case, function parameters also use checkLValInnerPattern(),
//   as they also support defaults and rest constructs.
//
// These functions deliberately support both assignment and binding constructs,
// as the logic for both is exceedingly similar. If the node is the target of
// an assignment, then bindingType should be set to BIND_NONE. Otherwise, it
// should be set to the appropriate BIND_* constant, like BIND_VAR or
// BIND_LEXICAL.
//
// If the function is called with a non-BIND_NONE bindingType, then
// additionally a checkClashes object may be specified to allow checking for
// duplicate argument names. checkClashes is ignored if the provided construct
// is an assignment (i.e., bindingType is BIND_NONE).

pp$2.checkLValSimple = function(expr, bindingType, checkClashes) {
  if ( bindingType === void 0 ) bindingType = BIND_NONE;

  var isBind = bindingType !== BIND_NONE;

  switch (expr.type) {
  case "Identifier":
    if (this.strict && this.reservedWordsStrictBind.test(expr.name))
      { this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"); }
    if (isBind) {
      if (bindingType === BIND_LEXICAL && expr.name === "let")
        { this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"); }
      if (checkClashes) {
        if (has(checkClashes, expr.name))
          { this.raiseRecoverable(expr.start, "Argument name clash"); }
        checkClashes[expr.name] = true;
      }
      if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }
    }
    break

  case "ChainExpression":
    this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
    break

  case "MemberExpression":
    if (isBind) { this.raiseRecoverable(expr.start, "Binding member expression"); }
    break

  case "ParenthesizedExpression":
    if (isBind) { this.raiseRecoverable(expr.start, "Binding parenthesized expression"); }
    return this.checkLValSimple(expr.expression, bindingType, checkClashes)

  default:
    this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
  }
};

pp$2.checkLValPattern = function(expr, bindingType, checkClashes) {
  if ( bindingType === void 0 ) bindingType = BIND_NONE;

  switch (expr.type) {
  case "ObjectPattern":
    for (var i = 0, list = expr.properties; i < list.length; i += 1) {
      var prop = list[i];

    this.checkLValInnerPattern(prop, bindingType, checkClashes);
    }
    break

  case "ArrayPattern":
    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
      var elem = list$1[i$1];

    if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }
    }
    break

  default:
    this.checkLValSimple(expr, bindingType, checkClashes);
  }
};

pp$2.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
  if ( bindingType === void 0 ) bindingType = BIND_NONE;

  switch (expr.type) {
  case "Property":
    // AssignmentProperty has type === "Property"
    this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
    break

  case "AssignmentPattern":
    this.checkLValPattern(expr.left, bindingType, checkClashes);
    break

  case "RestElement":
    this.checkLValPattern(expr.argument, bindingType, checkClashes);
    break

  default:
    this.checkLValPattern(expr, bindingType, checkClashes);
  }
};

// The algorithm used to determine whether a regexp can appear at a

var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
  this.token = token;
  this.isExpr = !!isExpr;
  this.preserveSpace = !!preserveSpace;
  this.override = override;
  this.generator = !!generator;
};

var types$1 = {
  b_stat: new TokContext("{", false),
  b_expr: new TokContext("{", true),
  b_tmpl: new TokContext("${", false),
  p_stat: new TokContext("(", false),
  p_expr: new TokContext("(", true),
  q_tmpl: new TokContext("`", true, true, function (p) { return p.tryReadTemplateToken(); }),
  f_stat: new TokContext("function", false),
  f_expr: new TokContext("function", true),
  f_expr_gen: new TokContext("function", true, false, null, true),
  f_gen: new TokContext("function", false, false, null, true)
};

var pp$3 = Parser.prototype;

pp$3.initialContext = function() {
  return [types$1.b_stat]
};

pp$3.curContext = function() {
  return this.context[this.context.length - 1]
};

pp$3.braceIsBlock = function(prevType) {
  var parent = this.curContext();
  if (parent === types$1.f_expr || parent === types$1.f_stat)
    { return true }
  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))
    { return !parent.isExpr }

  // The check for `tt.name && exprAllowed` detects whether we are
  // after a `yield` or `of` construct. See the `updateContext` for
  // `tt.name`.
  if (prevType === types._return || prevType === types.name && this.exprAllowed)
    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }
  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)
    { return true }
  if (prevType === types.braceL)
    { return parent === types$1.b_stat }
  if (prevType === types._var || prevType === types._const || prevType === types.name)
    { return false }
  return !this.exprAllowed
};

pp$3.inGeneratorContext = function() {
  for (var i = this.context.length - 1; i >= 1; i--) {
    var context = this.context[i];
    if (context.token === "function")
      { return context.generator }
  }
  return false
};

pp$3.updateContext = function(prevType) {
  var update, type = this.type;
  if (type.keyword && prevType === types.dot)
    { this.exprAllowed = false; }
  else if (update = type.updateContext)
    { update.call(this, prevType); }
  else
    { this.exprAllowed = type.beforeExpr; }
};

// Used to handle egde case when token context could not be inferred correctly in tokenize phase
pp$3.overrideContext = function(tokenCtx) {
  if (this.curContext() !== tokenCtx) {
    this.context[this.context.length - 1] = tokenCtx;
  }
};

// Token-specific context update code

types.parenR.updateContext = types.braceR.updateContext = function() {
  if (this.context.length === 1) {
    this.exprAllowed = true;
    return
  }
  var out = this.context.pop();
  if (out === types$1.b_stat && this.curContext().token === "function") {
    out = this.context.pop();
  }
  this.exprAllowed = !out.isExpr;
};

types.braceL.updateContext = function(prevType) {
  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
  this.exprAllowed = true;
};

types.dollarBraceL.updateContext = function() {
  this.context.push(types$1.b_tmpl);
  this.exprAllowed = true;
};

types.parenL.updateContext = function(prevType) {
  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
  this.exprAllowed = true;
};

types.incDec.updateContext = function() {
  // tokExprAllowed stays unchanged
};

types._function.updateContext = types._class.updateContext = function(prevType) {
  if (prevType.beforeExpr && prevType !== types._else &&
      !(prevType === types.semi && this.curContext() !== types$1.p_stat) &&
      !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&
      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))
    { this.context.push(types$1.f_expr); }
  else
    { this.context.push(types$1.f_stat); }
  this.exprAllowed = false;
};

types.backQuote.updateContext = function() {
  if (this.curContext() === types$1.q_tmpl)
    { this.context.pop(); }
  else
    { this.context.push(types$1.q_tmpl); }
  this.exprAllowed = false;
};

types.star.updateContext = function(prevType) {
  if (prevType === types._function) {
    var index = this.context.length - 1;
    if (this.context[index] === types$1.f_expr)
      { this.context[index] = types$1.f_expr_gen; }
    else
      { this.context[index] = types$1.f_gen; }
  }
  this.exprAllowed = true;
};

types.name.updateContext = function(prevType) {
  var allowed = false;
  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {
    if (this.value === "of" && !this.exprAllowed ||
        this.value === "yield" && this.inGeneratorContext())
      { allowed = true; }
  }
  this.exprAllowed = allowed;
};

// A recursive descent parser operates by defining functions for all

var pp$4 = Parser.prototype;

// Check if property name clashes with already added.
// Object/class getters and setters are not allowed to clash —
// either with each other or with an init property — and in
// strict mode, init properties are also not allowed to be repeated.

pp$4.checkPropClash = function(prop, propHash, refDestructuringErrors) {
  if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement")
    { return }
  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))
    { return }
  var key = prop.key;
  var name;
  switch (key.type) {
  case "Identifier": name = key.name; break
  case "Literal": name = String(key.value); break
  default: return
  }
  var kind = prop.kind;
  if (this.options.ecmaVersion >= 6) {
    if (name === "__proto__" && kind === "init") {
      if (propHash.proto) {
        if (refDestructuringErrors) {
          if (refDestructuringErrors.doubleProto < 0)
            { refDestructuringErrors.doubleProto = key.start; }
          // Backwards-compat kludge. Can be removed in version 6.0
        } else { this.raiseRecoverable(key.start, "Redefinition of __proto__ property"); }
      }
      propHash.proto = true;
    }
    return
  }
  name = "$" + name;
  var other = propHash[name];
  if (other) {
    var redefinition;
    if (kind === "init") {
      redefinition = this.strict && other.init || other.get || other.set;
    } else {
      redefinition = other.init || other[kind];
    }
    if (redefinition)
      { this.raiseRecoverable(key.start, "Redefinition of property"); }
  } else {
    other = propHash[name] = {
      init: false,
      get: false,
      set: false
    };
  }
  other[kind] = true;
};

// ### Expression parsing

// These nest, from the most general expression type at the top to
// 'atomic', nondivisible expression types at the bottom. Most of
// the functions will simply let the function(s) below them parse,
// and, *if* the syntactic construct they handle is present, wrap
// the AST node that the inner parser gave them in another node.

// Parse a full expression. The optional arguments are used to
// forbid the `in` operator (in for loops initalization expressions)
// and provide reference for storing '=' operator inside shorthand
// property assignment in contexts where both object expression
// and object pattern might appear (so it's possible to raise
// delayed syntax error at correct position).

pp$4.parseExpression = function(forInit, refDestructuringErrors) {
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
  if (this.type === types.comma) {
    var node = this.startNodeAt(startPos, startLoc);
    node.expressions = [expr];
    while (this.eat(types.comma)) { node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors)); }
    return this.finishNode(node, "SequenceExpression")
  }
  return expr
};

// Parse an assignment expression. This includes applications of
// operators like `+=`.

pp$4.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
  if (this.isContextual("yield")) {
    if (this.inGenerator) { return this.parseYield(forInit) }
    // The tokenizer will assume an expression is allowed after
    // `yield`, but this isn't that kind of yield
    else { this.exprAllowed = false; }
  }

  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;
  if (refDestructuringErrors) {
    oldParenAssign = refDestructuringErrors.parenthesizedAssign;
    oldTrailingComma = refDestructuringErrors.trailingComma;
    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
  } else {
    refDestructuringErrors = new DestructuringErrors;
    ownDestructuringErrors = true;
  }

  var startPos = this.start, startLoc = this.startLoc;
  if (this.type === types.parenL || this.type === types.name) {
    this.potentialArrowAt = this.start;
    this.potentialArrowInForAwait = forInit === "await";
  }
  var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }
  if (this.type.isAssign) {
    var node = this.startNodeAt(startPos, startLoc);
    node.operator = this.value;
    if (this.type === types.eq)
      { left = this.toAssignable(left, false, refDestructuringErrors); }
    if (!ownDestructuringErrors) {
      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
    }
    if (refDestructuringErrors.shorthandAssign >= left.start)
      { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly
    if (this.type === types.eq)
      { this.checkLValPattern(left); }
    else
      { this.checkLValSimple(left); }
    node.left = left;
    this.next();
    node.right = this.parseMaybeAssign(forInit);
    return this.finishNode(node, "AssignmentExpression")
  } else {
    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }
  }
  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }
  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }
  return left
};

// Parse a ternary conditional (`?:`) operator.

pp$4.parseMaybeConditional = function(forInit, refDestructuringErrors) {
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseExprOps(forInit, refDestructuringErrors);
  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
  if (this.eat(types.question)) {
    var node = this.startNodeAt(startPos, startLoc);
    node.test = expr;
    node.consequent = this.parseMaybeAssign();
    this.expect(types.colon);
    node.alternate = this.parseMaybeAssign(forInit);
    return this.finishNode(node, "ConditionalExpression")
  }
  return expr
};

// Start the precedence parser.

pp$4.parseExprOps = function(forInit, refDestructuringErrors) {
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
  return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit)
};

// Parse binary operators with the operator precedence parsing
// algorithm. `left` is the left-hand side of the operator.
// `minPrec` provides context that allows the function to stop and
// defer further parser to one of its callers when it encounters an
// operator that has a lower precedence than the set it is parsing.

pp$4.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
  var prec = this.type.binop;
  if (prec != null && (!forInit || this.type !== types._in)) {
    if (prec > minPrec) {
      var logical = this.type === types.logicalOR || this.type === types.logicalAND;
      var coalesce = this.type === types.coalesce;
      if (coalesce) {
        // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.
        // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.
        prec = types.logicalAND.binop;
      }
      var op = this.value;
      this.next();
      var startPos = this.start, startLoc = this.startLoc;
      var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);
      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
      if ((logical && this.type === types.coalesce) || (coalesce && (this.type === types.logicalOR || this.type === types.logicalAND))) {
        this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
      }
      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)
    }
  }
  return left
};

pp$4.buildBinary = function(startPos, startLoc, left, right, op, logical) {
  var node = this.startNodeAt(startPos, startLoc);
  node.left = left;
  node.operator = op;
  node.right = right;
  return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression")
};

// Parse unary operators, both prefix and postfix.

pp$4.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
  var startPos = this.start, startLoc = this.startLoc, expr;
  if (this.isContextual("await") && this.canAwait) {
    expr = this.parseAwait(forInit);
    sawUnary = true;
  } else if (this.type.prefix) {
    var node = this.startNode(), update = this.type === types.incDec;
    node.operator = this.value;
    node.prefix = true;
    this.next();
    node.argument = this.parseMaybeUnary(null, true, update, forInit);
    this.checkExpressionErrors(refDestructuringErrors, true);
    if (update) { this.checkLValSimple(node.argument); }
    else if (this.strict && node.operator === "delete" &&
             node.argument.type === "Identifier")
      { this.raiseRecoverable(node.start, "Deleting local variable in strict mode"); }
    else if (node.operator === "delete" && isPrivateFieldAccess(node.argument))
      { this.raiseRecoverable(node.start, "Private fields can not be deleted"); }
    else { sawUnary = true; }
    expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
  } else {
    expr = this.parseExprSubscripts(refDestructuringErrors, forInit);
    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
    while (this.type.postfix && !this.canInsertSemicolon()) {
      var node$1 = this.startNodeAt(startPos, startLoc);
      node$1.operator = this.value;
      node$1.prefix = false;
      node$1.argument = expr;
      this.checkLValSimple(expr);
      this.next();
      expr = this.finishNode(node$1, "UpdateExpression");
    }
  }

  if (!incDec && this.eat(types.starstar)) {
    if (sawUnary)
      { this.unexpected(this.lastTokStart); }
    else
      { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false) }
  } else {
    return expr
  }
};

function isPrivateFieldAccess(node) {
  return (
    node.type === "MemberExpression" && node.property.type === "PrivateIdentifier" ||
    node.type === "ChainExpression" && isPrivateFieldAccess(node.expression)
  )
}

// Parse call, dot, and `[]`-subscript expressions.

pp$4.parseExprSubscripts = function(refDestructuringErrors, forInit) {
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseExprAtom(refDestructuringErrors, forInit);
  if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")")
    { return expr }
  var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
  if (refDestructuringErrors && result.type === "MemberExpression") {
    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }
    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }
    if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }
  }
  return result
};

pp$4.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" &&
      this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&
      this.potentialArrowAt === base.start;
  var optionalChained = false;

  while (true) {
    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);

    if (element.optional) { optionalChained = true; }
    if (element === base || element.type === "ArrowFunctionExpression") {
      if (optionalChained) {
        var chainNode = this.startNodeAt(startPos, startLoc);
        chainNode.expression = element;
        element = this.finishNode(chainNode, "ChainExpression");
      }
      return element
    }

    base = element;
  }
};

pp$4.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
  var optionalSupported = this.options.ecmaVersion >= 11;
  var optional = optionalSupported && this.eat(types.questionDot);
  if (noCalls && optional) { this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions"); }

  var computed = this.eat(types.bracketL);
  if (computed || (optional && this.type !== types.parenL && this.type !== types.backQuote) || this.eat(types.dot)) {
    var node = this.startNodeAt(startPos, startLoc);
    node.object = base;
    if (computed) {
      node.property = this.parseExpression();
      this.expect(types.bracketR);
    } else if (this.type === types.privateId && base.type !== "Super") {
      node.property = this.parsePrivateIdent();
    } else {
      node.property = this.parseIdent(this.options.allowReserved !== "never");
    }
    node.computed = !!computed;
    if (optionalSupported) {
      node.optional = optional;
    }
    base = this.finishNode(node, "MemberExpression");
  } else if (!noCalls && this.eat(types.parenL)) {
    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;
    var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
    if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types.arrow)) {
      this.checkPatternErrors(refDestructuringErrors, false);
      this.checkYieldAwaitInDefaultParams();
      if (this.awaitIdentPos > 0)
        { this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"); }
      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      this.awaitIdentPos = oldAwaitIdentPos;
      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit)
    }
    this.checkExpressionErrors(refDestructuringErrors, true);
    this.yieldPos = oldYieldPos || this.yieldPos;
    this.awaitPos = oldAwaitPos || this.awaitPos;
    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
    var node$1 = this.startNodeAt(startPos, startLoc);
    node$1.callee = base;
    node$1.arguments = exprList;
    if (optionalSupported) {
      node$1.optional = optional;
    }
    base = this.finishNode(node$1, "CallExpression");
  } else if (this.type === types.backQuote) {
    if (optional || optionalChained) {
      this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
    }
    var node$2 = this.startNodeAt(startPos, startLoc);
    node$2.tag = base;
    node$2.quasi = this.parseTemplate({isTagged: true});
    base = this.finishNode(node$2, "TaggedTemplateExpression");
  }
  return base
};

// Parse an atomic expression — either a single token that is an
// expression, an expression started by a keyword like `function` or
// `new`, or an expression wrapped in punctuation like `()`, `[]`,
// or `{}`.

pp$4.parseExprAtom = function(refDestructuringErrors, forInit) {
  // If a division operator appears in an expression position, the
  // tokenizer got confused, and we force it to read a regexp instead.
  if (this.type === types.slash) { this.readRegexp(); }

  var node, canBeArrow = this.potentialArrowAt === this.start;
  switch (this.type) {
  case types._super:
    if (!this.allowSuper)
      { this.raise(this.start, "'super' keyword outside a method"); }
    node = this.startNode();
    this.next();
    if (this.type === types.parenL && !this.allowDirectSuper)
      { this.raise(node.start, "super() call outside constructor of a subclass"); }
    // The `super` keyword can appear at below:
    // SuperProperty:
    //     super [ Expression ]
    //     super . IdentifierName
    // SuperCall:
    //     super ( Arguments )
    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)
      { this.unexpected(); }
    return this.finishNode(node, "Super")

  case types._this:
    node = this.startNode();
    this.next();
    return this.finishNode(node, "ThisExpression")

  case types.name:
    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
    var id = this.parseIdent(false);
    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function)) {
      this.overrideContext(types$1.f_expr);
      return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit)
    }
    if (canBeArrow && !this.canInsertSemicolon()) {
      if (this.eat(types.arrow))
        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit) }
      if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc &&
          (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {
        id = this.parseIdent(false);
        if (this.canInsertSemicolon() || !this.eat(types.arrow))
          { this.unexpected(); }
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit)
      }
    }
    return id

  case types.regexp:
    var value = this.value;
    node = this.parseLiteral(value.value);
    node.regex = {pattern: value.pattern, flags: value.flags};
    return node

  case types.num: case types.string:
    return this.parseLiteral(this.value)

  case types._null: case types._true: case types._false:
    node = this.startNode();
    node.value = this.type === types._null ? null : this.type === types._true;
    node.raw = this.type.keyword;
    this.next();
    return this.finishNode(node, "Literal")

  case types.parenL:
    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
    if (refDestructuringErrors) {
      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))
        { refDestructuringErrors.parenthesizedAssign = start; }
      if (refDestructuringErrors.parenthesizedBind < 0)
        { refDestructuringErrors.parenthesizedBind = start; }
    }
    return expr

  case types.bracketL:
    node = this.startNode();
    this.next();
    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
    return this.finishNode(node, "ArrayExpression")

  case types.braceL:
    this.overrideContext(types$1.b_expr);
    return this.parseObj(false, refDestructuringErrors)

  case types._function:
    node = this.startNode();
    this.next();
    return this.parseFunction(node, 0)

  case types._class:
    return this.parseClass(this.startNode(), false)

  case types._new:
    return this.parseNew()

  case types.backQuote:
    return this.parseTemplate()

  case types._import:
    if (this.options.ecmaVersion >= 11) {
      return this.parseExprImport()
    } else {
      return this.unexpected()
    }

  default:
    this.unexpected();
  }
};

pp$4.parseExprImport = function() {
  var node = this.startNode();

  // Consume `import` as an identifier for `import.meta`.
  // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.
  if (this.containsEsc) { this.raiseRecoverable(this.start, "Escape sequence in keyword import"); }
  var meta = this.parseIdent(true);

  switch (this.type) {
  case types.parenL:
    return this.parseDynamicImport(node)
  case types.dot:
    node.meta = meta;
    return this.parseImportMeta(node)
  default:
    this.unexpected();
  }
};

pp$4.parseDynamicImport = function(node) {
  this.next(); // skip `(`

  // Parse node.source.
  node.source = this.parseMaybeAssign();

  // Verify ending.
  if (!this.eat(types.parenR)) {
    var errorPos = this.start;
    if (this.eat(types.comma) && this.eat(types.parenR)) {
      this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
    } else {
      this.unexpected(errorPos);
    }
  }

  return this.finishNode(node, "ImportExpression")
};

pp$4.parseImportMeta = function(node) {
  this.next(); // skip `.`

  var containsEsc = this.containsEsc;
  node.property = this.parseIdent(true);

  if (node.property.name !== "meta")
    { this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"); }
  if (containsEsc)
    { this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"); }
  if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere)
    { this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"); }

  return this.finishNode(node, "MetaProperty")
};

pp$4.parseLiteral = function(value) {
  var node = this.startNode();
  node.value = value;
  node.raw = this.input.slice(this.start, this.end);
  if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, ""); }
  this.next();
  return this.finishNode(node, "Literal")
};

pp$4.parseParenExpression = function() {
  this.expect(types.parenL);
  var val = this.parseExpression();
  this.expect(types.parenR);
  return val
};

pp$4.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
  if (this.options.ecmaVersion >= 6) {
    this.next();

    var innerStartPos = this.start, innerStartLoc = this.startLoc;
    var exprList = [], first = true, lastIsComma = false;
    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
    this.yieldPos = 0;
    this.awaitPos = 0;
    // Do not save awaitIdentPos to allow checking awaits nested in parameters
    while (this.type !== types.parenR) {
      first ? first = false : this.expect(types.comma);
      if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {
        lastIsComma = true;
        break
      } else if (this.type === types.ellipsis) {
        spreadStart = this.start;
        exprList.push(this.parseParenItem(this.parseRestBinding()));
        if (this.type === types.comma) { this.raise(this.start, "Comma is not permitted after the rest element"); }
        break
      } else {
        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
      }
    }
    var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
    this.expect(types.parenR);

    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
      this.checkPatternErrors(refDestructuringErrors, false);
      this.checkYieldAwaitInDefaultParams();
      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      return this.parseParenArrowList(startPos, startLoc, exprList, forInit)
    }

    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }
    if (spreadStart) { this.unexpected(spreadStart); }
    this.checkExpressionErrors(refDestructuringErrors, true);
    this.yieldPos = oldYieldPos || this.yieldPos;
    this.awaitPos = oldAwaitPos || this.awaitPos;

    if (exprList.length > 1) {
      val = this.startNodeAt(innerStartPos, innerStartLoc);
      val.expressions = exprList;
      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
    } else {
      val = exprList[0];
    }
  } else {
    val = this.parseParenExpression();
  }

  if (this.options.preserveParens) {
    var par = this.startNodeAt(startPos, startLoc);
    par.expression = val;
    return this.finishNode(par, "ParenthesizedExpression")
  } else {
    return val
  }
};

pp$4.parseParenItem = function(item) {
  return item
};

pp$4.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, forInit)
};

// New's precedence is slightly tricky. It must allow its argument to
// be a `[]` or dot subscript expression, but not a call — at least,
// not without wrapping it in parentheses. Thus, it uses the noCalls
// argument to parseSubscripts to prevent it from consuming the
// argument list.

var empty$1 = [];

pp$4.parseNew = function() {
  if (this.containsEsc) { this.raiseRecoverable(this.start, "Escape sequence in keyword new"); }
  var node = this.startNode();
  var meta = this.parseIdent(true);
  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
    node.meta = meta;
    var containsEsc = this.containsEsc;
    node.property = this.parseIdent(true);
    if (node.property.name !== "target")
      { this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"); }
    if (containsEsc)
      { this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"); }
    if (!this.allowNewDotTarget)
      { this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"); }
    return this.finishNode(node, "MetaProperty")
  }
  var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;
  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true, false);
  if (isImport && node.callee.type === "ImportExpression") {
    this.raise(startPos, "Cannot use new with import()");
  }
  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }
  else { node.arguments = empty$1; }
  return this.finishNode(node, "NewExpression")
};

// Parse template expression.

pp$4.parseTemplateElement = function(ref) {
  var isTagged = ref.isTagged;

  var elem = this.startNode();
  if (this.type === types.invalidTemplate) {
    if (!isTagged) {
      this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
    }
    elem.value = {
      raw: this.value,
      cooked: null
    };
  } else {
    elem.value = {
      raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
      cooked: this.value
    };
  }
  this.next();
  elem.tail = this.type === types.backQuote;
  return this.finishNode(elem, "TemplateElement")
};

pp$4.parseTemplate = function(ref) {
  if ( ref === void 0 ) ref = {};
  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;

  var node = this.startNode();
  this.next();
  node.expressions = [];
  var curElt = this.parseTemplateElement({isTagged: isTagged});
  node.quasis = [curElt];
  while (!curElt.tail) {
    if (this.type === types.eof) { this.raise(this.pos, "Unterminated template literal"); }
    this.expect(types.dollarBraceL);
    node.expressions.push(this.parseExpression());
    this.expect(types.braceR);
    node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));
  }
  this.next();
  return this.finishNode(node, "TemplateLiteral")
};

pp$4.isAsyncProp = function(prop) {
  return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" &&
    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&
    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
};

// Parse an object literal or binding pattern.

pp$4.parseObj = function(isPattern, refDestructuringErrors) {
  var node = this.startNode(), first = true, propHash = {};
  node.properties = [];
  this.next();
  while (!this.eat(types.braceR)) {
    if (!first) {
      this.expect(types.comma);
      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) { break }
    } else { first = false; }

    var prop = this.parseProperty(isPattern, refDestructuringErrors);
    if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }
    node.properties.push(prop);
  }
  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression")
};

pp$4.parseProperty = function(isPattern, refDestructuringErrors) {
  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
    if (isPattern) {
      prop.argument = this.parseIdent(false);
      if (this.type === types.comma) {
        this.raise(this.start, "Comma is not permitted after the rest element");
      }
      return this.finishNode(prop, "RestElement")
    }
    // To disallow parenthesized identifier via `this.toAssignable()`.
    if (this.type === types.parenL && refDestructuringErrors) {
      if (refDestructuringErrors.parenthesizedAssign < 0) {
        refDestructuringErrors.parenthesizedAssign = this.start;
      }
      if (refDestructuringErrors.parenthesizedBind < 0) {
        refDestructuringErrors.parenthesizedBind = this.start;
      }
    }
    // Parse argument.
    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
    // To disallow trailing comma via `this.toAssignable()`.
    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
      refDestructuringErrors.trailingComma = this.start;
    }
    // Finish
    return this.finishNode(prop, "SpreadElement")
  }
  if (this.options.ecmaVersion >= 6) {
    prop.method = false;
    prop.shorthand = false;
    if (isPattern || refDestructuringErrors) {
      startPos = this.start;
      startLoc = this.startLoc;
    }
    if (!isPattern)
      { isGenerator = this.eat(types.star); }
  }
  var containsEsc = this.containsEsc;
  this.parsePropertyName(prop);
  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
    isAsync = true;
    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
    this.parsePropertyName(prop, refDestructuringErrors);
  } else {
    isAsync = false;
  }
  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
  return this.finishNode(prop, "Property")
};

pp$4.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
  if ((isGenerator || isAsync) && this.type === types.colon)
    { this.unexpected(); }

  if (this.eat(types.colon)) {
    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
    prop.kind = "init";
  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
    if (isPattern) { this.unexpected(); }
    prop.kind = "init";
    prop.method = true;
    prop.value = this.parseMethod(isGenerator, isAsync);
  } else if (!isPattern && !containsEsc &&
             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" &&
             (prop.key.name === "get" || prop.key.name === "set") &&
             (this.type !== types.comma && this.type !== types.braceR && this.type !== types.eq)) {
    if (isGenerator || isAsync) { this.unexpected(); }
    prop.kind = prop.key.name;
    this.parsePropertyName(prop);
    prop.value = this.parseMethod(false);
    var paramCount = prop.kind === "get" ? 0 : 1;
    if (prop.value.params.length !== paramCount) {
      var start = prop.value.start;
      if (prop.kind === "get")
        { this.raiseRecoverable(start, "getter should have no params"); }
      else
        { this.raiseRecoverable(start, "setter should have exactly one param"); }
    } else {
      if (prop.kind === "set" && prop.value.params[0].type === "RestElement")
        { this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params"); }
    }
  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
    if (isGenerator || isAsync) { this.unexpected(); }
    this.checkUnreserved(prop.key);
    if (prop.key.name === "await" && !this.awaitIdentPos)
      { this.awaitIdentPos = startPos; }
    prop.kind = "init";
    if (isPattern) {
      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
    } else if (this.type === types.eq && refDestructuringErrors) {
      if (refDestructuringErrors.shorthandAssign < 0)
        { refDestructuringErrors.shorthandAssign = this.start; }
      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
    } else {
      prop.value = this.copyNode(prop.key);
    }
    prop.shorthand = true;
  } else { this.unexpected(); }
};

pp$4.parsePropertyName = function(prop) {
  if (this.options.ecmaVersion >= 6) {
    if (this.eat(types.bracketL)) {
      prop.computed = true;
      prop.key = this.parseMaybeAssign();
      this.expect(types.bracketR);
      return prop.key
    } else {
      prop.computed = false;
    }
  }
  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never")
};

// Initialize empty function node.

pp$4.initFunction = function(node) {
  node.id = null;
  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }
  if (this.options.ecmaVersion >= 8) { node.async = false; }
};

// Parse object or class method.

pp$4.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;

  this.initFunction(node);
  if (this.options.ecmaVersion >= 6)
    { node.generator = isGenerator; }
  if (this.options.ecmaVersion >= 8)
    { node.async = !!isAsync; }

  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;
  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));

  this.expect(types.parenL);
  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
  this.checkYieldAwaitInDefaultParams();
  this.parseFunctionBody(node, false, true, false);

  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node, "FunctionExpression")
};

// Parse arrow function expression with given parameters.

pp$4.parseArrowExpression = function(node, params, isAsync, forInit) {
  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;

  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
  this.initFunction(node);
  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }

  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;

  node.params = this.toAssignableList(params, true);
  this.parseFunctionBody(node, true, false, forInit);

  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node, "ArrowFunctionExpression")
};

// Parse function body and check parameters.

pp$4.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
  var isExpression = isArrowFunction && this.type !== types.braceL;
  var oldStrict = this.strict, useStrict = false;

  if (isExpression) {
    node.body = this.parseMaybeAssign(forInit);
    node.expression = true;
    this.checkParams(node, false);
  } else {
    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
    if (!oldStrict || nonSimple) {
      useStrict = this.strictDirective(this.end);
      // If this is a strict mode function, verify that argument names
      // are not repeated, and it does not try to bind the words `eval`
      // or `arguments`.
      if (useStrict && nonSimple)
        { this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list"); }
    }
    // Start a new scope with regard to labels and the `inFunction`
    // flag (restore them to their old value afterwards).
    var oldLabels = this.labels;
    this.labels = [];
    if (useStrict) { this.strict = true; }

    // Add the params to varDeclaredNames to ensure that an error is thrown
    // if a let/const declaration in the function clashes with one of the params.
    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'
    if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }
    node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);
    node.expression = false;
    this.adaptDirectivePrologue(node.body.body);
    this.labels = oldLabels;
  }
  this.exitScope();
};

pp$4.isSimpleParamList = function(params) {
  for (var i = 0, list = params; i < list.length; i += 1)
    {
    var param = list[i];

    if (param.type !== "Identifier") { return false
  } }
  return true
};

// Checks function params for various disallowed patterns such as using "eval"
// or "arguments" and duplicate parameters.

pp$4.checkParams = function(node, allowDuplicates) {
  var nameHash = Object.create(null);
  for (var i = 0, list = node.params; i < list.length; i += 1)
    {
    var param = list[i];

    this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);
  }
};

// Parses a comma-separated list of expressions, and returns them as
// an array. `close` is the token type that ends the list, and
// `allowEmpty` can be turned on to allow subsequent commas with
// nothing in between them to be parsed as `null` (which is needed
// for array literals).

pp$4.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
  var elts = [], first = true;
  while (!this.eat(close)) {
    if (!first) {
      this.expect(types.comma);
      if (allowTrailingComma && this.afterTrailingComma(close)) { break }
    } else { first = false; }

    var elt = (void 0);
    if (allowEmpty && this.type === types.comma)
      { elt = null; }
    else if (this.type === types.ellipsis) {
      elt = this.parseSpread(refDestructuringErrors);
      if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0)
        { refDestructuringErrors.trailingComma = this.start; }
    } else {
      elt = this.parseMaybeAssign(false, refDestructuringErrors);
    }
    elts.push(elt);
  }
  return elts
};

pp$4.checkUnreserved = function(ref) {
  var start = ref.start;
  var end = ref.end;
  var name = ref.name;

  if (this.inGenerator && name === "yield")
    { this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"); }
  if (this.inAsync && name === "await")
    { this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"); }
  if (this.currentThisScope().inClassFieldInit && name === "arguments")
    { this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"); }
  if (this.inClassStaticBlock && (name === "arguments" || name === "await"))
    { this.raise(start, ("Cannot use " + name + " in class static initialization block")); }
  if (this.keywords.test(name))
    { this.raise(start, ("Unexpected keyword '" + name + "'")); }
  if (this.options.ecmaVersion < 6 &&
    this.input.slice(start, end).indexOf("\\") !== -1) { return }
  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
  if (re.test(name)) {
    if (!this.inAsync && name === "await")
      { this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"); }
    this.raiseRecoverable(start, ("The keyword '" + name + "' is reserved"));
  }
};

// Parse the next token as an identifier. If `liberal` is true (used
// when parsing properties), it will also convert keywords into
// identifiers.

pp$4.parseIdent = function(liberal, isBinding) {
  var node = this.startNode();
  if (this.type === types.name) {
    node.name = this.value;
  } else if (this.type.keyword) {
    node.name = this.type.keyword;

    // To fix https://github.com/acornjs/acorn/issues/575
    // `class` and `function` keywords push new context into this.context.
    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword
    if ((node.name === "class" || node.name === "function") &&
        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
      this.context.pop();
    }
  } else {
    this.unexpected();
  }
  this.next(!!liberal);
  this.finishNode(node, "Identifier");
  if (!liberal) {
    this.checkUnreserved(node);
    if (node.name === "await" && !this.awaitIdentPos)
      { this.awaitIdentPos = node.start; }
  }
  return node
};

pp$4.parsePrivateIdent = function() {
  var node = this.startNode();
  if (this.type === types.privateId) {
    node.name = this.value;
  } else {
    this.unexpected();
  }
  this.next();
  this.finishNode(node, "PrivateIdentifier");

  // For validating existence
  if (this.privateNameStack.length === 0) {
    this.raise(node.start, ("Private field '#" + (node.name) + "' must be declared in an enclosing class"));
  } else {
    this.privateNameStack[this.privateNameStack.length - 1].used.push(node);
  }

  return node
};

// Parses yield expression inside generator.

pp$4.parseYield = function(forInit) {
  if (!this.yieldPos) { this.yieldPos = this.start; }

  var node = this.startNode();
  this.next();
  if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {
    node.delegate = false;
    node.argument = null;
  } else {
    node.delegate = this.eat(types.star);
    node.argument = this.parseMaybeAssign(forInit);
  }
  return this.finishNode(node, "YieldExpression")
};

pp$4.parseAwait = function(forInit) {
  if (!this.awaitPos) { this.awaitPos = this.start; }

  var node = this.startNode();
  this.next();
  node.argument = this.parseMaybeUnary(null, true, false, forInit);
  return this.finishNode(node, "AwaitExpression")
};

var pp$5 = Parser.prototype;

// This function is used to raise exceptions on parse errors. It
// takes an offset integer (into the current `input`) to indicate
// the location of the error, attaches the position to the end
// of the error message, and then raises a `SyntaxError` with that
// message.

pp$5.raise = function(pos, message) {
  var loc = getLineInfo(this.input, pos);
  message += " (" + loc.line + ":" + loc.column + ")";
  var err = new SyntaxError(message);
  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;
  throw err
};

pp$5.raiseRecoverable = pp$5.raise;

pp$5.curPosition = function() {
  if (this.options.locations) {
    return new Position(this.curLine, this.pos - this.lineStart)
  }
};

var pp$6 = Parser.prototype;

var Scope = function Scope(flags) {
  this.flags = flags;
  // A list of var-declared names in the current lexical scope
  this.var = [];
  // A list of lexically-declared names in the current lexical scope
  this.lexical = [];
  // A list of lexically-declared FunctionDeclaration names in the current lexical scope
  this.functions = [];
  // A switch to disallow the identifier reference 'arguments'
  this.inClassFieldInit = false;
};

// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.

pp$6.enterScope = function(flags) {
  this.scopeStack.push(new Scope(flags));
};

pp$6.exitScope = function() {
  this.scopeStack.pop();
};

// The spec says:
// > At the top level of a function, or script, function declarations are
// > treated like var declarations rather than like lexical declarations.
pp$6.treatFunctionsAsVarInScope = function(scope) {
  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)
};

pp$6.declareName = function(name, bindingType, pos) {
  var redeclared = false;
  if (bindingType === BIND_LEXICAL) {
    var scope = this.currentScope();
    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
    scope.lexical.push(name);
    if (this.inModule && (scope.flags & SCOPE_TOP))
      { delete this.undefinedExports[name]; }
  } else if (bindingType === BIND_SIMPLE_CATCH) {
    var scope$1 = this.currentScope();
    scope$1.lexical.push(name);
  } else if (bindingType === BIND_FUNCTION) {
    var scope$2 = this.currentScope();
    if (this.treatFunctionsAsVar)
      { redeclared = scope$2.lexical.indexOf(name) > -1; }
    else
      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }
    scope$2.functions.push(name);
  } else {
    for (var i = this.scopeStack.length - 1; i >= 0; --i) {
      var scope$3 = this.scopeStack[i];
      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||
          !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
        redeclared = true;
        break
      }
      scope$3.var.push(name);
      if (this.inModule && (scope$3.flags & SCOPE_TOP))
        { delete this.undefinedExports[name]; }
      if (scope$3.flags & SCOPE_VAR) { break }
    }
  }
  if (redeclared) { this.raiseRecoverable(pos, ("Identifier '" + name + "' has already been declared")); }
};

pp$6.checkLocalExport = function(id) {
  // scope.functions must be empty as Module code is always strict.
  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&
      this.scopeStack[0].var.indexOf(id.name) === -1) {
    this.undefinedExports[id.name] = id;
  }
};

pp$6.currentScope = function() {
  return this.scopeStack[this.scopeStack.length - 1]
};

pp$6.currentVarScope = function() {
  for (var i = this.scopeStack.length - 1;; i--) {
    var scope = this.scopeStack[i];
    if (scope.flags & SCOPE_VAR) { return scope }
  }
};

// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.
pp$6.currentThisScope = function() {
  for (var i = this.scopeStack.length - 1;; i--) {
    var scope = this.scopeStack[i];
    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }
  }
};

var Node = function Node(parser, pos, loc) {
  this.type = "";
  this.start = pos;
  this.end = 0;
  if (parser.options.locations)
    { this.loc = new SourceLocation(parser, loc); }
  if (parser.options.directSourceFile)
    { this.sourceFile = parser.options.directSourceFile; }
  if (parser.options.ranges)
    { this.range = [pos, 0]; }
};

// Start an AST node, attaching a start offset.

var pp$7 = Parser.prototype;

pp$7.startNode = function() {
  return new Node(this, this.start, this.startLoc)
};

pp$7.startNodeAt = function(pos, loc) {
  return new Node(this, pos, loc)
};

// Finish an AST node, adding `type` and `end` properties.

function finishNodeAt(node, type, pos, loc) {
  node.type = type;
  node.end = pos;
  if (this.options.locations)
    { node.loc.end = loc; }
  if (this.options.ranges)
    { node.range[1] = pos; }
  return node
}

pp$7.finishNode = function(node, type) {
  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)
};

// Finish node at given position

pp$7.finishNodeAt = function(node, type, pos, loc) {
  return finishNodeAt.call(this, node, type, pos, loc)
};

pp$7.copyNode = function(node) {
  var newNode = new Node(this, node.start, this.startLoc);
  for (var prop in node) { newNode[prop] = node[prop]; }
  return newNode
};

// This file contains Unicode properties extracted from the ECMAScript
// specification. The lists are extracted like so:
// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)

// #table-binary-unicode-properties
var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
var ecma11BinaryProperties = ecma10BinaryProperties;
var ecma12BinaryProperties = ecma11BinaryProperties + " EBase EComp EMod EPres ExtPict";
var unicodeBinaryProperties = {
  9: ecma9BinaryProperties,
  10: ecma10BinaryProperties,
  11: ecma11BinaryProperties,
  12: ecma12BinaryProperties
};

// #table-unicode-general-category-values
var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";

// #table-unicode-script-values
var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
var ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";
var unicodeScriptValues = {
  9: ecma9ScriptValues,
  10: ecma10ScriptValues,
  11: ecma11ScriptValues,
  12: ecma12ScriptValues
};

var data = {};
function buildUnicodeData(ecmaVersion) {
  var d = data[ecmaVersion] = {
    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
    nonBinary: {
      General_Category: wordsRegexp(unicodeGeneralCategoryValues),
      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
    }
  };
  d.nonBinary.Script_Extensions = d.nonBinary.Script;

  d.nonBinary.gc = d.nonBinary.General_Category;
  d.nonBinary.sc = d.nonBinary.Script;
  d.nonBinary.scx = d.nonBinary.Script_Extensions;
}
buildUnicodeData(9);
buildUnicodeData(10);
buildUnicodeData(11);
buildUnicodeData(12);

var pp$8 = Parser.prototype;

var RegExpValidationState = function RegExpValidationState(parser) {
  this.parser = parser;
  this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "");
  this.unicodeProperties = data[parser.options.ecmaVersion >= 12 ? 12 : parser.options.ecmaVersion];
  this.source = "";
  this.flags = "";
  this.start = 0;
  this.switchU = false;
  this.switchN = false;
  this.pos = 0;
  this.lastIntValue = 0;
  this.lastStringValue = "";
  this.lastAssertionIsQuantifiable = false;
  this.numCapturingParens = 0;
  this.maxBackReference = 0;
  this.groupNames = [];
  this.backReferenceNames = [];
};

RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {
  var unicode = flags.indexOf("u") !== -1;
  this.start = start | 0;
  this.source = pattern + "";
  this.flags = flags;
  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
};

RegExpValidationState.prototype.raise = function raise (message) {
  this.parser.raiseRecoverable(this.start, ("Invalid regular expression: /" + (this.source) + "/: " + message));
};

// If u flag is given, this returns the code point at the index (it combines a surrogate pair).
// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).
RegExpValidationState.prototype.at = function at (i, forceU) {
    if ( forceU === void 0 ) forceU = false;

  var s = this.source;
  var l = s.length;
  if (i >= l) {
    return -1
  }
  var c = s.charCodeAt(i);
  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
    return c
  }
  var next = s.charCodeAt(i + 1);
  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c
};

RegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {
    if ( forceU === void 0 ) forceU = false;

  var s = this.source;
  var l = s.length;
  if (i >= l) {
    return l
  }
  var c = s.charCodeAt(i), next;
  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||
      (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {
    return i + 1
  }
  return i + 2
};

RegExpValidationState.prototype.current = function current (forceU) {
    if ( forceU === void 0 ) forceU = false;

  return this.at(this.pos, forceU)
};

RegExpValidationState.prototype.lookahead = function lookahead (forceU) {
    if ( forceU === void 0 ) forceU = false;

  return this.at(this.nextIndex(this.pos, forceU), forceU)
};

RegExpValidationState.prototype.advance = function advance (forceU) {
    if ( forceU === void 0 ) forceU = false;

  this.pos = this.nextIndex(this.pos, forceU);
};

RegExpValidationState.prototype.eat = function eat (ch, forceU) {
    if ( forceU === void 0 ) forceU = false;

  if (this.current(forceU) === ch) {
    this.advance(forceU);
    return true
  }
  return false
};

function codePointToString(ch) {
  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }
  ch -= 0x10000;
  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)
}

/**
 * Validate the flags part of a given RegExpLiteral.
 *
 * @param {RegExpValidationState} state The state to validate RegExp.
 * @returns {void}
 */
pp$8.validateRegExpFlags = function(state) {
  var validFlags = state.validFlags;
  var flags = state.flags;

  for (var i = 0; i < flags.length; i++) {
    var flag = flags.charAt(i);
    if (validFlags.indexOf(flag) === -1) {
      this.raise(state.start, "Invalid regular expression flag");
    }
    if (flags.indexOf(flag, i + 1) > -1) {
      this.raise(state.start, "Duplicate regular expression flag");
    }
  }
};

/**
 * Validate the pattern part of a given RegExpLiteral.
 *
 * @param {RegExpValidationState} state The state to validate RegExp.
 * @returns {void}
 */
pp$8.validateRegExpPattern = function(state) {
  this.regexp_pattern(state);

  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of
  // parsing contains a |GroupName|, reparse with the goal symbol
  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*
  // exception if _P_ did not conform to the grammar, if any elements of _P_
  // were not matched by the parse, or if any Early Error conditions exist.
  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
    state.switchN = true;
    this.regexp_pattern(state);
  }
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern
pp$8.regexp_pattern = function(state) {
  state.pos = 0;
  state.lastIntValue = 0;
  state.lastStringValue = "";
  state.lastAssertionIsQuantifiable = false;
  state.numCapturingParens = 0;
  state.maxBackReference = 0;
  state.groupNames.length = 0;
  state.backReferenceNames.length = 0;

  this.regexp_disjunction(state);

  if (state.pos !== state.source.length) {
    // Make the same messages as V8.
    if (state.eat(0x29 /* ) */)) {
      state.raise("Unmatched ')'");
    }
    if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {
      state.raise("Lone quantifier brackets");
    }
  }
  if (state.maxBackReference > state.numCapturingParens) {
    state.raise("Invalid escape");
  }
  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
    var name = list[i];

    if (state.groupNames.indexOf(name) === -1) {
      state.raise("Invalid named capture referenced");
    }
  }
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction
pp$8.regexp_disjunction = function(state) {
  this.regexp_alternative(state);
  while (state.eat(0x7C /* | */)) {
    this.regexp_alternative(state);
  }

  // Make the same message as V8.
  if (this.regexp_eatQuantifier(state, true)) {
    state.raise("Nothing to repeat");
  }
  if (state.eat(0x7B /* { */)) {
    state.raise("Lone quantifier brackets");
  }
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative
pp$8.regexp_alternative = function(state) {
  while (state.pos < state.source.length && this.regexp_eatTerm(state))
    { }
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term
pp$8.regexp_eatTerm = function(state) {
  if (this.regexp_eatAssertion(state)) {
    // Handle `QuantifiableAssertion Quantifier` alternative.
    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion
    // is a QuantifiableAssertion.
    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
      // Make the same message as V8.
      if (state.switchU) {
        state.raise("Invalid quantifier");
      }
    }
    return true
  }

  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
    this.regexp_eatQuantifier(state);
    return true
  }

  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion
pp$8.regexp_eatAssertion = function(state) {
  var start = state.pos;
  state.lastAssertionIsQuantifiable = false;

  // ^, $
  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {
    return true
  }

  // \b \B
  if (state.eat(0x5C /* \ */)) {
    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {
      return true
    }
    state.pos = start;
  }

  // Lookahead / Lookbehind
  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {
    var lookbehind = false;
    if (this.options.ecmaVersion >= 9) {
      lookbehind = state.eat(0x3C /* < */);
    }
    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {
      this.regexp_disjunction(state);
      if (!state.eat(0x29 /* ) */)) {
        state.raise("Unterminated group");
      }
      state.lastAssertionIsQuantifiable = !lookbehind;
      return true
    }
  }

  state.pos = start;
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier
pp$8.regexp_eatQuantifier = function(state, noError) {
  if ( noError === void 0 ) noError = false;

  if (this.regexp_eatQuantifierPrefix(state, noError)) {
    state.eat(0x3F /* ? */);
    return true
  }
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix
pp$8.regexp_eatQuantifierPrefix = function(state, noError) {
  return (
    state.eat(0x2A /* * */) ||
    state.eat(0x2B /* + */) ||
    state.eat(0x3F /* ? */) ||
    this.regexp_eatBracedQuantifier(state, noError)
  )
};
pp$8.regexp_eatBracedQuantifier = function(state, noError) {
  var start = state.pos;
  if (state.eat(0x7B /* { */)) {
    var min = 0, max = -1;
    if (this.regexp_eatDecimalDigits(state)) {
      min = state.lastIntValue;
      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {
        max = state.lastIntValue;
      }
      if (state.eat(0x7D /* } */)) {
        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term
        if (max !== -1 && max < min && !noError) {
          state.raise("numbers out of order in {} quantifier");
        }
        return true
      }
    }
    if (state.switchU && !noError) {
      state.raise("Incomplete quantifier");
    }
    state.pos = start;
  }
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom
pp$8.regexp_eatAtom = function(state) {
  return (
    this.regexp_eatPatternCharacters(state) ||
    state.eat(0x2E /* . */) ||
    this.regexp_eatReverseSolidusAtomEscape(state) ||
    this.regexp_eatCharacterClass(state) ||
    this.regexp_eatUncapturingGroup(state) ||
    this.regexp_eatCapturingGroup(state)
  )
};
pp$8.regexp_eatReverseSolidusAtomEscape = function(state) {
  var start = state.pos;
  if (state.eat(0x5C /* \ */)) {
    if (this.regexp_eatAtomEscape(state)) {
      return true
    }
    state.pos = start;
  }
  return false
};
pp$8.regexp_eatUncapturingGroup = function(state) {
  var start = state.pos;
  if (state.eat(0x28 /* ( */)) {
    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {
      this.regexp_disjunction(state);
      if (state.eat(0x29 /* ) */)) {
        return true
      }
      state.raise("Unterminated group");
    }
    state.pos = start;
  }
  return false
};
pp$8.regexp_eatCapturingGroup = function(state) {
  if (state.eat(0x28 /* ( */)) {
    if (this.options.ecmaVersion >= 9) {
      this.regexp_groupSpecifier(state);
    } else if (state.current() === 0x3F /* ? */) {
      state.raise("Invalid group");
    }
    this.regexp_disjunction(state);
    if (state.eat(0x29 /* ) */)) {
      state.numCapturingParens += 1;
      return true
    }
    state.raise("Unterminated group");
  }
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom
pp$8.regexp_eatExtendedAtom = function(state) {
  return (
    state.eat(0x2E /* . */) ||
    this.regexp_eatReverseSolidusAtomEscape(state) ||
    this.regexp_eatCharacterClass(state) ||
    this.regexp_eatUncapturingGroup(state) ||
    this.regexp_eatCapturingGroup(state) ||
    this.regexp_eatInvalidBracedQuantifier(state) ||
    this.regexp_eatExtendedPatternCharacter(state)
  )
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier
pp$8.regexp_eatInvalidBracedQuantifier = function(state) {
  if (this.regexp_eatBracedQuantifier(state, true)) {
    state.raise("Nothing to repeat");
  }
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter
pp$8.regexp_eatSyntaxCharacter = function(state) {
  var ch = state.current();
  if (isSyntaxCharacter(ch)) {
    state.lastIntValue = ch;
    state.advance();
    return true
  }
  return false
};
function isSyntaxCharacter(ch) {
  return (
    ch === 0x24 /* $ */ ||
    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||
    ch === 0x2E /* . */ ||
    ch === 0x3F /* ? */ ||
    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||
    ch >= 0x7B /* { */ && ch <= 0x7D /* } */
  )
}

// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter
// But eat eager.
pp$8.regexp_eatPatternCharacters = function(state) {
  var start = state.pos;
  var ch = 0;
  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
    state.advance();
  }
  return state.pos !== start
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter
pp$8.regexp_eatExtendedPatternCharacter = function(state) {
  var ch = state.current();
  if (
    ch !== -1 &&
    ch !== 0x24 /* $ */ &&
    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&
    ch !== 0x2E /* . */ &&
    ch !== 0x3F /* ? */ &&
    ch !== 0x5B /* [ */ &&
    ch !== 0x5E /* ^ */ &&
    ch !== 0x7C /* | */
  ) {
    state.advance();
    return true
  }
  return false
};

// GroupSpecifier ::
//   [empty]
//   `?` GroupName
pp$8.regexp_groupSpecifier = function(state) {
  if (state.eat(0x3F /* ? */)) {
    if (this.regexp_eatGroupName(state)) {
      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
        state.raise("Duplicate capture group name");
      }
      state.groupNames.push(state.lastStringValue);
      return
    }
    state.raise("Invalid group");
  }
};

// GroupName ::
//   `<` RegExpIdentifierName `>`
// Note: this updates `state.lastStringValue` property with the eaten name.
pp$8.regexp_eatGroupName = function(state) {
  state.lastStringValue = "";
  if (state.eat(0x3C /* < */)) {
    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {
      return true
    }
    state.raise("Invalid capture group name");
  }
  return false
};

// RegExpIdentifierName ::
//   RegExpIdentifierStart
//   RegExpIdentifierName RegExpIdentifierPart
// Note: this updates `state.lastStringValue` property with the eaten name.
pp$8.regexp_eatRegExpIdentifierName = function(state) {
  state.lastStringValue = "";
  if (this.regexp_eatRegExpIdentifierStart(state)) {
    state.lastStringValue += codePointToString(state.lastIntValue);
    while (this.regexp_eatRegExpIdentifierPart(state)) {
      state.lastStringValue += codePointToString(state.lastIntValue);
    }
    return true
  }
  return false
};

// RegExpIdentifierStart ::
//   UnicodeIDStart
//   `$`
//   `_`
//   `\` RegExpUnicodeEscapeSequence[+U]
pp$8.regexp_eatRegExpIdentifierStart = function(state) {
  var start = state.pos;
  var forceU = this.options.ecmaVersion >= 11;
  var ch = state.current(forceU);
  state.advance(forceU);

  if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
    ch = state.lastIntValue;
  }
  if (isRegExpIdentifierStart(ch)) {
    state.lastIntValue = ch;
    return true
  }

  state.pos = start;
  return false
};
function isRegExpIdentifierStart(ch) {
  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */
}

// RegExpIdentifierPart ::
//   UnicodeIDContinue
//   `$`
//   `_`
//   `\` RegExpUnicodeEscapeSequence[+U]
//   <ZWNJ>
//   <ZWJ>
pp$8.regexp_eatRegExpIdentifierPart = function(state) {
  var start = state.pos;
  var forceU = this.options.ecmaVersion >= 11;
  var ch = state.current(forceU);
  state.advance(forceU);

  if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
    ch = state.lastIntValue;
  }
  if (isRegExpIdentifierPart(ch)) {
    state.lastIntValue = ch;
    return true
  }

  state.pos = start;
  return false
};
function isRegExpIdentifierPart(ch) {
  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */
}

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape
pp$8.regexp_eatAtomEscape = function(state) {
  if (
    this.regexp_eatBackReference(state) ||
    this.regexp_eatCharacterClassEscape(state) ||
    this.regexp_eatCharacterEscape(state) ||
    (state.switchN && this.regexp_eatKGroupName(state))
  ) {
    return true
  }
  if (state.switchU) {
    // Make the same message as V8.
    if (state.current() === 0x63 /* c */) {
      state.raise("Invalid unicode escape");
    }
    state.raise("Invalid escape");
  }
  return false
};
pp$8.regexp_eatBackReference = function(state) {
  var start = state.pos;
  if (this.regexp_eatDecimalEscape(state)) {
    var n = state.lastIntValue;
    if (state.switchU) {
      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape
      if (n > state.maxBackReference) {
        state.maxBackReference = n;
      }
      return true
    }
    if (n <= state.numCapturingParens) {
      return true
    }
    state.pos = start;
  }
  return false
};
pp$8.regexp_eatKGroupName = function(state) {
  if (state.eat(0x6B /* k */)) {
    if (this.regexp_eatGroupName(state)) {
      state.backReferenceNames.push(state.lastStringValue);
      return true
    }
    state.raise("Invalid named reference");
  }
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape
pp$8.regexp_eatCharacterEscape = function(state) {
  return (
    this.regexp_eatControlEscape(state) ||
    this.regexp_eatCControlLetter(state) ||
    this.regexp_eatZero(state) ||
    this.regexp_eatHexEscapeSequence(state) ||
    this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||
    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||
    this.regexp_eatIdentityEscape(state)
  )
};
pp$8.regexp_eatCControlLetter = function(state) {
  var start = state.pos;
  if (state.eat(0x63 /* c */)) {
    if (this.regexp_eatControlLetter(state)) {
      return true
    }
    state.pos = start;
  }
  return false
};
pp$8.regexp_eatZero = function(state) {
  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {
    state.lastIntValue = 0;
    state.advance();
    return true
  }
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape
pp$8.regexp_eatControlEscape = function(state) {
  var ch = state.current();
  if (ch === 0x74 /* t */) {
    state.lastIntValue = 0x09; /* \t */
    state.advance();
    return true
  }
  if (ch === 0x6E /* n */) {
    state.lastIntValue = 0x0A; /* \n */
    state.advance();
    return true
  }
  if (ch === 0x76 /* v */) {
    state.lastIntValue = 0x0B; /* \v */
    state.advance();
    return true
  }
  if (ch === 0x66 /* f */) {
    state.lastIntValue = 0x0C; /* \f */
    state.advance();
    return true
  }
  if (ch === 0x72 /* r */) {
    state.lastIntValue = 0x0D; /* \r */
    state.advance();
    return true
  }
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter
pp$8.regexp_eatControlLetter = function(state) {
  var ch = state.current();
  if (isControlLetter(ch)) {
    state.lastIntValue = ch % 0x20;
    state.advance();
    return true
  }
  return false
};
function isControlLetter(ch) {
  return (
    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||
    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)
  )
}

// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence
pp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
  if ( forceU === void 0 ) forceU = false;

  var start = state.pos;
  var switchU = forceU || state.switchU;

  if (state.eat(0x75 /* u */)) {
    if (this.regexp_eatFixedHexDigits(state, 4)) {
      var lead = state.lastIntValue;
      if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {
        var leadSurrogateEnd = state.pos;
        if (state.eat(0x5C /* \ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {
          var trail = state.lastIntValue;
          if (trail >= 0xDC00 && trail <= 0xDFFF) {
            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
            return true
          }
        }
        state.pos = leadSurrogateEnd;
        state.lastIntValue = lead;
      }
      return true
    }
    if (
      switchU &&
      state.eat(0x7B /* { */) &&
      this.regexp_eatHexDigits(state) &&
      state.eat(0x7D /* } */) &&
      isValidUnicode(state.lastIntValue)
    ) {
      return true
    }
    if (switchU) {
      state.raise("Invalid unicode escape");
    }
    state.pos = start;
  }

  return false
};
function isValidUnicode(ch) {
  return ch >= 0 && ch <= 0x10FFFF
}

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape
pp$8.regexp_eatIdentityEscape = function(state) {
  if (state.switchU) {
    if (this.regexp_eatSyntaxCharacter(state)) {
      return true
    }
    if (state.eat(0x2F /* / */)) {
      state.lastIntValue = 0x2F; /* / */
      return true
    }
    return false
  }

  var ch = state.current();
  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {
    state.lastIntValue = ch;
    state.advance();
    return true
  }

  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape
pp$8.regexp_eatDecimalEscape = function(state) {
  state.lastIntValue = 0;
  var ch = state.current();
  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {
    do {
      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
      state.advance();
    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)
    return true
  }
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape
pp$8.regexp_eatCharacterClassEscape = function(state) {
  var ch = state.current();

  if (isCharacterClassEscape(ch)) {
    state.lastIntValue = -1;
    state.advance();
    return true
  }

  if (
    state.switchU &&
    this.options.ecmaVersion >= 9 &&
    (ch === 0x50 /* P */ || ch === 0x70 /* p */)
  ) {
    state.lastIntValue = -1;
    state.advance();
    if (
      state.eat(0x7B /* { */) &&
      this.regexp_eatUnicodePropertyValueExpression(state) &&
      state.eat(0x7D /* } */)
    ) {
      return true
    }
    state.raise("Invalid property name");
  }

  return false
};
function isCharacterClassEscape(ch) {
  return (
    ch === 0x64 /* d */ ||
    ch === 0x44 /* D */ ||
    ch === 0x73 /* s */ ||
    ch === 0x53 /* S */ ||
    ch === 0x77 /* w */ ||
    ch === 0x57 /* W */
  )
}

// UnicodePropertyValueExpression ::
//   UnicodePropertyName `=` UnicodePropertyValue
//   LoneUnicodePropertyNameOrValue
pp$8.regexp_eatUnicodePropertyValueExpression = function(state) {
  var start = state.pos;

  // UnicodePropertyName `=` UnicodePropertyValue
  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {
    var name = state.lastStringValue;
    if (this.regexp_eatUnicodePropertyValue(state)) {
      var value = state.lastStringValue;
      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
      return true
    }
  }
  state.pos = start;

  // LoneUnicodePropertyNameOrValue
  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
    var nameOrValue = state.lastStringValue;
    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
    return true
  }
  return false
};
pp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
  if (!has(state.unicodeProperties.nonBinary, name))
    { state.raise("Invalid property name"); }
  if (!state.unicodeProperties.nonBinary[name].test(value))
    { state.raise("Invalid property value"); }
};
pp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
  if (!state.unicodeProperties.binary.test(nameOrValue))
    { state.raise("Invalid property name"); }
};

// UnicodePropertyName ::
//   UnicodePropertyNameCharacters
pp$8.regexp_eatUnicodePropertyName = function(state) {
  var ch = 0;
  state.lastStringValue = "";
  while (isUnicodePropertyNameCharacter(ch = state.current())) {
    state.lastStringValue += codePointToString(ch);
    state.advance();
  }
  return state.lastStringValue !== ""
};
function isUnicodePropertyNameCharacter(ch) {
  return isControlLetter(ch) || ch === 0x5F /* _ */
}

// UnicodePropertyValue ::
//   UnicodePropertyValueCharacters
pp$8.regexp_eatUnicodePropertyValue = function(state) {
  var ch = 0;
  state.lastStringValue = "";
  while (isUnicodePropertyValueCharacter(ch = state.current())) {
    state.lastStringValue += codePointToString(ch);
    state.advance();
  }
  return state.lastStringValue !== ""
};
function isUnicodePropertyValueCharacter(ch) {
  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)
}

// LoneUnicodePropertyNameOrValue ::
//   UnicodePropertyValueCharacters
pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
  return this.regexp_eatUnicodePropertyValue(state)
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass
pp$8.regexp_eatCharacterClass = function(state) {
  if (state.eat(0x5B /* [ */)) {
    state.eat(0x5E /* ^ */);
    this.regexp_classRanges(state);
    if (state.eat(0x5D /* ] */)) {
      return true
    }
    // Unreachable since it threw "unterminated regular expression" error before.
    state.raise("Unterminated character class");
  }
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges
// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges
// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash
pp$8.regexp_classRanges = function(state) {
  while (this.regexp_eatClassAtom(state)) {
    var left = state.lastIntValue;
    if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {
      var right = state.lastIntValue;
      if (state.switchU && (left === -1 || right === -1)) {
        state.raise("Invalid character class");
      }
      if (left !== -1 && right !== -1 && left > right) {
        state.raise("Range out of order in character class");
      }
    }
  }
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom
// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash
pp$8.regexp_eatClassAtom = function(state) {
  var start = state.pos;

  if (state.eat(0x5C /* \ */)) {
    if (this.regexp_eatClassEscape(state)) {
      return true
    }
    if (state.switchU) {
      // Make the same message as V8.
      var ch$1 = state.current();
      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {
        state.raise("Invalid class escape");
      }
      state.raise("Invalid escape");
    }
    state.pos = start;
  }

  var ch = state.current();
  if (ch !== 0x5D /* ] */) {
    state.lastIntValue = ch;
    state.advance();
    return true
  }

  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape
pp$8.regexp_eatClassEscape = function(state) {
  var start = state.pos;

  if (state.eat(0x62 /* b */)) {
    state.lastIntValue = 0x08; /* <BS> */
    return true
  }

  if (state.switchU && state.eat(0x2D /* - */)) {
    state.lastIntValue = 0x2D; /* - */
    return true
  }

  if (!state.switchU && state.eat(0x63 /* c */)) {
    if (this.regexp_eatClassControlLetter(state)) {
      return true
    }
    state.pos = start;
  }

  return (
    this.regexp_eatCharacterClassEscape(state) ||
    this.regexp_eatCharacterEscape(state)
  )
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter
pp$8.regexp_eatClassControlLetter = function(state) {
  var ch = state.current();
  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {
    state.lastIntValue = ch % 0x20;
    state.advance();
    return true
  }
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
pp$8.regexp_eatHexEscapeSequence = function(state) {
  var start = state.pos;
  if (state.eat(0x78 /* x */)) {
    if (this.regexp_eatFixedHexDigits(state, 2)) {
      return true
    }
    if (state.switchU) {
      state.raise("Invalid escape");
    }
    state.pos = start;
  }
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits
pp$8.regexp_eatDecimalDigits = function(state) {
  var start = state.pos;
  var ch = 0;
  state.lastIntValue = 0;
  while (isDecimalDigit(ch = state.current())) {
    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
    state.advance();
  }
  return state.pos !== start
};
function isDecimalDigit(ch) {
  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */
}

// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits
pp$8.regexp_eatHexDigits = function(state) {
  var start = state.pos;
  var ch = 0;
  state.lastIntValue = 0;
  while (isHexDigit(ch = state.current())) {
    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
    state.advance();
  }
  return state.pos !== start
};
function isHexDigit(ch) {
  return (
    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||
    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||
    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)
  )
}
function hexToInt(ch) {
  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {
    return 10 + (ch - 0x41 /* A */)
  }
  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {
    return 10 + (ch - 0x61 /* a */)
  }
  return ch - 0x30 /* 0 */
}

// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence
// Allows only 0-377(octal) i.e. 0-255(decimal).
pp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {
  if (this.regexp_eatOctalDigit(state)) {
    var n1 = state.lastIntValue;
    if (this.regexp_eatOctalDigit(state)) {
      var n2 = state.lastIntValue;
      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
      } else {
        state.lastIntValue = n1 * 8 + n2;
      }
    } else {
      state.lastIntValue = n1;
    }
    return true
  }
  return false
};

// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit
pp$8.regexp_eatOctalDigit = function(state) {
  var ch = state.current();
  if (isOctalDigit(ch)) {
    state.lastIntValue = ch - 0x30; /* 0 */
    state.advance();
    return true
  }
  state.lastIntValue = 0;
  return false
};
function isOctalDigit(ch) {
  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */
}

// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits
// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit
// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
pp$8.regexp_eatFixedHexDigits = function(state, length) {
  var start = state.pos;
  state.lastIntValue = 0;
  for (var i = 0; i < length; ++i) {
    var ch = state.current();
    if (!isHexDigit(ch)) {
      state.pos = start;
      return false
    }
    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
    state.advance();
  }
  return true
};

// Object type used to represent tokens. Note that normally, tokens
// simply exist as properties on the parser object. This is only
// used for the onToken callback and the external tokenizer.

var Token = function Token(p) {
  this.type = p.type;
  this.value = p.value;
  this.start = p.start;
  this.end = p.end;
  if (p.options.locations)
    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }
  if (p.options.ranges)
    { this.range = [p.start, p.end]; }
};

// ## Tokenizer

var pp$9 = Parser.prototype;

// Move to the next token

pp$9.next = function(ignoreEscapeSequenceInKeyword) {
  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)
    { this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword); }
  if (this.options.onToken)
    { this.options.onToken(new Token(this)); }

  this.lastTokEnd = this.end;
  this.lastTokStart = this.start;
  this.lastTokEndLoc = this.endLoc;
  this.lastTokStartLoc = this.startLoc;
  this.nextToken();
};

pp$9.getToken = function() {
  this.next();
  return new Token(this)
};

// If we're in an ES6 environment, make parsers iterable
if (typeof Symbol !== "undefined")
  { pp$9[Symbol.iterator] = function() {
    var this$1$1 = this;

    return {
      next: function () {
        var token = this$1$1.getToken();
        return {
          done: token.type === types.eof,
          value: token
        }
      }
    }
  }; }

// Toggle strict mode. Re-reads the next number or string to please
// pedantic tests (`"use strict"; 010;` should fail).

// Read a single token, updating the parser object's token-related
// properties.

pp$9.nextToken = function() {
  var curContext = this.curContext();
  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }

  this.start = this.pos;
  if (this.options.locations) { this.startLoc = this.curPosition(); }
  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }

  if (curContext.override) { return curContext.override(this) }
  else { this.readToken(this.fullCharCodeAtPos()); }
};

pp$9.readToken = function(code) {
  // Identifier or keyword. '\uXXXX' sequences are allowed in
  // identifiers, so '\' also dispatches to that.
  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */)
    { return this.readWord() }

  return this.getTokenFromCode(code)
};

pp$9.fullCharCodeAtPos = function() {
  var code = this.input.charCodeAt(this.pos);
  if (code <= 0xd7ff || code >= 0xdc00) { return code }
  var next = this.input.charCodeAt(this.pos + 1);
  return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00
};

pp$9.skipBlockComment = function() {
  var startLoc = this.options.onComment && this.curPosition();
  var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
  if (end === -1) { this.raise(this.pos - 2, "Unterminated comment"); }
  this.pos = end + 2;
  if (this.options.locations) {
    lineBreakG.lastIndex = start;
    var match;
    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
      ++this.curLine;
      this.lineStart = match.index + match[0].length;
    }
  }
  if (this.options.onComment)
    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,
                           startLoc, this.curPosition()); }
};

pp$9.skipLineComment = function(startSkip) {
  var start = this.pos;
  var startLoc = this.options.onComment && this.curPosition();
  var ch = this.input.charCodeAt(this.pos += startSkip);
  while (this.pos < this.input.length && !isNewLine(ch)) {
    ch = this.input.charCodeAt(++this.pos);
  }
  if (this.options.onComment)
    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,
                           startLoc, this.curPosition()); }
};

// Called at the start of the parse and after every token. Skips
// whitespace and comments, and.

pp$9.skipSpace = function() {
  loop: while (this.pos < this.input.length) {
    var ch = this.input.charCodeAt(this.pos);
    switch (ch) {
    case 32: case 160: // ' '
      ++this.pos;
      break
    case 13:
      if (this.input.charCodeAt(this.pos + 1) === 10) {
        ++this.pos;
      }
    case 10: case 8232: case 8233:
      ++this.pos;
      if (this.options.locations) {
        ++this.curLine;
        this.lineStart = this.pos;
      }
      break
    case 47: // '/'
      switch (this.input.charCodeAt(this.pos + 1)) {
      case 42: // '*'
        this.skipBlockComment();
        break
      case 47:
        this.skipLineComment(2);
        break
      default:
        break loop
      }
      break
    default:
      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
        ++this.pos;
      } else {
        break loop
      }
    }
  }
};

// Called at the end of every token. Sets `end`, `val`, and
// maintains `context` and `exprAllowed`, and skips the space after
// the token, so that the next one's `start` will point at the
// right position.

pp$9.finishToken = function(type, val) {
  this.end = this.pos;
  if (this.options.locations) { this.endLoc = this.curPosition(); }
  var prevType = this.type;
  this.type = type;
  this.value = val;

  this.updateContext(prevType);
};

// ### Token reading

// This is the function that is called to fetch the next token. It
// is somewhat obscure, because it works in character codes rather
// than characters, and because operator parsing has been inlined
// into it.
//
// All in the name of speed.
//
pp$9.readToken_dot = function() {
  var next = this.input.charCodeAt(this.pos + 1);
  if (next >= 48 && next <= 57) { return this.readNumber(true) }
  var next2 = this.input.charCodeAt(this.pos + 2);
  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'
    this.pos += 3;
    return this.finishToken(types.ellipsis)
  } else {
    ++this.pos;
    return this.finishToken(types.dot)
  }
};

pp$9.readToken_slash = function() { // '/'
  var next = this.input.charCodeAt(this.pos + 1);
  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }
  if (next === 61) { return this.finishOp(types.assign, 2) }
  return this.finishOp(types.slash, 1)
};

pp$9.readToken_mult_modulo_exp = function(code) { // '%*'
  var next = this.input.charCodeAt(this.pos + 1);
  var size = 1;
  var tokentype = code === 42 ? types.star : types.modulo;

  // exponentiation operator ** and **=
  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
    ++size;
    tokentype = types.starstar;
    next = this.input.charCodeAt(this.pos + 2);
  }

  if (next === 61) { return this.finishOp(types.assign, size + 1) }
  return this.finishOp(tokentype, size)
};

pp$9.readToken_pipe_amp = function(code) { // '|&'
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === code) {
    if (this.options.ecmaVersion >= 12) {
      var next2 = this.input.charCodeAt(this.pos + 2);
      if (next2 === 61) { return this.finishOp(types.assign, 3) }
    }
    return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2)
  }
  if (next === 61) { return this.finishOp(types.assign, 2) }
  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)
};

pp$9.readToken_caret = function() { // '^'
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === 61) { return this.finishOp(types.assign, 2) }
  return this.finishOp(types.bitwiseXOR, 1)
};

pp$9.readToken_plus_min = function(code) { // '+-'
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === code) {
    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&
        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
      // A `-->` line comment
      this.skipLineComment(3);
      this.skipSpace();
      return this.nextToken()
    }
    return this.finishOp(types.incDec, 2)
  }
  if (next === 61) { return this.finishOp(types.assign, 2) }
  return this.finishOp(types.plusMin, 1)
};

pp$9.readToken_lt_gt = function(code) { // '<>'
  var next = this.input.charCodeAt(this.pos + 1);
  var size = 1;
  if (next === code) {
    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }
    return this.finishOp(types.bitShift, size)
  }
  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&
      this.input.charCodeAt(this.pos + 3) === 45) {
    // `<!--`, an XML-style comment that should be interpreted as a line comment
    this.skipLineComment(4);
    this.skipSpace();
    return this.nextToken()
  }
  if (next === 61) { size = 2; }
  return this.finishOp(types.relational, size)
};

pp$9.readToken_eq_excl = function(code) { // '=!'
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }
  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'
    this.pos += 2;
    return this.finishToken(types.arrow)
  }
  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)
};

pp$9.readToken_question = function() { // '?'
  var ecmaVersion = this.options.ecmaVersion;
  if (ecmaVersion >= 11) {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === 46) {
      var next2 = this.input.charCodeAt(this.pos + 2);
      if (next2 < 48 || next2 > 57) { return this.finishOp(types.questionDot, 2) }
    }
    if (next === 63) {
      if (ecmaVersion >= 12) {
        var next2$1 = this.input.charCodeAt(this.pos + 2);
        if (next2$1 === 61) { return this.finishOp(types.assign, 3) }
      }
      return this.finishOp(types.coalesce, 2)
    }
  }
  return this.finishOp(types.question, 1)
};

pp$9.readToken_numberSign = function() { // '#'
  var ecmaVersion = this.options.ecmaVersion;
  var code = 35; // '#'
  if (ecmaVersion >= 13) {
    ++this.pos;
    code = this.fullCharCodeAtPos();
    if (isIdentifierStart(code, true) || code === 92 /* '\' */) {
      return this.finishToken(types.privateId, this.readWord1())
    }
  }

  this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
};

pp$9.getTokenFromCode = function(code) {
  switch (code) {
  // The interpretation of a dot depends on whether it is followed
  // by a digit or another two dots.
  case 46: // '.'
    return this.readToken_dot()

  // Punctuation tokens.
  case 40: ++this.pos; return this.finishToken(types.parenL)
  case 41: ++this.pos; return this.finishToken(types.parenR)
  case 59: ++this.pos; return this.finishToken(types.semi)
  case 44: ++this.pos; return this.finishToken(types.comma)
  case 91: ++this.pos; return this.finishToken(types.bracketL)
  case 93: ++this.pos; return this.finishToken(types.bracketR)
  case 123: ++this.pos; return this.finishToken(types.braceL)
  case 125: ++this.pos; return this.finishToken(types.braceR)
  case 58: ++this.pos; return this.finishToken(types.colon)

  case 96: // '`'
    if (this.options.ecmaVersion < 6) { break }
    ++this.pos;
    return this.finishToken(types.backQuote)

  case 48: // '0'
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number
    if (this.options.ecmaVersion >= 6) {
      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number
      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number
    }

  // Anything else beginning with a digit is an integer, octal
  // number, or float.
  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
    return this.readNumber(false)

  // Quotes produce strings.
  case 34: case 39: // '"', "'"
    return this.readString(code)

  // Operators are parsed inline in tiny state machines. '=' (61) is
  // often referred to. `finishOp` simply skips the amount of
  // characters it is given as second argument, and returns a token
  // of the type given by its first argument.

  case 47: // '/'
    return this.readToken_slash()

  case 37: case 42: // '%*'
    return this.readToken_mult_modulo_exp(code)

  case 124: case 38: // '|&'
    return this.readToken_pipe_amp(code)

  case 94: // '^'
    return this.readToken_caret()

  case 43: case 45: // '+-'
    return this.readToken_plus_min(code)

  case 60: case 62: // '<>'
    return this.readToken_lt_gt(code)

  case 61: case 33: // '=!'
    return this.readToken_eq_excl(code)

  case 63: // '?'
    return this.readToken_question()

  case 126: // '~'
    return this.finishOp(types.prefix, 1)

  case 35: // '#'
    return this.readToken_numberSign()
  }

  this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
};

pp$9.finishOp = function(type, size) {
  var str = this.input.slice(this.pos, this.pos + size);
  this.pos += size;
  return this.finishToken(type, str)
};

pp$9.readRegexp = function() {
  var escaped, inClass, start = this.pos;
  for (;;) {
    if (this.pos >= this.input.length) { this.raise(start, "Unterminated regular expression"); }
    var ch = this.input.charAt(this.pos);
    if (lineBreak.test(ch)) { this.raise(start, "Unterminated regular expression"); }
    if (!escaped) {
      if (ch === "[") { inClass = true; }
      else if (ch === "]" && inClass) { inClass = false; }
      else if (ch === "/" && !inClass) { break }
      escaped = ch === "\\";
    } else { escaped = false; }
    ++this.pos;
  }
  var pattern = this.input.slice(start, this.pos);
  ++this.pos;
  var flagsStart = this.pos;
  var flags = this.readWord1();
  if (this.containsEsc) { this.unexpected(flagsStart); }

  // Validate pattern
  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
  state.reset(start, pattern, flags);
  this.validateRegExpFlags(state);
  this.validateRegExpPattern(state);

  // Create Literal#value property value.
  var value = null;
  try {
    value = new RegExp(pattern, flags);
  } catch (e) {
    // ESTree requires null if it failed to instantiate RegExp object.
    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral
  }

  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})
};

// Read an integer in the given radix. Return null if zero digits
// were read, the integer value otherwise. When `len` is given, this
// will return `null` unless the integer has exactly `len` digits.

pp$9.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
  // `len` is used for character escape sequences. In that case, disallow separators.
  var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;

  // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)
  // and isn't fraction part nor exponent part. In that case, if the first digit
  // is zero then disallow separators.
  var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;

  var start = this.pos, total = 0, lastCode = 0;
  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {
    var code = this.input.charCodeAt(this.pos), val = (void 0);

    if (allowSeparators && code === 95) {
      if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"); }
      if (lastCode === 95) { this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"); }
      if (i === 0) { this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"); }
      lastCode = code;
      continue
    }

    if (code >= 97) { val = code - 97 + 10; } // a
    else if (code >= 65) { val = code - 65 + 10; } // A
    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9
    else { val = Infinity; }
    if (val >= radix) { break }
    lastCode = code;
    total = total * radix + val;
  }

  if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"); }
  if (this.pos === start || len != null && this.pos - start !== len) { return null }

  return total
};

function stringToNumber(str, isLegacyOctalNumericLiteral) {
  if (isLegacyOctalNumericLiteral) {
    return parseInt(str, 8)
  }

  // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.
  return parseFloat(str.replace(/_/g, ""))
}

function stringToBigInt(str) {
  if (typeof BigInt !== "function") {
    return null
  }

  // `BigInt(value)` throws syntax error if the string contains numeric separators.
  return BigInt(str.replace(/_/g, ""))
}

pp$9.readRadixNumber = function(radix) {
  var start = this.pos;
  this.pos += 2; // 0x
  var val = this.readInt(radix);
  if (val == null) { this.raise(this.start + 2, "Expected number in radix " + radix); }
  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
    val = stringToBigInt(this.input.slice(start, this.pos));
    ++this.pos;
  } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
  return this.finishToken(types.num, val)
};

// Read an integer, octal integer, or floating-point number.

pp$9.readNumber = function(startsWithDot) {
  var start = this.pos;
  if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, "Invalid number"); }
  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
  if (octal && this.strict) { this.raise(start, "Invalid number"); }
  var next = this.input.charCodeAt(this.pos);
  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
    var val$1 = stringToBigInt(this.input.slice(start, this.pos));
    ++this.pos;
    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
    return this.finishToken(types.num, val$1)
  }
  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }
  if (next === 46 && !octal) { // '.'
    ++this.pos;
    this.readInt(10);
    next = this.input.charCodeAt(this.pos);
  }
  if ((next === 69 || next === 101) && !octal) { // 'eE'
    next = this.input.charCodeAt(++this.pos);
    if (next === 43 || next === 45) { ++this.pos; } // '+-'
    if (this.readInt(10) === null) { this.raise(start, "Invalid number"); }
  }
  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }

  var val = stringToNumber(this.input.slice(start, this.pos), octal);
  return this.finishToken(types.num, val)
};

// Read a string value, interpreting backslash-escapes.

pp$9.readCodePoint = function() {
  var ch = this.input.charCodeAt(this.pos), code;

  if (ch === 123) { // '{'
    if (this.options.ecmaVersion < 6) { this.unexpected(); }
    var codePos = ++this.pos;
    code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
    ++this.pos;
    if (code > 0x10FFFF) { this.invalidStringToken(codePos, "Code point out of bounds"); }
  } else {
    code = this.readHexChar(4);
  }
  return code
};

function codePointToString$1(code) {
  // UTF-16 Decoding
  if (code <= 0xFFFF) { return String.fromCharCode(code) }
  code -= 0x10000;
  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)
}

pp$9.readString = function(quote) {
  var out = "", chunkStart = ++this.pos;
  for (;;) {
    if (this.pos >= this.input.length) { this.raise(this.start, "Unterminated string constant"); }
    var ch = this.input.charCodeAt(this.pos);
    if (ch === quote) { break }
    if (ch === 92) { // '\'
      out += this.input.slice(chunkStart, this.pos);
      out += this.readEscapedChar(false);
      chunkStart = this.pos;
    } else if (ch === 0x2028 || ch === 0x2029) {
      if (this.options.ecmaVersion < 10) { this.raise(this.start, "Unterminated string constant"); }
      ++this.pos;
      if (this.options.locations) {
        this.curLine++;
        this.lineStart = this.pos;
      }
    } else {
      if (isNewLine(ch)) { this.raise(this.start, "Unterminated string constant"); }
      ++this.pos;
    }
  }
  out += this.input.slice(chunkStart, this.pos++);
  return this.finishToken(types.string, out)
};

// Reads template string tokens.

var INVALID_TEMPLATE_ESCAPE_ERROR = {};

pp$9.tryReadTemplateToken = function() {
  this.inTemplateElement = true;
  try {
    this.readTmplToken();
  } catch (err) {
    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
      this.readInvalidTemplateToken();
    } else {
      throw err
    }
  }

  this.inTemplateElement = false;
};

pp$9.invalidStringToken = function(position, message) {
  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
    throw INVALID_TEMPLATE_ESCAPE_ERROR
  } else {
    this.raise(position, message);
  }
};

pp$9.readTmplToken = function() {
  var out = "", chunkStart = this.pos;
  for (;;) {
    if (this.pos >= this.input.length) { this.raise(this.start, "Unterminated template"); }
    var ch = this.input.charCodeAt(this.pos);
    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'
      if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {
        if (ch === 36) {
          this.pos += 2;
          return this.finishToken(types.dollarBraceL)
        } else {
          ++this.pos;
          return this.finishToken(types.backQuote)
        }
      }
      out += this.input.slice(chunkStart, this.pos);
      return this.finishToken(types.template, out)
    }
    if (ch === 92) { // '\'
      out += this.input.slice(chunkStart, this.pos);
      out += this.readEscapedChar(true);
      chunkStart = this.pos;
    } else if (isNewLine(ch)) {
      out += this.input.slice(chunkStart, this.pos);
      ++this.pos;
      switch (ch) {
      case 13:
        if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }
      case 10:
        out += "\n";
        break
      default:
        out += String.fromCharCode(ch);
        break
      }
      if (this.options.locations) {
        ++this.curLine;
        this.lineStart = this.pos;
      }
      chunkStart = this.pos;
    } else {
      ++this.pos;
    }
  }
};

// Reads a template token to search for the end, without validating any escape sequences
pp$9.readInvalidTemplateToken = function() {
  for (; this.pos < this.input.length; this.pos++) {
    switch (this.input[this.pos]) {
    case "\\":
      ++this.pos;
      break

    case "$":
      if (this.input[this.pos + 1] !== "{") {
        break
      }
    // falls through

    case "`":
      return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos))

    // no default
    }
  }
  this.raise(this.start, "Unterminated template");
};

// Used to read escaped characters

pp$9.readEscapedChar = function(inTemplate) {
  var ch = this.input.charCodeAt(++this.pos);
  ++this.pos;
  switch (ch) {
  case 110: return "\n" // 'n' -> '\n'
  case 114: return "\r" // 'r' -> '\r'
  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'
  case 117: return codePointToString$1(this.readCodePoint()) // 'u'
  case 116: return "\t" // 't' -> '\t'
  case 98: return "\b" // 'b' -> '\b'
  case 118: return "\u000b" // 'v' -> '\u000b'
  case 102: return "\f" // 'f' -> '\f'
  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\r\n'
  case 10: // ' \n'
    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }
    return ""
  case 56:
  case 57:
    if (this.strict) {
      this.invalidStringToken(
        this.pos - 1,
        "Invalid escape sequence"
      );
    }
    if (inTemplate) {
      var codePos = this.pos - 1;

      this.invalidStringToken(
        codePos,
        "Invalid escape sequence in template string"
      );

      return null
    }
  default:
    if (ch >= 48 && ch <= 55) {
      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
      var octal = parseInt(octalStr, 8);
      if (octal > 255) {
        octalStr = octalStr.slice(0, -1);
        octal = parseInt(octalStr, 8);
      }
      this.pos += octalStr.length - 1;
      ch = this.input.charCodeAt(this.pos);
      if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
        this.invalidStringToken(
          this.pos - 1 - octalStr.length,
          inTemplate
            ? "Octal literal in template string"
            : "Octal literal in strict mode"
        );
      }
      return String.fromCharCode(octal)
    }
    if (isNewLine(ch)) {
      // Unicode new line characters after \ get removed from output in both
      // template literals and strings
      return ""
    }
    return String.fromCharCode(ch)
  }
};

// Used to read character escape sequences ('\x', '\u', '\U').

pp$9.readHexChar = function(len) {
  var codePos = this.pos;
  var n = this.readInt(16, len);
  if (n === null) { this.invalidStringToken(codePos, "Bad character escape sequence"); }
  return n
};

// Read an identifier, and return it as a string. Sets `this.containsEsc`
// to whether the word contained a '\u' escape.
//
// Incrementally adds only escaped chars, adding other chunks as-is
// as a micro-optimization.

pp$9.readWord1 = function() {
  this.containsEsc = false;
  var word = "", first = true, chunkStart = this.pos;
  var astral = this.options.ecmaVersion >= 6;
  while (this.pos < this.input.length) {
    var ch = this.fullCharCodeAtPos();
    if (isIdentifierChar(ch, astral)) {
      this.pos += ch <= 0xffff ? 1 : 2;
    } else if (ch === 92) { // "\"
      this.containsEsc = true;
      word += this.input.slice(chunkStart, this.pos);
      var escStart = this.pos;
      if (this.input.charCodeAt(++this.pos) !== 117) // "u"
        { this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"); }
      ++this.pos;
      var esc = this.readCodePoint();
      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))
        { this.invalidStringToken(escStart, "Invalid Unicode escape"); }
      word += codePointToString$1(esc);
      chunkStart = this.pos;
    } else {
      break
    }
    first = false;
  }
  return word + this.input.slice(chunkStart, this.pos)
};

// Read an identifier or keyword token. Will check for reserved
// words when necessary.

pp$9.readWord = function() {
  var word = this.readWord1();
  var type = types.name;
  if (this.keywords.test(word)) {
    type = keywords$1[word];
  }
  return this.finishToken(type, word)
};

// Acorn is a tiny, fast JavaScript parser written in JavaScript.

var version = "8.5.0";

Parser.acorn = {
  Parser: Parser,
  version: version,
  defaultOptions: defaultOptions,
  Position: Position,
  SourceLocation: SourceLocation,
  getLineInfo: getLineInfo,
  Node: Node,
  TokenType: TokenType,
  tokTypes: types,
  keywordTypes: keywords$1,
  TokContext: TokContext,
  tokContexts: types$1,
  isIdentifierChar: isIdentifierChar,
  isIdentifierStart: isIdentifierStart,
  Token: Token,
  isNewLine: isNewLine,
  lineBreak: lineBreak,
  lineBreakG: lineBreakG,
  nonASCIIwhitespace: nonASCIIwhitespace
};

// The main exported interface (under `self.acorn` when in the
// browser) is a `parse` function that takes a code string and
// returns an abstract syntax tree as specified by [Mozilla parser
// API][api].
//
// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

function parse(input, options) {
  return Parser.parse(input, options)
}

/* SkribiErrors are for handling errors that are expected to potentially result during normal use. */
/* Generic SkribiError */
class SkribiError extends Error {
    constructor(msg) {
        super(msg);
        this.hasData = true; // flags the object to be passed whole in processor error handling
        this._sk_invocation = null; // The invocating text, if extant (null for template compilation errors)
        this._sk_template = null; // The source text of the parent template, if extant
        this._sk_errorPacket = null;
        this.regentClass = REGENT_CLS.error; // Used for an error to specify a regent class
        this.name = "SkribiError";
    }
}
function skInternalError(name, message, err) {
    if (String.isString(name)) {
        return Object.assign(new SkribiError("Internal Error"), { name: name, message: message !== null && message !== void 0 ? message : "", err: err !== null && err !== void 0 ? err : null });
    }
    else
        return Object.assign(new SkribiError("Internal Error"), name);
}
/* For handling SyntaxErrors thrown during skribi compilation. */
class SkribiSyntaxError extends SkribiError {
    constructor() {
        super(...arguments);
        this.regentClass = REGENT_CLS.syntax_js;
    }
}
/* For EtaErrs. Thrown during EtaHandler.getCached() */
class SkribiEtaSyntaxError extends SkribiError {
    constructor() {
        super(...arguments);
        this.name = "EtaSyntaxError";
        this.regentClass = REGENT_CLS.syntax_eta;
    }
}
/* For handling any errors thrown during skribi evaluation. */
class SkribiEvalError extends SkribiError {
}
/* Logs an error to the console with appropriate error-specific formatting. */
function logError(err) {
    if (window.app.plugins.plugins["obsidian-skribi"].settings.errorLogging) {
        if (err instanceof SkribiError) {
            if (err instanceof SkribiSyntaxError) {
                console.warn(`SkribiError: syntax error! Displaying info...`, EBAR, err.parseError);
            }
            else if (err instanceof SkribiEvalError) {
                console.warn(`Skribi: eval error! Displaying content and error...`, EBAR, err.evalError);
            }
            else {
                console.warn(`Skribi render threw error! Displaying content and error...`, EBAR, err);
            }
        }
        else if ((err === null || err === void 0 ? void 0 : err.name) == "Eta Error") {
            console.warn(`Skribi: eta syntax error! Displaying info...`, EBAR, err);
        }
        else {
            console.warn(`Skribi render threw error! Displaying content and error...`, EBAR, err);
        }
    }
}

/** Adds the entries of scope to a function string.
* @param functionString A string function compiled by Eta's compileToString()
* @param keys Array of keys that the returned function will expect to be present in its scope argument
* @param async If true, returned function will be asynchronous */
function compileWith(functionString, keys, async) {
    var _a, _b, _c;
    var a = "";
    for (let k of keys) {
        a += `${k},`;
    }
    let func = `var {${a.substr(0, a.length - 1)}} = scope\n` + functionString;
    let constructor = (async) ? getAsyncConstructor() : Function;
    // let compiled = new constructor('scope', func)
    var compiled = null;
    try {
        let c = new constructor('scope', func);
        if (c) {
            compiled = c;
        }
    }
    catch (constructorError) {
        if (((_a = Object.getPrototypeOf(constructorError)) === null || _a === void 0 ? void 0 : _a.name) == "SyntaxError") {
            /* If we get a SyntaxError when constructing the function,
              the stack is unhelpful, so we'll use a parser to find the error position. */
            let f = func;
            try {
                let pa = parse(f, {
                    ecmaVersion: 2020,
                    allowReturnOutsideFunction: true,
                    allowAwaitOutsideFunction: true,
                    // locations: true,
                    // sourceFile: func
                });
                console.log(pa);
            }
            catch (parseError) {
                if (((_b = Object.getPrototypeOf(parseError)) === null || _b === void 0 ? void 0 : _b.name) == "SyntaxError") {
                    // var util = require('util')
                    // console.log(util.inspect(parseError, true, 7, true))
                    // let m = (/\((\d*)(?:\:(\d*))\)/).exec(e)
                    (_c = parseError === null || parseError === void 0 ? void 0 : parseError.loc) === null || _c === void 0 ? void 0 : _c.line;
                    let s = f.split(/\r\n|\n/); //[parseInt(m[1])]
                    // console.log(f.charAt(parseError.raisedAt))
                    // console.log(f, s)
                    // console.log(s[m-1])
                    let skerr = new SkribiSyntaxError("SyntaxError during function construction");
                    Object.assign(skerr, {
                        constructorError: constructorError,
                        parseError: parseError,
                        packet: {
                            funcLines: s,
                            loc: parseError === null || parseError === void 0 ? void 0 : parseError.loc,
                            raisedAt: parseError === null || parseError === void 0 ? void 0 : parseError.raisedAt,
                            pos: parseError === null || parseError === void 0 ? void 0 : parseError.pos
                        }
                    });
                    throw skerr;
                }
            }
        }
    }
    // console.log(compiled)
    /*
    var util = require('util');
    var vm = require('vm');
    let be = func //js_beautify(func)
    var sandbox: any = {out: null, e: null, str: be, con: constructor};
    var src = "try { out = new con('scope', str) } catch (err) {e = err}";
    vm.runInNewContext(src , sandbox, 'myfile.vm');
    // console.log(util.inspect(sandbox));
    // console.log(sandbox?.['e'])
    // console.log(sandbox)
    if (sandbox?.['e']) throw (sandbox?.e?.msg + EBAR + be)//sandbox['e']
    // console.log(sandbox['out'])
    return sandbox['out']
    */
    return compiled;
}

/* Version of Eta's render function, modified to handle scoped templates */
function renderEta(handler, template, data, config, cb, scope, binder) {
    const options = getConfig(config || {});
    const prepErr = (err, func) => {
        var _a;
        let evalErr = new SkribiEvalError(`${(_a = err === null || err === void 0 ? void 0 : err.name) !== null && _a !== void 0 ? _a : "Error"} during function evaluation`);
        Object.assign(evalErr, {
            _sk_function: func.toString(),
            evalError: err
        });
        return evalErr;
    };
    const gcf = handler.getCached(template, options, scope, binder);
    var ret = null;
    if (options.async) {
        ret = new Promise((resolve) => {
            resolve(gcf.func(scope));
        }).catch((err) => {
            throw prepErr(err, gcf.unboundFunc);
        });
    }
    else {
        try {
            ret = gcf.func(scope);
        }
        catch (err) {
            throw prepErr(err, gcf.unboundFunc);
        }
    }
    return ret;
}

/*
 * Copyright 2019 Ben Gubler <nebrelbug@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
/* Modified slightly, so as to help the syntax error parser. */
function compileToString(str, config) {
    const buffer = parse$1(str, config);
    let res = "var tR='',__l,__lP" +
        (config.include ? ',include=E.include.bind(E)' : '') +
        (config.includeFile ? ',includeFile=E.includeFile.bind(E)' : '') +
        '\nfunction layout(p,d){__l=p;__lP=d}\n' +
        (config.useWith ? 'with(' + config.varName + '||{}){' : '') +
        compileScope(buffer, config) +
        (config.includeFile
            ? 'if(__l)tR=' +
                (config.async ? 'await ' : '') +
                `includeFile(__l,Object.assign(${config.varName},{body:tR},__lP))\n`
            : config.include
                ? 'if(__l)tR=' +
                    (config.async ? 'await ' : '') +
                    `include(__l,Object.assign(${config.varName},{body:tR},__lP))\n`
                : '') +
        /*'if(cb){cb(null,tR)}*/ 'return tR' +
        (config.useWith ? '}' : '');
    if (config.plugins) {
        for (let i = 0; i < config.plugins.length; i++) {
            const plugin = config.plugins[i];
            if (plugin.processFnString) {
                res = plugin.processFnString(res, config);
            }
        }
    }
    return res;
}
/* Modified slightly, so as to help the syntax error parser. */
function compileScope(buff, config) {
    let i = 0;
    const buffLength = buff.length;
    let returnStr = '';
    for (i; i < buffLength; i++) {
        const currentBlock = buff[i];
        if (typeof currentBlock === 'string') {
            const str = currentBlock;
            // we know string exists
            returnStr += "tR+='" + str + "';\n";
        }
        else {
            const type = currentBlock.t; // ~, s, !, ?, r
            let content = currentBlock.val || '';
            if (type === 'r') {
                // raw
                if (config.filter) {
                    content = 'E.filter(' + content + ')';
                }
                returnStr += 'tR+=' + content + conSemi(content) + '\n';
            }
            else if (type === 'i') {
                // interpolate
                if (config.filter) {
                    content = 'E.filter(' + content + ')';
                }
                if (config.autoEscape) {
                    content = 'E.e(' + content + ')';
                }
                returnStr += 'tR+=' + content + ';\n';
                // reference
            }
            else if (type === 'e') {
                // execute
                returnStr += content + ';\n'; // you need a \n in case you have <% } %>
            }
        }
    }
    return returnStr;
}
function conSemi(str) {
    return (str.endsWith(';') ? '' : ';');
}

class Provider {
    constructor(bus, id) {
        this.functions = new Map();
        this.initLoaded = false;
        this.isDirty = false;
        this.bus = bus;
        this.id = id;
    }
    createObject(...args) {
        return Object.assign({}, Object.fromEntries(this.functions));
    }
    init() {
        this.initLoaded = true;
        return Promise.resolve();
    }
    unload() { }
    reload() {
        return Promise.resolve();
    }
    /**
     * @param clean If true, provider.isDirty = false */
    setDirty(dirty, ...data) {
        this.isDirty = isExtant(dirty) ? dirty : true;
        this.bus.providerNotificationDirty(this, this.isDirty, ...data);
    }
    /* May be called without data. */
    postDirty(...args) { }
}
class ProviderPredicated extends Provider {
    constructor() {
        super(...arguments);
        this.predicatePluginName = '';
    }
    getPredicate() {
        var _a;
        return ((_a = this.bus.plugin.app.plugins.plugins) === null || _a === void 0 ? void 0 : _a[this.predicatePluginName]) || null;
    }
    /**
     * @returns true only when the predicate condition is met */
    predicateCheck() {
        return this.bus.plugin.app.plugins.enabledPlugins.has(this.predicatePluginName);
    }
    /**
     * @returns An error string describing the unmet predicate condition */
    predicateError() {
        return `Integration Module '${this.id}' not available, could not find required plugin: '${this.predicatePluginName}'`;
    }
}

function makeLines(fieldEl, linesIn, cb) {
    let lines = (Array.isArray(linesIn) ? linesIn : linesIn.split(/\r\n|\n/));
    for (let i = 0; i < lines.length; i++) {
        let lineEl = createDiv({ cls: "skribi-modal-error-field-line" });
        let numEl = lineEl.createDiv({ text: (i + 1).toString(), cls: "skribi-line-number" });
        let conEl = lineEl.createDiv({ text: lines[i], cls: "skribi-line-content" });
        fieldEl.append(lineEl);
        if (cb) {
            cb(i, { lineEl: lineEl, numEl: numEl, conEl: conEl });
        }
    }
}
function makeLinesTable(fieldEl, linesIn, cb) {
    let lines = (Array.isArray(linesIn) ? linesIn : linesIn.split(/\r\n|\n/));
    let tab = createEl('table', { cls: "skr-lines-table" });
    let colGroup = tab.createEl('colgroup');
    colGroup.append(createEl('col', { cls: 'skr-table-colnum' }), createEl('col', { cls: 'skr-table-colcon' }));
    for (let i = 0; i < lines.length; i++) {
        let row = tab.insertRow();
        let numCell = row.insertCell();
        let conCell = row.insertCell();
        numCell.addClass("skr-numcell");
        numCell.setText((i + 1).toString());
        conCell.addClass("skr-concell");
        conCell.setText(lines[i]);
        if (cb) {
            cb(i, { table: tab, row: row, num: numCell, con: conCell });
        }
    }
    fieldEl.append(tab);
}
function makeField(modalName, containerEl, name, wrap, startCollapsed, cb) {
    let fieldContainer = createDiv({ "cls": `skribi-modal-${modalName}-field-container` });
    let fieldTitle = (!wrap) ? fieldContainer.createDiv({ text: name, cls: `skribi-modal-${modalName}-field-title` }) : null;
    let fieldContent = fieldContainer.createDiv({ cls: `skribi-modal-${modalName}-field-content` });
    containerEl.append(fieldContainer);
    var col;
    if (wrap) {
        col = wrapCollapse(fieldContainer, startCollapsed, cb);
        col.collapseTitleTextEl.setText(name);
    }
    return {
        container: fieldContainer,
        title: fieldTitle !== null && fieldTitle !== void 0 ? fieldTitle : col.collapseTitleTextEl,
        content: fieldContent,
        col: col !== null && col !== void 0 ? col : null
    };
}
function wrapCollapse(el, startCollapsed, cb) {
    let oel = el;
    let col = new Collapsible(el, startCollapsed, cb);
    el.replaceWith(col.collapseEl);
    obsidian.setIcon(col.collapseIndicator, "right-triangle");
    col.collapseContentEl.append(oel);
    return col;
}
const COL_CLS = {
    COLLAPSIBLE: "skr-collapsible",
    COLLAPSIBLE_TITLEBAR: "skr-collapsible-titlebar",
    COLLAPSIBLE_CONTENT: "skr-collapsible-content",
    COLLAPSIBLE_TITLETEXT: "skr-collapsible-titletext",
    COLLAPSIBLE_INDICATOR: "skr-collapse-indicator",
    COLLAPSIBLE_IS_COLLAPSED: "is-collapsed"
};
class Collapsible {
    constructor(el, startCollapsed, cb) {
        this.collapseEl = createDiv({ cls: COL_CLS.COLLAPSIBLE });
        this.collapseTitleEl = this.collapseEl.createDiv({ cls: COL_CLS.COLLAPSIBLE_TITLEBAR });
        this.collapseContentEl = this.collapseEl.appendChild(createDiv({ cls: COL_CLS.COLLAPSIBLE_CONTENT }));
        this.collapseTitleTextEl = this.collapseTitleEl.createSpan({ cls: COL_CLS.COLLAPSIBLE_TITLETEXT });
        this.collapseIndicator = createSpan({ cls: COL_CLS.COLLAPSIBLE_INDICATOR });
        this.collapseTitleEl.prepend(this.collapseIndicator);
        if (startCollapsed) {
            this.collapseEl.addClass(COL_CLS.COLLAPSIBLE_IS_COLLAPSED);
            this.collapseContentEl.setAttribute("style", `max-height: 0px;`);
        }
        this.collapseTitleEl.addEventListener("click", (event) => {
            let t = event.target;
            if (!(t.nodeName === "BUTTON")) {
                let b = this.collapseEl.hasClass(COL_CLS.COLLAPSIBLE_IS_COLLAPSED);
                let h = b ? (el.clientHeight + (el.clientHeight * 0.2)) : 0;
                this.collapseContentEl.setAttribute("style", `max-height: ${h}px;`);
                this.collapseEl.toggleClass(COL_CLS.COLLAPSIBLE_IS_COLLAPSED, !b);
                if (cb)
                    cb(this.collapseEl.hasClass(COL_CLS.COLLAPSIBLE_IS_COLLAPSED));
            }
        });
        /* Calculate max height before first collapse */
        this.collapseTitleEl.addEventListener("mouseover", () => {
            if ((!this.collapseContentEl.hasAttribute("style")))
                this.collapseContentEl.setAttribute("style", `max-height: ${el.clientHeight + (el.clientHeight * 0.2)}px;`);
        });
    }
}

class IndexModal extends obsidian.Modal {
    constructor(plugin) {
        super(plugin.app);
        this.collapsedFields = {
            templates: false,
            failures: false,
            styles: false,
        };
        this.plugin = plugin;
        this.containerEl.addClass("skribi-modal-index");
        this.titleEl.setText("Skribi Template Index");
        this.fieldsDiv = createDiv({ cls: "skribi-modal-fields" });
        this.listenerRef = this.plugin.app.workspace.on('skribi:template-index-modified', () => this.regen());
    }
    // TODO: Create a pseudochild listener
    onOpen() {
        let refresh = new obsidian.Setting(this.contentEl);
        refresh.addButton((button) => button
            .setButtonText("Refresh Index")
            .onClick(() => this.regen()));
        let recomp = new obsidian.Setting(this.contentEl);
        recomp.addButton((button) => button
            .setButtonText("Recompile All")
            .onClick(() => {
            this.plugin.eta.recompileTemplates().then(() => {
                Array.from(this.plugin.children).forEach((child) => {
                    child.rerender();
                });
                this.regen();
            });
        }));
        this.contentEl.append(this.fieldsDiv);
        this.generateFields(this.fieldsDiv);
        this.contentEl.createSpan({ cls: 'skribi-modal-version-number', text: `SkribosPlugin ${this.app.plugins.plugins["obsidian-skribi"].manifest.version}` });
    }
    regen() {
        this.fieldsDiv.empty();
        this.generateFields(this.fieldsDiv);
    }
    onClose() {
        this.plugin.app.workspace.offref(this.listenerRef);
    }
    generateFields(el) {
        el.empty();
        var templates = this.plugin.eta.loader.templateCache;
        var failures = this.plugin.eta.loader.templateFailures;
        var styles = this.plugin.eta.loader.styleCache;
        let failuresLength = Object.keys(failures.cache).length;
        if (failuresLength > 0) {
            let failuresField = makeField("index", el, "Errored Templates", true, this.collapsedFields.failures, (state) => { this.collapsedFields.failures = state; });
            failuresField.title.textContent += ` (${failuresLength} Total)`;
            failuresField.content.addClass('skribi-index-list');
            //@ts-ignore
            for (let entry of Object.entries(failures.cache)) {
                let field = createDiv({ cls: ['skribi-index-entry', 'skribi-index-entry-failure'] });
                field.createDiv({ text: entry[1].extension, cls: ['skribi-index-entry-extension', `skribi-index-entry-extension-${entry[1].extension}`] });
                let label = field.createDiv({ text: entry[0], cls: 'skribi-index-entry-label' });
                if (entry[1].extension == "md") {
                    label.onClickEvent((e) => {
                        e.preventDefault();
                        this.plugin.app.workspace.openLinkText(entry[0], this.plugin.settings.templateFolder);
                        this.close();
                    });
                }
                else {
                    label.addClass('skribi-index-entry-label-nolink');
                }
                let r = createRegent({
                    class: REGENT_CLS.error,
                    label: 'sk',
                    hover: entry[1].error,
                    clear: true
                });
                makeErrorModalLink(r[0], entry[1].error);
                field.append(r[0]);
                failuresField.content.append(field);
            }
        }
        let templatesField = makeField("index", el, "Templates", true, this.collapsedFields.templates, (state) => { this.collapsedFields.templates = state; console.log(state, this.collapsedFields.templates); });
        templatesField.title.textContent += ` (${Object.keys(templates.cache).length} Total)`;
        //@ts-ignore
        for (let entry of Object.entries(templates.cache).reverse()) {
            let field = createDiv({ cls: 'skribi-index-entry' });
            field.createDiv({ text: entry[1].extension, cls: ['skribi-index-entry-extension', `skribi-index-entry-extension-${entry[1].extension}`] });
            let label = field.createDiv({ text: entry[0], cls: 'skribi-index-entry-label' });
            if (entry[1].extension == "md") {
                label.onClickEvent((e) => {
                    e.preventDefault();
                    this.plugin.app.workspace.openLinkText(entry[0], this.plugin.settings.templateFolder);
                    this.close();
                });
            }
            else {
                label.addClass('skribi-index-entry-label-nolink');
            }
            templatesField.content.append(field);
        }
        let stylesLength = Object.keys(styles.cache).length;
        if (stylesLength > 0) {
            let stylesField = makeField("index", el, "Style Snippets", true, this.collapsedFields.styles, (state) => { this.collapsedFields.styles = state; });
            stylesField.title.textContent += ` (${stylesLength} Total)`;
            //@ts-ignore
            for (let entry of Object.keys(styles.cache)) {
                let field = createDiv({ cls: 'skribi-index-entry' });
                field.createDiv({ text: "css", cls: ['skribi-index-entry-extension', `skribi-index-entry-extension-css`] });
                field.createDiv({ text: entry, cls: ['skribi-index-entry-label', 'skribi-index-entry-label-nolink'] });
                stylesField.content.append(field);
            }
        }
    }
}

class ErrorModal extends obsidian.Modal {
    constructor(app, error) {
        super(app);
        this.error = null;
        this.error = error;
    }
    /* TODO: make this more concise */
    /* TODO: also I should put most of this logic elsewhere so that the console logging can benefit from it */
    onOpen() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9;
        var util = require('util');
        let err = this.error;
        this.containerEl.addClass("skribi-modal-error");
        if (err instanceof SkribiError) {
            this.titleEl.innerText = ((_a = err === null || err === void 0 ? void 0 : err.name) !== null && _a !== void 0 ? _a : "SkribiError") + ": " + err.message;
            if (err instanceof SkribiSyntaxError) {
                let parseErrMsg = this.contentEl.createDiv({ cls: 'skribi-modal-error-parseErrMsg' });
                parseErrMsg.createSpan({ text: 'SyntaxError: ', cls: 'sk-label' });
                parseErrMsg.createSpan({ text: err.parseError.message, cls: 'sk-msg' });
                let compField = makeField("error", this.contentEl, "Compiled Function", true);
                let lines = err.packet.funcLines;
                let unrelated = [0, 1, 2, lines.length - 1, lines.length - 2];
                // console.log(getLineInfo(err.packet.funcLines.join("\n"), err.packet.pos))
                // let len = err.packet.raisedAt - err.packet.pos
                makeLinesTable(compField.content, lines, (ind, els) => {
                    if (unrelated.contains(ind)) {
                        els.row.addClass('skribi-line-extraneous');
                    }
                    if (ind == err.packet.loc.line - 1) {
                        let text = els.con.textContent;
                        let pre = text.substring(0, err.packet.loc.column - 1);
                        let char = text.substring(err.packet.loc.column - 1, err.packet.loc.column);
                        let post = text.substring(err.packet.loc.column);
                        // let pre = text.substring(0, err.packet.loc.column)
                        // let char = text.substring(err.packet.loc.column, )
                        // let post = text.substring(err.packet.loc.column + len)
                        // console.log(err.packet)
                        els.con.innerHTML = `<span>${pre}</span><span class="skr-err-ch">${char}</span><span>${post}</span>`;
                        // console.log([pre, char, post])
                        els.row.addClass('skribi-line-errored');
                        let pstr = "^".padStart(err.packet.loc.column);
                        let row = els.table.insertRow();
                        row.addClass("skribi-line-pointer");
                        let numCell = row.insertCell();
                        numCell.setText("@");
                        numCell.addClass("skr-numcell", "skr-pointer");
                        let conCell = row.insertCell();
                        conCell.setText(pstr);
                        conCell.addClass("skr-concell", "skr-pointer");
                    }
                });
                if (err === null || err === void 0 ? void 0 : err._sk_invocation) {
                    let srcField = makeField("error", this.contentEl, "Invocation String", true);
                    makeLinesTable(srcField.content, err === null || err === void 0 ? void 0 : err._sk_invocation.split(/\r\n|\n/));
                }
                if (err === null || err === void 0 ? void 0 : err._sk_template) {
                    let tempField = makeField("error", this.contentEl, "Template Source", true);
                    makeLinesTable(tempField.content, err._sk_template.split(/\r\n|\n/));
                }
                if ((_b = err.parseError) === null || _b === void 0 ? void 0 : _b.stack) {
                    let subErrField = makeField("error", this.contentEl, ((_d = (_c = err.parseError) === null || _c === void 0 ? void 0 : _c.name) !== null && _d !== void 0 ? _d : "UnknownError") + " Stack", true, true);
                    makeLinesTable(subErrField.content, err.parseError.stack);
                }
                else {
                    let inspect = util.inspect(err.parseError, true, 7);
                    console.log(inspect);
                    let subErrField = makeField("error", this.contentEl, ((_f = (_e = err.parseError) === null || _e === void 0 ? void 0 : _e.name) !== null && _f !== void 0 ? _f : "UnknownError") + " Inspection", true, true);
                    makeLinesTable(subErrField.content, inspect);
                }
                let errField = makeField("error", this.contentEl, err.name + " Stack", true, true);
                makeLinesTable(errField.content, err.stack);
            }
            else if (err instanceof SkribiEvalError) {
                let subErrorMessage = this.contentEl.createDiv({ cls: 'skribi-modal-error-message' });
                subErrorMessage.createSpan({ text: ((_h = (_g = err.evalError) === null || _g === void 0 ? void 0 : _g.name) !== null && _h !== void 0 ? _h : "UnknownError") + ": ", cls: 'sk-label' });
                subErrorMessage.createSpan({
                    text: (_k = (_j = err.evalError) === null || _j === void 0 ? void 0 : _j.message) !== null && _k !== void 0 ? _k : (String.isString(err.evalError) ? err.evalError : "unknown"),
                    cls: 'sk-msg'
                });
                // let errField = makeField(this.contentEl, err.evalError.name + ": " + err.evalError.message)
                // errField.content.setText(err.evalError.stack)
                var match = null;
                if ((_l = err.evalError) === null || _l === void 0 ? void 0 : _l.stack) {
                    /* This should find the position trace from certain types of errors */
                    match = (/eval at compileWith \([^\n]*,(?: \<[^\:]*\:(?<line>\d*)\:(?<ch>\d*))\)\n/).exec(err.evalError.stack);
                    // match = (/at Object.eval \([^\n]*,(?: \<[^\:]*\:(?<line>\d*)\:(?<ch>\d*))\)\n/).exec(err.evalError.stack)
                    // console.log(match)
                }
                let compField = makeField("error", this.contentEl, "Compiled Function", true, false);
                let lines = err._sk_function.toString().split(/\r\n|\n/);
                let unrelated = [0, 1, 2, 3, 4, lines.length - 1, lines.length - 2, lines.length - 3];
                makeLinesTable(compField.content, lines, isExtant(match) ? (ind, els) => {
                    if (unrelated.contains(ind)) {
                        els.row.addClass('skribi-line-extraneous');
                    }
                    if (ind == match.groups.line - 1) {
                        let text = els.con.textContent;
                        let pre = text.substring(0, match.groups.ch - 1);
                        let char = text.substring(match.groups.ch - 1, match.groups.ch);
                        let post = text.substring(match.groups.ch);
                        // let tokens = [...tokenizer(lines[ind].substr(match.groups.ch-1), {"ecmaVersion": 2020})]
                        // console.log(tokens)
                        els.con.innerHTML = `<span>${pre}</span><span class="skr-err-ch">${char}</span><span>${post}</span>`;
                        // console.log([pre, char, post])
                        els.row.addClass('skribi-line-errored');
                        let pstr = "^".padStart(match.groups.ch);
                        let row = els.table.insertRow();
                        row.addClass("skribi-line-pointer");
                        let numCell = row.insertCell();
                        numCell.setText("@");
                        numCell.addClass("skr-numcell", "skr-pointer");
                        let conCell = row.insertCell();
                        conCell.setText(pstr);
                        conCell.addClass("skr-concell", "skr-pointer");
                    }
                } : undefined);
                let invField = makeField("error", this.contentEl, "Invocation String", true);
                makeLinesTable(invField.content, err._sk_invocation);
                if (err === null || err === void 0 ? void 0 : err._sk_template) {
                    let tempField = makeField("error", this.contentEl, "Template Source", true);
                    makeLinesTable(tempField.content, err._sk_template);
                }
                if ((_m = err.evalError) === null || _m === void 0 ? void 0 : _m.stack) {
                    let subErrField = makeField("error", this.contentEl, ((_p = (_o = err.evalError) === null || _o === void 0 ? void 0 : _o.name) !== null && _p !== void 0 ? _p : "UnknownError") + " Stack", true, true);
                    makeLinesTable(subErrField.content, err.evalError.stack);
                }
                else {
                    let inspect = util.inspect(err.evalError, true, 7);
                    // console.log(inspect)
                    let subErrField = makeField("error", this.contentEl, ((_r = (_q = err.evalError) === null || _q === void 0 ? void 0 : _q.name) !== null && _r !== void 0 ? _r : "UnknownError") + " Inspection", true, true);
                    makeLinesTable(subErrField.content, inspect);
                }
                let errField = makeField("error", this.contentEl, err.name + " Stack", true, true);
                makeLinesTable(errField.content, err.stack);
            }
            else if (err instanceof SkribiEtaSyntaxError) {
                console.log(err.packet);
                let invField = makeField("error", this.contentEl, "Details", true);
                if ((_s = err.packet) === null || _s === void 0 ? void 0 : _s.loc) {
                    makeLinesTable(invField.content, err.packet.loc.src, (ind, els) => {
                        if (ind == err.packet.loc.line - 1) {
                            let text = els.con.textContent;
                            let pre = text.substring(0, err.packet.loc.col - 1);
                            let char = text.substring(err.packet.loc.col - 1, err.packet.loc.col);
                            let post = text.substring(err.packet.loc.col);
                            // let pre = text.substring(0, err.packet.loc.column)
                            // let char = text.substring(err.packet.loc.column, )
                            // let post = text.substring(err.packet.loc.column + len)
                            // console.log(err.packet)
                            els.con.innerHTML = `<span>${pre}</span><span class="skr-err-ch">${char}</span><span>${post}</span>`;
                            // console.log([pre, char, post])
                            els.row.addClass('skribi-line-errored');
                            let pstr = "^".padStart(err.packet.loc.column);
                            let row = els.table.insertRow();
                            row.addClass("skribi-line-pointer");
                            let numCell = row.insertCell();
                            numCell.setText("@");
                            numCell.addClass("skr-numcell", "skr-pointer");
                            let conCell = row.insertCell();
                            conCell.setText(pstr);
                            conCell.addClass("skr-concell", "skr-pointer");
                        }
                    });
                }
                else {
                    makeLinesTable(invField.content, err.packet.stack);
                }
            }
            else {
                /* Generic SkribiError */
                if (err === null || err === void 0 ? void 0 : err._sk_templateFailure) {
                    /* The source template failed to compile */
                    let terr = err._sk_templateFailure;
                    let subErrorMessage = this.contentEl.createDiv({ cls: 'skribi-modal-error-message' });
                    subErrorMessage.createSpan({ text: `Compile Error for '${terr.id}': `, cls: 'sk-label' });
                    let s = subErrorMessage.createSpan({ cls: 'sk-msg' });
                    let r = createRegent({
                        class: REGENT_CLS.error,
                        label: 'sk',
                        hover: (terr.error instanceof SkribiError)
                            ? `${terr.error.name}: ${terr.error.message}`
                            : ((_t = terr.error.name) !== null && _t !== void 0 ? _t : "Error") + ": " + ((_x = (_v = (_u = terr.error) === null || _u === void 0 ? void 0 : _u.msg) !== null && _v !== void 0 ? _v : (_w = terr.error) === null || _w === void 0 ? void 0 : _w.message) !== null && _x !== void 0 ? _x : "Unknown Error"),
                        clear: true
                    });
                    makeErrorModalLink(r[0], terr.error);
                    s.append(r[0]);
                }
                else if (err === null || err === void 0 ? void 0 : err._sk_nullTemplate) {
                    /* An undefined template was requested*/
                    let subErrorMessage = this.contentEl.createDiv({ cls: 'skribi-modal-error-message' });
                    let span = subErrorMessage.createSpan({ text: `View Template Index`, cls: 'skr-button' });
                    span.addEventListener('click', (ev) => {
                        ev.preventDefault();
                        let p = new IndexModal(this.app.plugins.plugins["obsidian-skribi"]);
                        p.open();
                    });
                }
                else if (err === null || err === void 0 ? void 0 : err._sk_errorPacket) {
                    /* An internal error has occured that should be displayed */
                    let subErrorMessage = this.contentEl.createDiv({ cls: 'skribi-modal-error-message' });
                    subErrorMessage.createSpan({ text: err._sk_errorPacket.name, cls: 'sk-label' });
                    subErrorMessage.createSpan({ text: err._sk_errorPacket.message, cls: 'sk-msg' });
                    if ((_y = err._sk_errorPacket) === null || _y === void 0 ? void 0 : _y.err) {
                        if ((_z = err._sk_errorPacket.err) === null || _z === void 0 ? void 0 : _z.stack) {
                            let errField = makeField("error", this.contentEl, ((_1 = (_0 = err._sk_errorPacket.err) === null || _0 === void 0 ? void 0 : _0.name) !== null && _1 !== void 0 ? _1 : "UnknownError") + " Stack", true, true);
                            makeLinesTable(errField.content, err._sk_errorPacket.err.stack);
                        }
                    }
                }
                if (err === null || err === void 0 ? void 0 : err.el) {
                    this.contentEl.append(err.el);
                }
                if (err === null || err === void 0 ? void 0 : err.tip) {
                    this.contentEl.createDiv({ cls: ['skribi-modal-error-message', 'skr-tip'] })
                        .createSpan({ text: err.tip });
                }
                if (err === null || err === void 0 ? void 0 : err._sk_invocation) {
                    let invField = makeField("error", this.contentEl, "Invocation String", true);
                    makeLinesTable(invField.content, err._sk_invocation);
                }
                if (err === null || err === void 0 ? void 0 : err.stack) {
                    let errField = makeField("error", this.contentEl, err.name + " Stack", true, true);
                    makeLinesTable(errField.content, err.stack);
                }
                if (err === null || err === void 0 ? void 0 : err._sk_template) {
                    let tempField = makeField("error", this.contentEl, "Template Source", true);
                    makeLinesTable(tempField.content, err._sk_template);
                }
            }
        }
        else {
            /* Non-skribi error, type unknown (may not be instanceof Error) */
            let errField = makeField("error", this.contentEl, ((_2 = err === null || err === void 0 ? void 0 : err.name) !== null && _2 !== void 0 ? _2 : "Error") + ": " + ((_4 = (_3 = err === null || err === void 0 ? void 0 : err.msg) !== null && _3 !== void 0 ? _3 : err === null || err === void 0 ? void 0 : err.message) !== null && _4 !== void 0 ? _4 : "Unknown Error"));
            makeLinesTable(errField.content, (_6 = (_5 = err === null || err === void 0 ? void 0 : err.stack) !== null && _5 !== void 0 ? _5 : err) !== null && _6 !== void 0 ? _6 : "");
            if (err === null || err === void 0 ? void 0 : err._sk_function) {
                let compField = makeField("error", this.contentEl, "Compiled Function");
                compField.content.setText(err._sk_function);
            }
            if (err === null || err === void 0 ? void 0 : err._sk_invocation) {
                let srcField = makeField("error", this.contentEl, "Invocation String");
                makeLines(srcField.content, (_7 = err === null || err === void 0 ? void 0 : err._sk_invocation) !== null && _7 !== void 0 ? _7 : "");
            }
            if (!(err === null || err === void 0 ? void 0 : err.stack)) {
                let inspect = util.inspect(err, true, 7);
                let subErrField = makeField("error", this.contentEl, ((_9 = (_8 = err.evalError) === null || _8 === void 0 ? void 0 : _8.name) !== null && _9 !== void 0 ? _9 : "Unknown") + " Inspection", true, true);
                makeLinesTable(subErrField.content, inspect);
            }
        }
        this.contentEl.createSpan({ cls: 'skribi-modal-version-number', text: `SkribosPlugin ${this.app.plugins.plugins["obsidian-skribi"].manifest.version}` });
    }
}
function makeErrorModalLink(el, err) {
    el.addClass("has-link");
    el.addEventListener('click', (ev) => {
        ev.preventDefault();
        let p = new ErrorModal(window.app, err);
        p.open();
    });
    return el;
}

/** Replaces 'el'. */
function renderError(el, e) {
    var _a, _b, _c, _d, _e, _f;
    return __awaiter(this, void 0, void 0, function* () {
        if ((e === null || e === void 0 ? void 0 : e.flag) && e.flag == "abort") {
            return renderRegent(el, Object.assign({}, {
                class: REGENT_CLS.abort,
                label: 'sk',
                hover: 'Render Aborted'
            }, e));
        }
        else {
            var hover = "";
            if (e instanceof SkribiError) {
                hover = `${e.name}: ${e.message}`;
                if (e instanceof SkribiEvalError) {
                    hover += `\n${(_a = e.evalError) === null || _a === void 0 ? void 0 : _a.name}: ${(_b = e.evalError) === null || _b === void 0 ? void 0 : _b.message}`;
                }
                else if (e instanceof SkribiSyntaxError) {
                    hover += `\n${e.parseError.name}: ${e.parseError.message}`;
                }
            }
            else {
                hover = ((_c = e === null || e === void 0 ? void 0 : e.name) !== null && _c !== void 0 ? _c : "Error") + ": " + ((_e = (_d = e === null || e === void 0 ? void 0 : e.msg) !== null && _d !== void 0 ? _d : e === null || e === void 0 ? void 0 : e.message) !== null && _e !== void 0 ? _e : "Unknown Error");
            }
            let r = renderRegent(el, {
                class: (_f = e === null || e === void 0 ? void 0 : e.class) !== null && _f !== void 0 ? _f : REGENT_CLS.error,
                label: 'sk',
                hover: hover,
                clear: true
            });
            makeErrorModalLink(r, e);
            return r;
        }
    });
}
/** Mutates 'el'. */
function renderState(el, dataIn) {
    return __awaiter(this, void 0, void 0, function* () {
        let data = Object.assign({
            class: "state",
            label: "sk",
            clear: false,
            hover: ""
        }, dataIn || {});
        el.className = `${data.noRegent ? "" : REGENT_CLS.regent} ${data.class}`;
        el.setAttribute("title", data.hover);
    });
}
/** Creates an element. */
function createRegent(dataIn) {
    let data = Object.assign({
        class: REGENT_CLS.generic,
        label: "sk",
        clear: false,
        hover: ""
    }, dataIn || {});
    const pre = createEl("code", { cls: `${REGENT_CLS.regent} ${data.class}`, text: data.label });
    pre.setAttribute("title", data.hover);
    // regentIcon(pre, data?.icon ?? data.class)
    return [pre, data];
}
/** Replaces 'el'.*/
function renderRegent(el, dataIn) {
    let [pre, data] = createRegent(dataIn);
    if (data.clear)
        el.className = "";
    el.replaceWith(pre);
    return pre;
}

class ProviderSK extends Provider {
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.init.call(this);
        });
    }
    createObject() {
        return {
            render: function (str) {
                let e = createDiv({ cls: CLS.virtual });
                console.log(this);
                obsidian.MarkdownRenderer.renderMarkdown(str, e, this.ctx.file.path, null);
                return e.innerHTML;
            },
            has: function (v) {
                var _a, _b;
                return !((((_a = this.v) === null || _a === void 0 ? void 0 : _a[v]) == null) || (((_b = this.v) === null || _b === void 0 ? void 0 : _b[v]) == undefined));
            },
            abort: function (s) {
                String.isString(s)
                    ? { hasData: true, flag: 'abort', hover: s }
                    : Object.assign({ hasData: true, flag: 'abort' }, s);
                // throw abortPacket
                /*try {
                  //@ts-ignore
                  a.b.c += 0;
                } catch(e) {
                  console.log(e)
                }*/
                // console.log((new Error()).stack.split("\n")[2].trim().split(" ")[1])
                // console.log((new Error()).stack)
                throw new SkribiError("Abort");
            },
            getTemplateSource: function (s) {
                return makeInitPromise(this.child, () => {
                    var _a;
                    let has = this.ctx.plugin.eta.loader.styleCache.has(s);
                    if (!has) {
                        console.warn(`Skribi: getTemplateSource()\n Could not find requested template '${s}'\n`, this.child._c);
                    }
                    let c = this.ctx.plugin.eta.loader.templateCache.get(s);
                    if (has && !(c === null || c === void 0 ? void 0 : c.source)) {
                        console.warn(`Skribi: getTemplateSource()\n Template '${s}' found, but has no cached source\n`, this.child._c);
                    }
                    return (_a = c === null || c === void 0 ? void 0 : c.source) !== null && _a !== void 0 ? _a : null;
                });
            },
            getStyle: function (s) {
                return makeInitPromise(this.child, () => {
                    if (!this.ctx.plugin.eta.loader.styleCache.has(s)) {
                        console.warn(`Skribi: getStyle()\n Could not find requested style '${s}.css'\n`, this.child._c);
                    }
                    return this.ctx.plugin.eta.loader.styleCache.get(s);
                });
            },
            /**
             * @param styleSnip The ID of a .css file that is expected to be present in the style cache
             * @returns A promise for the scoped style (resolves on post) */
            includeStyle: function (styleSnip) {
                return __awaiter(this, void 0, void 0, function* () {
                    return makeInitPromise(this.child, () => __awaiter(this, void 0, void 0, function* () {
                        this.child._c.listenFor("style", styleSnip);
                        return this.child.addStyle(yield this.getStyle(styleSnip));
                    }));
                });
            },
            util: require('util'),
            createRegent: createRegent
        };
    }
}
function makeInitPromise(child, cb) {
    if (window.app.plugins.plugins['obsidian-skribi'].initLoaded) {
        return Promise.resolve(cb());
    }
    else
        return makeEventPromise(child, window.app.workspace, 'skribi:template-init-complete', cb);
}
function makeEventPromise(child, eventConstructor, eventName, cb) {
    return new Promise((resolve, reject) => {
        console.log("makeEventPromise", this);
        let x = eventConstructor.on(eventName, () => {
            eventConstructor.offref(x);
            resolve(cb());
        });
        child.registerEvent(x);
    });
}

class ProviderDataview extends ProviderPredicated {
    constructor() {
        super(...arguments);
        this.predicatePluginName = 'dataview';
        // createDynamic(state: DynamicState) {
        // let api = new DataviewInlineApi(this.dvp.index, state.child, state.el, this.bus.plugin.app, this.dvp.settings, state.file.path)
        // return this?.dvp?.api || null
        // }
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            // this.dvp = this.bus.plugin.app.plugins.plugins.dataview as DataviewPlugin || null
            this.eventRef_API_READY = this.bus.plugin.app.metadataCache.on('dataview:api-ready', (api) => { this.apiReady(); });
            return _super.init.call(this);
        });
    }
    unload() {
        this.bus.plugin.app.metadataCache.offref(this.eventRef_API_READY);
    }
    createObject() {
        var _a, _b;
        return ((_b = (_a = this.bus.plugin.app.plugins.plugins) === null || _a === void 0 ? void 0 : _a.dataview) === null || _b === void 0 ? void 0 : _b.api) || null;
    }
    apiReady() {
    }
}

class ProviderWeather extends ProviderPredicated {
    constructor() {
        super(...arguments);
        this.predicatePluginName = 'obsidian-weather';
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.eventRefs = {
                ready: this.bus.plugin.app.workspace.on("az-weather:api-ready", () => { }),
                unload: this.bus.plugin.app.workspace.on("az-weather:api-unload", () => { }),
                tick: this.bus.plugin.app.workspace.on("az-weather:api-tick", () => { })
            };
            this.functions.set("check", this.provide_predicate());
            this.functions.set("cache", this.provide_dispenseCache());
            this.functions.set("tickEventRef", this.provide_tickEventRef());
            return _super.init.call(this);
        });
    }
    unload() {
        for (let r of Object.values(this.eventRefs)) {
            this.bus.plugin.app.workspace.offref(r);
        }
    }
    /* Provisions */
    provide_predicate() {
        return () => {
            return (!!this.weatherAPI);
        };
    }
    provide_dispenseCache() {
        return () => {
            var _a;
            let p = this.getPredicate();
            return (_a = p === null || p === void 0 ? void 0 : p.API) === null || _a === void 0 ? void 0 : _a.dispenseCache.bind(p.API)();
        };
    }
    provide_tickEventRef() {
        return (cb) => {
            return this.bus.plugin.app.workspace.on("az-weather:api-tick", (...a) => cb(...a));
        };
    }
}

// TODO: add system to auto-reload skribis when module cache changes 
class ProviderScriptloader extends Provider {
    constructor() {
        super(...arguments);
        this.loadedModules = new Map();
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return this.initLoad().then(() => _super.init.call(this));
        });
    }
    initLoad() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.loadAndSet(...getFiles(this.bus.plugin.app, this.bus.plugin.settings.scriptFolder));
        });
    }
    loadAndSet(...file) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.readFiles(...file)
                .then((ret) => { /*vLog('Loading JS modules...', ret);*/ this.stashModule(ret); return Promise.resolve(); });
        });
    }
    stashModule(modules) {
        dLog('Scriptloader: stashModule', modules);
        modules.forEach((r) => {
            var _a, _b;
            if (r) {
                this.loadedModules.delete(r[0]);
                this.loadedModules.set(r[0], {
                    name: (String.isString((_b = (_a = r[1]) === null || _a === void 0 ? void 0 : _a._name) !== null && _b !== void 0 ? _b : null) ? r[1]._name : null),
                    properties: withoutKey(r[1], '_name')
                });
            }
        });
    }
    createObject(ctx) {
        let exports = {};
        this.loadedModules.forEach((value, key) => {
            var _a;
            let single = (Object.keys(value.properties).length == 1);
            let exKey = ((_a = value.name) !== null && _a !== void 0 ? _a : (single ? Object.keys(value.properties)[0] : key));
            let exVal = single ? Object.values(value.properties)[0] : value.properties;
            Object.defineProperty(exports, exKey, {
                get: function () {
                    if (ctx)
                        ctx === null || ctx === void 0 ? void 0 : ctx.child.sources.scripts.push(key);
                    return exVal;
                }
            });
        });
        return exports;
    }
    readFiles(...files) {
        return __awaiter(this, void 0, void 0, function* () {
            let filtered = filterFileExt(files, "js");
            const reads = filtered.map((f) => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (!(this.bus.plugin.app.vault.adapter instanceof obsidian.FileSystemAdapter))
                        return Promise.reject();
                    let path = this.bus.plugin.app.vault.adapter.getBasePath() + "/" + f.path;
                    let resPath = window.require.resolve(path);
                    if (Object.keys(window.require.cache).contains(resPath))
                        delete window.require.cache[window.require.resolve(resPath)];
                    const mod = require(path);
                    return (isExtant(mod))
                        ? Promise.resolve([f.basename, mod])
                        : Promise.reject();
                }
                catch (e) {
                    console.warn(e);
                    return Promise.reject();
                }
            }));
            return yield Promise.allSettled(reads)
                .then((settled) => {
                return settled
                    .filter((r) => { return r.status == "fulfilled"; })
                    .map((v) => { return v.value; });
            });
        });
    }
    clearJS(...items) {
        let names = items.map((item) => {
            if (isFile(item))
                return filterFileExt(item, 'js')[0].basename;
            else if (String.isString(item))
                return item;
        });
        for (let name of names)
            this.loadedModules.delete(name);
    }
    reload() {
        const _super = Object.create(null, {
            reload: { get: () => super.reload }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.loadedModules.clear();
            yield this.initLoad();
            return _super.reload.call(this);
        });
    }
    postDirty(id) {
        Array.from(this.bus.plugin.children).forEach(child => child.scriptsUpdated(id));
    }
    /* FileMinder Functions */
    get directory() { return this.bus.plugin.settings.scriptFolder; }
    fileUpdated(file) {
        if (!isFile(file))
            return;
        vLog(`File '${file.name}' in script directory modified, updating...`);
        this.clearJS(file);
        this.loadAndSet(file)
            .then(() => { this.setDirty(null, file.basename); }, () => this.clearJS(file));
    }
    fileDeleted(file) {
        if (!isFile(file))
            return;
        vLog(`File '${file.name}' removed from script directory, unloading...`);
        this.clearJS(file);
        this.setDirty(null, file.basename);
    }
    fileAdded(file) {
        if (!isFile(file))
            return;
        vLog(`File '${file.name}' added to script directory, loading...`);
        this.loadAndSet(file)
            .then(() => { this.setDirty(); }, () => this.clearJS(file));
    }
    fileRenamed(file, oldName) {
        if (!isFile(file))
            return;
        vLog(`Script file '${oldName}' renamed to '${file.name}', updating...`);
        this.clearJS(oldName);
        this.loadAndSet(file)
            .then(() => { this.setDirty(null, oldName); }, () => { });
    }
    directoryChanged() {
        vLog(`Script directory changed, reloading scripts...`);
        this.reload().then(() => this.setDirty(), (e) => { console.warn(e); });
    }
    isInDomain(file) {
        return isInFolder(file, this.directory);
    }
}

const obsidianModule = require("obsidian");
const MODULE_NAME_INTEGRATIONS = 'int';
/* Handles all script function providers */
class ProviderBus {
    constructor(handler) {
        this.providers = new Map();
        this.providersPredicated = new Map();
        this.scopeStatic = {};
        // Indicates that a provider has been added or removed, and the static scope should be regenerated.
        this.isStaticScopeDirty = false;
        /**
         * Integration point for other plugins to add a provider
         * @param provider Provider implementation to add */
        this.addProvider = (provider) => {
            this.providers.set(provider.id, provider);
            this.isStaticScopeDirty = true;
            this.handler.recompileTemplates();
        };
        /**
         * Integration point for other plugins to add a predicated provider
         * @param provider ProviderPredicated implementation to add */
        this.addProviderPredicated = (provider) => {
            this.providersPredicated.set(provider.id, provider);
        };
        this.handler = handler;
        this.plugin = handler.plugin;
        this.scriptLoader = new ProviderScriptloader(this, 'js'); // assigned here so that we can register file events in handler
    }
    /* Construct all providers but do not initialize them yet, so that we can compile and cache templates ASAP */
    preInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.addTo(this.providers, this.scriptLoader);
            this.addTo(this.providersPredicated, new ProviderDataview(this, 'dv'));
            this.addTo(this.providersPredicated, new ProviderWeather(this, 'weather'));
            this.skBase = new ProviderSK(this, VAR_NAME);
            return Promise.resolve();
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const inits = Object.values(this.execOnProviders('init'));
            yield Promise.allSettled(inits);
            this.createStaticScope();
            return Promise.resolve();
        });
    }
    addTo(providers, provider) {
        providers.set(provider.id, provider);
    }
    unload() {
        this.execOnProviders('unload');
    }
    /* Invoked by providers to indicate their provision must be regenerated */
    providerNotificationDirty(provider, isDirty, ...data) {
        if (isDirty)
            this.refreshProvider(provider, ...data);
    }
    /* Regenerate the provision of a single provider, and pass data to its post function */
    refreshProvider(provider, ...data) {
        provider.setDirty(false);
        Object.assign(this.scopeStatic, { [provider.id]: provider.createObject() });
        provider.postDirty(...data);
    }
    /* Clean dirty providers by regenerating their provision */
    refreshProviders(...providers) {
        let proxy = {};
        for (let provider of providers) {
            proxy[provider.id] = provider.createObject();
            provider.setDirty(false);
        }
        Object.assign(this.scopeStatic, proxy);
        providers.forEach(provider => provider.postDirty());
    }
    /* Reloads all providers */
    reloadProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            let proms = this.execOnProviders('reload');
            return Promise.allSettled(Object.values(proms));
        });
    }
    getScopeKeys() {
        return [...this.providers.keys(), MODULE_NAME_INTEGRATIONS, 'moment', 'obsidian'];
    }
    /* Retrieves providers object */
    getScope(ctx, refresh) {
        let dirties = Object.values(this.providers).filter((p) => { return p.isDirty; });
        if (dirties)
            this.refreshProviders(...dirties);
        if (this.isStaticScopeDirty)
            this.createStaticScope();
        return Object.assign({}, this.scopeStatic, {
            [MODULE_NAME_INTEGRATIONS]: this.createPredicatedScope(ctx || null),
            js: this.scriptLoader.createObject(ctx || null) // we're already getting JS from static scope, but we need to getterize it with access to the child
        });
    }
    /* Creates scope object. Should not be used to get the scope. */
    createStaticScope() {
        let spaces = {};
        for (let p of this.providers)
            spaces[p[0]] = p[1].createObject();
        spaces['moment'] = window.moment;
        spaces['obsidian'] = obsidianModule;
        this.scopeStatic = spaces;
        this.isStaticScopeDirty = false;
        return this.scopeStatic;
    }
    /* Predicated providers */
    createPredicatedScope(ctx) {
        let spaces = {};
        for (let p of this.providersPredicated) {
            Object.defineProperty(spaces, p[0], {
                get: function () {
                    ctx === null || ctx === void 0 ? void 0 : ctx.child.sources.integrations.push(p[1].predicatePluginName); // we add the source either way, so that the error child can listen
                    if (p[1].predicateCheck()) {
                        return p[1].createObject(ctx);
                    }
                    else
                        throw new Error(p[1].predicateError());
                }
            });
        }
        return spaces;
    }
    /* Get the base provider scope */
    getScopeSK() {
        return this.skBase.createObject();
    }
    /* Invoke function on all providers and return array of results */
    execOnProviders(func) {
        let rets = {};
        const invoke = (providers) => {
            for (let p of providers)
                if ((p != null) && (isFunc(p[1][func]))) {
                    rets[p[0]] = p[1][func]();
                }
        };
        invoke(this.providers);
        invoke(this.providersPredicated);
        return rets;
    }
}

/* This is slightly modified from Eta */
class Cacher {
    constructor(cache) {
        this.cache = cache;
    }
    define(key, val) { this.cache[key] = val; }
    get(key) { return this.cache[key]; }
    remove(key) { delete this.cache[key]; }
    reset() {
        Object.assign(this, { cache: {} });
        // this.cache = {}
    }
    load(cacheObj) { copyProps(this.cache, cacheObj); }
    has(key) {
        return !((this.cache[key] === null) || (this.cache[key] === undefined));
    }
}
function copyProps(toObj, fromObj) {
    for (const key in fromObj) {
        if (hasOwnProp(fromObj, key)) {
            toObj[key] = fromObj[key];
        }
    }
    return toObj;
}
function hasOwnProp(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* Responsible for the caching and management of templates. */
// TODO: add system to auto-reload skribis when relevant template cache changes 
class TemplateLoader {
    constructor(handler) {
        this.templateCache = new Cacher({});
        // templateFailures: Map<string, string> = new Map();
        this.templateFailures = new Cacher({});
        this.styleCache = new Cacher({});
        this.handler = handler;
        this.plugin = handler.plugin;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.initLoad().catch((err) => {
                console.error("Skribi: TemplateLoader failed to initalize", EBAR, err);
                this.initError = err;
                this.resetChildren();
            });
        });
    }
    initLoad() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.reload().catch((e) => Promise.reject(e));
            this.plugin.app.workspace.trigger('skribi:template-init-complete');
            return Promise.resolve();
        });
    }
    /**
     * Reads passed files and attempts to cache them.
     * Handles templates and styles. Templates are compiled to functions. */
    definePartials(...files) {
        return __awaiter(this, void 0, void 0, function* () {
            const startTime = window.performance.now();
            var failureCount = 0;
            var successCount = 0;
            const scopeKeys = this.handler.bus.getScopeKeys();
            let styleFiles = [];
            let templateFiles = [];
            files.forEach(file => {
                switch (file.extension) {
                    case "md":
                        templateFiles.push(file);
                        break;
                    case "eta":
                        templateFiles.push(file);
                        break;
                    case "css":
                        styleFiles.push(file);
                        break;
                }
            });
            const readTemplates = templateFiles.map((file) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c, _d;
                let read = yield this.plugin.app.vault.cachedRead(file);
                // console.log(`reading ${file.name}`, isExtant(read))
                let fileFrontmatter = null;
                if (file.extension == "eta") {
                    let fmSearch = (/^---\n*(?<frontmatter>.*?)\n*---/s).exec(read);
                    if ((_a = fmSearch === null || fmSearch === void 0 ? void 0 : fmSearch.groups) === null || _a === void 0 ? void 0 : _a.frontmatter) {
                        try {
                            let yaml = obsidian.parseYaml(fmSearch.groups.frontmatter.trim());
                            fileFrontmatter = yaml;
                            read = read.substr(fmSearch[0].length);
                        }
                        catch (e) {
                            vWarn(`Error parsing frontmatter of ${file.name}, please report.`, EBAR, e);
                        }
                    }
                }
                else {
                    /* Markdown files can check for cached frontmatter which is maybe faster */
                    fileFrontmatter = (_b = this.plugin.app.metadataCache.getFileCache(file)) === null || _b === void 0 ? void 0 : _b.frontmatter;
                    if (fileFrontmatter) {
                        let fmSearch = (/(?<frontmatter>^---.*?(?=\n---)\n---)/s).exec(read);
                        let fmText = (_d = (_c = fmSearch === null || fmSearch === void 0 ? void 0 : fmSearch.groups) === null || _c === void 0 ? void 0 : _c.frontmatter) !== null && _d !== void 0 ? _d : null;
                        if (isExtant(fmText)) {
                            read = read.substr(fmText.length);
                        }
                    }
                }
                try {
                    let compiledString = compileToString(read, getConfig({ varName: VAR_NAME, name: file.basename }));
                    // console.log(`compiling ${file.name} to string`)
                    var compiled = compileWith(compiledString, [VAR_NAME, 'E', 'cb', ...scopeKeys], (read.contains('await')));
                    // console.log(`compiled ${file.name} as template`)
                }
                catch (err) {
                    // console.log(`${file.name} err`)
                    // this.templateFailures.set(file.basename, err ?? `Template failed to compile: Unknown Error`)
                    this.templateFailures.define(file.basename, { error: err, source: read, extension: file.extension });
                    console.warn(`Skribi: template '${file.basename}' failed to compile`, EBAR, err, EBAR, read);
                    this.templateCache.remove(file.basename);
                    failureCount++;
                    return Promise.reject();
                }
                // this.templateFailures.delete(file.basename)
                this.templateFailures.remove(file.basename);
                this.templateCache.define(file.basename, {
                    source: read,
                    function: compiled,
                    frontmatter: fileFrontmatter ? withoutKey(fileFrontmatter, 'position') : null,
                    extension: file.extension
                });
                successCount++;
                return Promise.resolve();
            }));
            const readStyles = styleFiles.map((file) => __awaiter(this, void 0, void 0, function* () {
                let read = yield this.plugin.app.vault.cachedRead(file);
                this.styleCache.define(file.basename, read);
            }));
            yield Promise.allSettled(readTemplates.concat(readStyles));
            if ((!this.plugin.initLoaded) && files.length) {
                let str = `${successCount} template${(successCount == 1) ? '' : 's'}`;
                if (failureCount)
                    str += `\n Of ${templateFiles.length} total templates, ${failureCount} failed to compile.`;
                console.log(`Skribi: Loaded ` + str);
            }
            else if (this.plugin.initLoaded) {
                /* Other than during init, definePartials is called on single files at a time.  */
                if (templateFiles.length > 0) {
                    Array.from(this.plugin.children).forEach((child) => {
                        child.templatesUpdated(templateFiles[0].basename);
                    });
                    vLog(`Updated template '${templateFiles[0].basename}' in ${roundTo(window.performance.now() - startTime, 4)}ms`);
                }
                if (styleFiles.length > 0) {
                    Array.from(this.plugin.children).forEach((child) => {
                        child.stylesUpdated(styleFiles[0].basename);
                    });
                    vLog(`Update style '${styleFiles[0].basename}'`);
                }
                if ((styleFiles.length > 0) || (templateFiles.length > 0)) {
                    this.plugin.app.workspace.trigger('skribi:template-index-modified');
                }
            }
            return Promise.resolve();
        });
    }
    /* Deletes cache entries by string name or file of origin */
    deletePartial(...items) {
        for (let item of items) {
            let name = isFile(item) ? item.basename : item;
            this.templateCache.remove(name);
        }
    }
    deletePartialByName(...items) {
        var _a, _b;
        for (let item of items) {
            let split = (/(?<name>[^]+)\.(?<extension>[^]+)$/g).exec(item);
            if (!((_b = (_a = Object.keys(split === null || split === void 0 ? void 0 : split.groups)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0 > 0)) {
                console.warn('Skribi: TemplateLoader.deletePartialByName() could not parse name \n', item);
                continue;
            }
            if (split.groups['extension'] == "css") {
                this.styleCache.remove(split.groups['name']);
                Array.from(this.plugin.children).forEach((child) => {
                    child.stylesUpdated(split.groups['name']);
                });
            }
            else {
                this.templateCache.remove(split.groups['name']);
                Array.from(this.plugin.children).forEach((child) => {
                    child.templatesUpdated(split.groups['name']);
                });
            }
        }
    }
    reload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.initError = null;
            if (this.directory.length <= 0) {
                // new Notice("Skribi: template directory not defined!"); 
                throw skInternalError({
                    name: "TemplateLoader", message: "Template directory not defined!", err: null,
                    regentClass: "skr-waiting skr-template-init-error",
                    el: makeSettingsLink()
                });
            }
            var files = null;
            try {
                files = getFiles(this.plugin.app, this.directory);
            }
            catch (err) {
                throw skInternalError({
                    name: "TemplateLoader", message: err === null || err === void 0 ? void 0 : err.message, err: err,
                    regentClass: "skr-waiting skr-template-init-error",
                    el: makeSettingsLink()
                });
            }
            this.templateCache.reset();
            yield this.definePartials(...files);
            return Promise.resolve("");
        });
    }
    resetChildren() {
        Array.from(this.plugin.children).forEach((child) => {
            if (child === null || child === void 0 ? void 0 : child.templateKey) {
                /* both of these options work but I made reset() cause I thought it didn't and now I wanna use it */
                //child.rerender(child.templateKey)
                child.reset();
            }
        });
    }
    /* FileMinder Functions */
    get directory() { return this.plugin.settings.templateFolder; }
    fileUpdated(file) {
        if (!isFile(file))
            return;
        vLog(`File '${file.name}' in template directory modified, updating...`);
        this.definePartials(file);
    }
    // fileDeleted(file: TAbstractFile | string): void { // never actually called as string I just wrote it to handle it for some reason
    //   let isf = isFile(file)
    //   if ((!isf && !(String.isString(file) && this.templateCache.get(file)))) return;
    //   vLog(`File '${isf ? (file as TFile).name : file}' removed from template directory, unloading...`)
    //   this.deletePartial(file as (TFile | string))
    // }
    fileDeleted(file) {
        if (!isFile(file))
            return;
        vLog(`File '${file.name}' removed from template directory, unloading...`);
        this.deletePartialByName(file.name);
    }
    fileAdded(file) {
        if (!isFile(file))
            return;
        vLog(`File '${file.name}' added to template directory, loading...`);
        this.definePartials(file);
    }
    fileRenamed(file, oldName) {
        if (!isFile(file))
            return;
        vLog(`Template file '${oldName}' renamed to '${file.name}', updating...`);
        this.deletePartialByName(oldName);
        this.definePartials(file);
    }
    directoryChanged() {
        return __awaiter(this, void 0, void 0, function* () {
            vLog(`Template directory changed, reloading templates...`);
            this.templateCache.reset();
            this.templateFailures.reset();
            this.styleCache.reset();
            var r;
            try {
                r = yield this.reload();
            }
            catch (err) {
                this.initError = err;
            }
            finally {
                if (isExtant(r)) {
                    this.plugin.app.workspace.trigger("skribi:template-init-complete");
                }
                this.resetChildren();
            }
        });
    }
    isInDomain(file) {
        return isInFolder(file, this.directory);
    }
}
function makeSettingsLink() {
    let el = createDiv({ cls: ['skribi-modal-error-message'] });
    el.createSpan({ text: "Open Skribi Settings", cls: 'skr-button' });
    el.addEventListener('click', (ev) => {
        window.app.setting.open();
        window.app.setting.openTabById('obsidian-skribi');
    });
    return el;
}

class EtaHandler {
    // get templateFrontmatters() {return this.loader.templateFrontmatters}
    constructor(plugin) {
        this.templatesDirty = false;
        this.plugin = plugin;
        this.bus = new ProviderBus(this);
        this.loader = new TemplateLoader(this);
        if (!this.plugin.app.workspace.layoutReady)
            this.plugin.app.workspace.onLayoutReady(() => this.init.bind(this)());
        else
            this.init();
    }
    get templates() { return this.loader.templateCache; }
    get failedTemplates() { return this.loader.templateFailures; }
    init() {
        this.initLoad().then(() => {
            this.registerFileEvents();
        }).catch((err) => {
            console.error(`Skribi: EtaHandler failed to initialize!`, EBAR, err);
        });
    }
    registerFileEvents() {
        /* Because the FileMinder index does not change, we don't need the event refs */
        const minders = [this.bus.scriptLoader, this.loader];
        for (let minder of minders) {
            this.plugin.registerEvent(this.plugin.app.vault.on('modify', file => {
                if (minder.isInDomain(file))
                    minder.fileUpdated(file);
            }));
            this.plugin.registerEvent(this.plugin.app.vault.on('delete', file => {
                if (minder.isInDomain(file))
                    minder.fileDeleted(file);
            }));
            this.plugin.registerEvent(this.plugin.app.vault.on('create', file => {
                if (minder.isInDomain(file))
                    minder.fileAdded(file);
            }));
            this.plugin.registerEvent(this.plugin.app.vault.on('rename', (file, oldPath) => {
                let ourDir = this.plugin.app.vault.getAbstractFileByPath(obsidian.normalizePath(minder.directory));
                let oldDir = this.plugin.app.vault.getAbstractFileByPath(obsidian.normalizePath((/.+\//g).exec(oldPath)[0]));
                if (file.parent == ourDir) {
                    // New location of file is in our directory
                    if (file.parent == oldDir) {
                        // File did not move but was renamed
                        minder.fileRenamed(file, (/([a-zA-Z0-9-_.]+\..*)/g).exec(oldPath)[0]);
                    }
                    else {
                        // File was moved from elsewhere into the template directory
                        minder.fileAdded(file);
                    }
                }
                else if (oldDir == ourDir) {
                    // File used to be in templates directory and is no longer
                    minder.fileDeleted(file);
                }
            }));
        }
    }
    initLoad() {
        return __awaiter(this, void 0, void 0, function* () {
            let { a: a, b: b } = yield this.bus.preInit().then(() => {
                return { a: this.bus.init(), b: this.loader.init() };
            });
            return Promise.all([a, b]);
        });
    }
    unload() {
        this.bus.unload();
    }
    recompileTemplates() {
        // If the bus scope changes, the templates must be recompiled. 
        // The bus scope should not change post-init unless an external source modifies the provider list.
        return this.loader.reload();
    }
    getPartial(id) {
        return this.loader.templateCache.get(id);
    }
    hasPartial(id) {
        return isExtant(this.loader.templateCache.get(id));
    }
    getCacheKeys() {
        //@ts-ignore
        return Object.keys(this.templates.cache);
    }
    /**
    * Primary skribi render function. Renders asynchronously (TemplateFunction may or may not be async)
    * @param content String or scoped template function to render
    * @param ctxIn Context object to be added to `sk` object
    * @param file File in which the skribi is being rendered
    * @returns [rendered string, returned packet (currently unused)] */
    renderAsync(content, ctxIn, file) {
        return __awaiter(this, void 0, void 0, function* () {
            /* Used to pass data up to the render process from the skribi function */
            let packet = {};
            function up() {
                return function (x, y) {
                    packet[x] = y;
                };
            }
            let cfg = getConfig({
                varName: VAR_NAME,
                async: content.toString().contains('await') // This will catch strings containing await as well
            });
            /* the 'this' object of the sk context*/
            let binder = {};
            /* The 'sk' object */
            let sk = Object.assign({}, ctxIn || {}, {
                this: binder,
                getEnv: getEnv,
                up: up(),
                ctx: {
                    file: file || null,
                    plugin: this.plugin,
                    app: this.plugin.app
                }
            }, this.bus.getScopeSK());
            /* Scope to pass to the function. Must contain all keys that function was compiled with. */
            let scope = Object.assign({ 'sk': sk, 'E': cfg, 'cb': () => { } }, this.bus.getScope({ child: ctxIn === null || ctxIn === void 0 ? void 0 : ctxIn.child._c }));
            function getEnv() {
                return scope;
            }
            let ren = renderEta(this, content, {}, cfg, null, scope, binder);
            if (ren instanceof Promise) {
                console.log(ren);
                return yield ren.then((r) => { return Promise.resolve([r, packet]); }, (r) => { return Promise.reject(r); });
            }
            else if (String.isString(ren)) {
                return Promise.resolve([ren, packet]);
            }
            else
                return Promise.reject("EtaHandler.renderAsync: Unknown Error");
        });
    }
    /* this is somehow 1.3x slower than renderAsync */
    renderAsyncNaive(content, ctxIn, varName) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Skribos: renderAsyncNaive invoked', content, ctxIn);
            let context = Object.assign({}, ctxIn || {});
            let ren = renderAsync(content, context, { varName: varName !== null && varName !== void 0 ? varName : VAR_NAME });
            if (ren instanceof Promise) {
                return yield ren.then((r) => { return Promise.resolve(r); }, (r) => { return Promise.reject(r); });
            }
            else if (String.isString(ren)) {
                return Promise.resolve(ren);
            }
            else
                return Promise.reject("Unknown error");
        });
    }
    render(content, ctxIn) {
        let context = ctxIn || {};
        content = render(content, context, {
            varName: VAR_NAME
        });
        return content;
    }
    /** TemplateFunction handler, will return cached or compiled function, appropriately bound and scoped
     * @param template String or scoped template function
     * @param options EtaConfig
     * @param scope Object containing objects that should be available in the returned function's scope
     * @param binder Object to which the returned function will be bound */
    getCached(template, options, scope, binder) {
        if (options.name && this.templates.get(options.name)) {
            return (binder) ? this.templates.get(options.name).function.bind(binder) : this.templates.get(options.name);
        }
        var templateFunc;
        try {
            templateFunc = (typeof template === 'function')
                ? template
                : compileWith(compileToString(template, options), Object.keys(scope), options.async);
        }
        catch (err) {
            if ((err === null || err === void 0 ? void 0 : err.name) == "Eta Error") {
                let firstLine = err.message.split('\n', 1);
                let stack = err.message.substr(firstLine[0].length);
                let match = /.* at line (?<line>\d) col (?<col>\d)/.exec(err.message);
                throw Object.assign(new SkribiEtaSyntaxError(firstLine[0].substr(0, firstLine[0].length - 1)), {
                    etaError: err,
                    packet: {
                        firstLine: firstLine[0],
                        stack: stack.trimStart(),
                        loc: isExtant(match) && String.isString(template) ? {
                            line: match.groups.line,
                            col: match.groups.col,
                            src: template
                        } : null
                    }
                });
            }
            else {
                throw err;
            }
        }
        if (options.name)
            this.templates.define(options.name, { source: (String.isString(template) ? template : null), function: templateFunc });
        return {
            func: ((binder) ? templateFunc.bind(binder) : templateFunc),
            unboundFunc: templateFunc
        };
    }
}

var test$1 = "test";
var documentation = "Documentation";
var en = {
	test: test$1,
	documentation: documentation,
	"command.insert": "Insert Skribi",
	"command.reloadScripts": "Reload Scripts",
	"command.perfTest": "Test Performance",
	"regent.loading.hover": "Evaluating...",
	"regent.stasis.hover": "Recursion limit reached!",
	"regent.self.hover": "Self Render Prohibited",
	"regent.wait.hover": "Awaiting Template Cache",
	"regent.depth.hover": "It goes on forever...",
	"setting.title": "Skribi Settings",
	"setting.templateDirectory.name": "Template Directory",
	"setting.templateDirectory.desc": "Skribi will look for templates in this folder.",
	"setting.scriptDirectory.name": "Skript Directory",
	"setting.scriptDirectory.desc": "Skribi will look for JS files in this folder.",
	"setting.errorLog.name": "Error Logging",
	"setting.errorLog.desc": "Enable to dump any errored renders to the console. If false, will still add the error as tooltip on the errored element. \n Will spam your console if typing into a skribi with a preview window open.",
	"setting.verbose.name": "Verbose Logging",
	"setting.verbose.desc": "Enable to get more detailed logs in the console.",
	"setting.autoReload.name": "Auto Reload",
	"setting.autoReload.desc": "Enable to automatically reload rendered skribis when scripts or relevant templates are updated.",
	"setting.templateSuggest.name": "Template Suggestions",
	"setting.templateSuggest.desc": "Displays a suggestion popover when invoking a template that prompts with template names and value keys.",
	"setting.cssAnimations.name": "CSS Animations",
	"setting.cssAnimations.desc": "Toggles CSS animations, such as the spinning loading symbol.",
	"modal.insert.title": "Insert Skribi Template",
	"modal.insert.append": "Append",
	"modal.insert.insert": "Insert",
	"modal.confirm.title": "Please Confirm",
	"modal.confirm.confirm": "Confirm",
	"modal.confirm.cancel": "Cancel",
	"modal.external.title": "Open External Link?",
	"modal.external.desc": "Will open the following address with default program:",
	"modal.external.label": "Open Link",
	"modal.perf.title": "Skribi Performance Test",
	"modal.perf.textToEvaluate.name": "Text To Evaluate",
	"modal.perf.textToEvaluate.desc": "Text is evaluated as the contents of a code span.",
	"modal.perf.textToEvaluate.placeholder": "{~ console.log('Hello World'); }",
	"modal.perf.evalIterations.name": "Evaluation Iterations",
	"modal.perf.evalIterations.desc": "How many times should the text be evaluated?",
	"modal.perf.evalBlocks": "Eval As Individual Blocks?",
	"modal.perf.evaluate": "Evaluate",
	"modal.perf.evaluating": "Evaluating...",
	"modal.perf.results": "Average fulfillment time",
	"modal.perf.resultsBlockCount.single": "%0 block",
	"modal.perf.resultsBlockCount.plural": "%0 blocks",
	"modal.perf.autofill.selection": "Selection",
	"modal.perf.autofill.clipboard": "Clipboard"
};

var test = "test but in a british accent";
var en_gb = {
	test: test
};

const locales = {
    en: en,
    'en-gb': en_gb
};
function make() {
    let out = {
        '_': t
    };
    for (let key of Object.keys(en)) {
        if (String.isString(en[key])) {
            Object.defineProperty(out, key, {
                get: function () {
                    var _a, _b;
                    return (_b = (_a = locale()) === null || _a === void 0 ? void 0 : _a[key]) !== null && _b !== void 0 ? _b : en[key];
                }
            });
        }
    }
    vLog('Locale definitions constructed');
    return out;
}
function locale() { return locales === null || locales === void 0 ? void 0 : locales[window.moment.locale()]; }
/* Pull localized strings from this. */
const l = make();
/**
 * You can pull strings from this.
 * Pro: safely handles undefined keys
 * Contra: you won't get the property definition tooltips in VSC, which was the whole point of this design
 * @param key Lang file string key to return local version of
 * @param args Strings to insert into insertion tags (eg '%0')
 * @returns Localized string */
function t(key, ...args) {
    var _a, _b;
    if (!isExtant(en[key]))
        vWarn(`Babel received undefined key: ${key}`);
    let str = (_b = (_a = l[key]) !== null && _a !== void 0 ? _a : en[key]) !== null && _b !== void 0 ? _b : `$${key}`;
    return str.replace((/%(\d+)/g), (t, n) => (void 0 !== args[n] ? args[n] : t));
}

class confirmationModal extends obsidian.Modal {
    constructor(app, fieldsIn) {
        super(app);
        this.fields = {
            title: l["modal.confirm.title"],
            labelPos: l["modal.confirm.confirm"],
            labelNeg: l["modal.confirm.cancel"],
        };
        Object.assign(this.fields, fieldsIn || {});
    }
    onOpen() {
        var _a, _b;
        this.titleEl.setText(this.fields.title);
        this.containerEl.addClazz(kls('confirmation-modal'), this.fields.class);
        if (this.fields.desc)
            this.contentEl.createDiv({ cls: kls('confirmation-modal-description'), text: this.fields.desc });
        this.contentEl.append(...(_b = (_a = this.fields) === null || _a === void 0 ? void 0 : _a.elements) !== null && _b !== void 0 ? _b : []);
        let c = this.contentEl.createDiv({ cls: kls('confirm-modal-buttons') });
        c.createEl("button", { text: this.fields.labelPos, cls: kls('modal-button-confirm') }, (b) => {
            b.onClickEvent(() => {
                this.resolve("true");
                this.close();
            });
        });
        c.createEl("button", { text: this.fields.labelNeg, cls: kls('modal-button-cancel') }, (b) => {
            b.onClickEvent(() => {
                this.resolve("false");
                this.close();
            });
        });
    }
    openAndGetValue(resolve, reject) {
        return __awaiter(this, void 0, void 0, function* () {
            this.resolve = resolve;
            this.reject = reject;
            this.open();
        });
    }
}
function makeExternalLink(linkIn) {
    const link = String.isString(linkIn) ? createEl('a', { attr: { href: linkIn } }) : linkIn;
    link.addEventListener('click', (ev) => {
        ev.preventDefault();
        let p = new confirmationModal(window.app, {
            title: l["modal.external.title"],
            desc: l["modal.external.desc"],
            labelPos: l["modal.external.label"],
            elements: [createDiv({ cls: kls('confirmation-modal-link'), text: link.getAttr('href') })]
        });
        new Promise((resolve, reject) => p.openAndGetValue(resolve, reject))
            .then(res => {
            if (res === "true") {
                window.open(link.getAttr('href'));
            }
        });
    });
    return link;
}

class RenderModal extends obsidian.Modal {
    constructor(plugin, templateKey, append) {
        super(plugin.app);
        this.plugin = plugin;
        this.templateKey = templateKey.toString();
        // this.values = values ?? {}
        this.append = append;
        this.renderEl = this.contentEl.createDiv({ cls: ['skribi-modal-render-container', 'markdown-preview-view'] });
        this.modalEl.addClass('skribi-modal-render');
        this.modalEl.setAttribute('skribi-render-modal-key', templateKey);
        this.component = new obsidian.Component();
    }
    onOpen() {
        this.render();
        this.component.load();
    }
    render() {
        var _a;
        this.renderEl.empty();
        let txt = `{:${this.templateKey}`;
        /*txt += Object.entries(this.values).reduce((prev: string, cur: string) => {
          return prev + `| ${cur[0]}: ${cur[1]}`
        }, "") */
        txt += (_a = this === null || this === void 0 ? void 0 : this.append) !== null && _a !== void 0 ? _a : "";
        txt += '}';
        console.log(txt);
        this.renderEl.createEl('code', { text: txt });
        let container = createDiv();
        let el = createDiv();
        this.plugin.processor.processEntry({ srcType: "GENERAL" /* general */ }, this.renderEl, {
            remainingNestLevel: 4,
            docId: '555555555',
            frontmatter: null,
            sourcePath: "",
            addChild: (child) => { this.component.addChild(child); },
            getSectionInfo: () => { return null; },
            containerEl: container,
            el: el
        }, 4, false, null).catch((err) => { console.log("renderModal Error:", EBAR, err); });
    }
    onClose() {
        this.component.unload();
        // this.renderEl.empty()
    }
}

class SkribosSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.collapsedEls = {
            renderPresets: false
        };
        this.saveSetting = obsidian.debounce((setting, value, cb, ...args) => __awaiter(this, void 0, void 0, function* () {
            // console.log("saving: " + setting + " = " + value)
            this.plugin.settings[setting] = value;
            this.plugin.saveSettings().then(() => { if (isExtant(cb) && isFunc(cb))
                cb(...args || null); });
        }), 2000, true);
        this.saveData = obsidian.debounce((cb, ...args) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.saveSettings().then(() => { if (isExtant(cb) && isFunc(cb))
                cb(...args || null); });
        }), 1000, true);
        this.plugin = plugin;
    }
    display(id, sel) {
        let { containerEl } = this;
        containerEl.addClass("skribi-settings");
        containerEl.empty();
        containerEl.createEl('h2', { text: l["setting.title"] });
        let desc = containerEl.createDiv({ cls: 'skribi-modal-desc', attr: { style: "margin-bottom: 1em;" } });
        makeExternalLink(desc.createEl('a', { text: l['documentation'], attr: { 'href': linkDocs('settings') } }));
        new obsidian.Setting(containerEl)
            .setName(l["setting.templateDirectory.name"])
            .setDesc(l["setting.templateDirectory.desc"])
            .addTextArea((text) => {
            text
                .setValue(this.plugin.settings.templateFolder)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                let previous = this.plugin.settings.templateFolder;
                this.saveSetting('templateFolder', value, () => {
                    if (previous !== value)
                        this.plugin.eta.loader.directoryChanged();
                });
            }));
            text.inputEl.cols = 30;
            return text;
        });
        new obsidian.Setting(containerEl)
            .setName(l["setting.scriptDirectory.name"])
            .setDesc(l["setting.scriptDirectory.desc"])
            .addTextArea((text) => {
            text
                .setValue(this.plugin.settings.scriptFolder)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                let previous = this.plugin.settings.scriptFolder;
                this.saveSetting('scriptFolder', value, () => {
                    if (previous !== value)
                        this.plugin.eta.bus.scriptLoader.directoryChanged();
                });
            }));
            text.inputEl.cols = 30;
            return text;
        });
        this.makeToggle(containerEl, "autoReload", l["setting.autoReload.name"], l["setting.autoReload.desc"]);
        this.makeToggle(containerEl, "errorLogging", l["setting.errorLog.name"], l["setting.errorLog.desc"]);
        this.makeToggle(containerEl, "verboseLogging", l["setting.verbose.name"], l["setting.verbose.desc"]);
        this.makeToggle(containerEl, "templateSuggest", l["setting.templateSuggest.name"], l["setting.templateSuggest.desc"]);
        this.makeToggle(containerEl, "cssAnimations", l["setting.cssAnimations.name"], l["setting.cssAnimations.desc"], (val) => {
            document.body.toggleClass(CLS.anim, val);
        });
        // this.makeToggle(containerEl, "shadowMode", "Shadow Mode", "Embed skribis in a shadow root", () => invokeMethodOf<SkribiChild>("rerender", ...this.plugin.children)) // hidden for now (this kills the skribichild)
        /* PRESETS */
        let presetsDiv = containerEl.createDiv({ cls: 'skribi-presets-list' });
        let col = wrapCollapse(presetsDiv, this.collapsedEls.renderPresets, (state) => this.collapsedEls.renderPresets = state);
        col.collapseEl.addClass('skribi-presets-settings');
        let keyField = new obsidian.Setting(col.collapseTitleEl)
            .setName('Render Presets')
            .addButton((button) => {
            button
                .setButtonText("+")
                .setTooltip("New Preset")
                .onClick(() => {
                let i = (Object.keys(this.plugin.data.renderModalPresets).length + 1);
                let newPreset = {
                    index: i,
                    name: `Preset ${i}`,
                    key: "",
                    append: ""
                };
                const getUniqueKey = (iter) => {
                    let t = window.performance.now().toString();
                    let s = (t.length > 12) ? t.substring(t.length - 8) : t;
                    let x = hash(s);
                    if (isExtant(this.plugin.data.renderModalPresets[x])) {
                        if (iter > 10) {
                            throw "Could not generate ID, aborting";
                        }
                        return getUniqueKey(iter++);
                    }
                    else
                        return x;
                };
                let newKey = getUniqueKey(0);
                this.plugin.data.renderModalPresets[newKey] = newPreset;
                this.plugin.saveSettings().then(() => {
                    this.plugin.addCommand({ id: `render-preset_${newKey}`, name: `Render Preset - ${newPreset.name}`, callback: () => {
                            new RenderModal(this.plugin, this.plugin.data.renderModalPresets[newKey].key, this.plugin.data.renderModalPresets[newKey].append).open();
                        } });
                    this.display(newKey);
                });
            });
        });
        keyField.settingEl.prepend(col.collapseIndicator);
        presetsDiv.createDiv({ cls: 'skribi-presets-list-label' }, (div) => {
            div.createSpan({ cls: "skribi-presets-label-1", text: "Name" });
            div.createSpan({ cls: "skribi-presets-label-2", text: "Template" });
            div.createSpan({ cls: "skribi-presets-label-3", text: "Arguments" });
        });
        let entries = Object.entries(this.plugin.data.renderModalPresets);
        // console.log(entries)
        entries.sort((a, b) => a[1].index - b[1].index).forEach((preset, index) => {
            this.createPresetEntry(presetsDiv, index, preset[0], preset[1]);
        });
        /*
        if (id) {
            let f = containerEl.querySelector(`div.skr-collapsible.skribi-presets-settings > div.skr-collapsible-content textarea[id='${id}']`) as HTMLTextAreaElement
            if (f) {
                f.focus()
                if (sel) f.setSelectionRange(sel[0], sel[1])
            }
        }*/
    }
    makeToggle(el, setting, name, desc, cb) {
        return new obsidian.Setting(el)
            .setName(name)
            .setDesc(desc)
            .addToggle((toggle) => {
            toggle
                .setValue(!!this.plugin.settings[setting])
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings[setting] = value;
                yield this.plugin.saveSettings();
                if (cb)
                    cb(value);
            }));
        });
    }
    createPresetEntry(el, index, uid, preset) {
        let set = new obsidian.Setting(el);
        set.settingEl.addClass('skribi-preset-entry');
        /*
        set.addTextArea((text) => {
            text.inputEl.setAttr('id', uid)
            text.setValue(uid)
            text.onChange((value) => {
                console.log(value)
                if (digits.contains(value.charAt(0))) {
                    text.inputEl.toggleClass('skr-invalid', true)
                    el.prepend(createSpan({text: "Preset name cannot begin with a numeral"}))
                } else {
                    text.inputEl.toggleClass('skr-invalid', false)
                    let p = this.plugin.data.renderModalPresets[uid]
                    delete this.plugin.data.renderModalPresets[uid]
                    this.plugin.data.renderModalPresets[value] = p
                  this.plugin.saveSettings().then(() => this.display(value, [text.inputEl.selectionStart, text.inputEl.selectionEnd]))
                }
            })
            
            text.inputEl.cols = 12;
            text.inputEl.rows = 1;
        }) */
        /* Template Name */
        set.addTextArea((text) => {
            var _a;
            text.setValue((_a = preset === null || preset === void 0 ? void 0 : preset.name) !== null && _a !== void 0 ? _a : this.plugin.data.renderModalPresets[uid].name);
            text.onChange(val => {
                this.plugin.data.renderModalPresets[uid].name = val;
                this.saveData(() => {
                    this.app.commands.removeCommand(`obsidian-skribi:render-preset_${uid}`);
                    this.plugin.addCommand({ id: `render-preset_${uid}`, name: `Render Preset - ${val}`, callback: () => {
                            new RenderModal(this.plugin, this.plugin.data.renderModalPresets[uid].key, this.plugin.data.renderModalPresets[uid].append).open();
                        } });
                });
            });
            text.inputEl.cols = 12;
            text.inputEl.rows = 1;
        });
        /* Template Key */
        set.addTextArea((text) => {
            var _a;
            text.setValue((_a = preset === null || preset === void 0 ? void 0 : preset.key) !== null && _a !== void 0 ? _a : this.plugin.data.renderModalPresets[uid].key);
            text.onChange(val => {
                this.plugin.data.renderModalPresets[uid].key = val;
                this.saveData();
            });
            text.inputEl.cols = 12;
            text.inputEl.rows = 1;
        });
        /* Append */
        set.addTextArea((text) => {
            var _a;
            text.setValue((_a = preset === null || preset === void 0 ? void 0 : preset.append) !== null && _a !== void 0 ? _a : this.plugin.data.renderModalPresets[uid].append);
            text.onChange(val => {
                this.plugin.data.renderModalPresets[uid].append = val;
                this.saveData();
            });
            text.inputEl.rows = 1;
        });
        set.addButton((button) => {
            let b = button
                .setButtonText("X")
                .setTooltip("Delete Rule")
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                let p = new confirmationModal(this.app, { title: "Delete Rule?" });
                new Promise((resolve, reject) => p.openAndGetValue(resolve, reject))
                    .then(ar => {
                    if (ar === "true") {
                        delete this.plugin.data.renderModalPresets[uid];
                        this.plugin.saveSettings().then(() => {
                            this.app.commands.removeCommand(`obsidian-skribi:render-preset_${uid}`);
                            this.display();
                        });
                    }
                });
            }));
            b.buttonEl.addClass("skribi-preset-delete");
            return b;
        });
    }
    /* unused */
    ruleTextField(set, presetKey, val) {
        set.addTextArea((text) => {
            /* Property Key */
            var prevKey = val[0];
            text.setValue(val[0]);
            text.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                let p = this.plugin.data.renderModalPresets[presetKey].arguments;
                p[value] = p[prevKey];
                delete p[prevKey];
                this.plugin.data.renderModalPresets[presetKey].arguments = p;
                yield this.plugin.saveSettings();
                prevKey = this.plugin.data.renderModalPresets[presetKey].arguments[value];
                this.display();
            }));
            // text.inputEl.rows = 1;
            text.inputEl.cols = 12;
            text.inputEl.addClass("skr-preset-propkey");
        });
        /* Property Value */
        set.addTextArea((text) => {
            text.setValue(val[1]);
            text.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.data.renderModalPresets[presetKey].arguments[val[0]] = value;
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
    }
}
const DEFAULT_SETTINGS = {
    templateFolder: "",
    scriptFolder: "",
    verboseLogging: false,
    devLogging: false,
    errorLogging: false,
    autoReload: true,
    templateSuggest: true,
    cssAnimations: true,
    reflectStyleTagText: true,
    shadowMode: false,
};

/*
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * Modified from https://github.com/samthor/scoped (polyfill for deprecated HTML feature scoped styles)
 */
/** Prefixes all CSS selectors in a selector text string with prefix prefix */
function prefixSelectors(selectorText, prefix) {
    const found = [];
    while (selectorText) {
        const consumed = consumeSelector(selectorText, prefix);
        if (consumed === null) {
            return ':not(*)';
        }
        found.push(consumed.selector);
        selectorText = consumed.rest;
    }
    return found.join(', ');
}
// This monstrosity matches any valid `[foo="bar"]` block, with either quote style. Parenthesis
// have no special meaning within an attribute selector, and the complex regexp below mostly
// exists to allow \" or \' in string parts (e.g. `[foo="b\"ar"]`).
const attrRe = /^\[.*?(?:(["'])(?:.|\\\1)*\1.*)*\]/;
const walkSelectorRe = /([([,]|:scope\b)/; // "interesting" setups
const scopeRe = /^:scope\b/;
/**
 * Consumes a single selector from candidate selector text, which may contain many. */
function consumeSelector(raw, prefix) {
    let i = raw.search(walkSelectorRe);
    if (i === -1) {
        return { selector: `${prefix} ${raw}`, rest: '' };
    }
    else if (raw[i] === ',') {
        return { selector: `${prefix} ${raw.substr(0, i)}`, rest: raw.substr(i + 1) };
    }
    let leftmost = true; // whether we're past a descendant or similar selector
    let scope = false; // whether :scope has been found + replaced
    i = raw.search(/\S/); // place i after initial whitespace only
    let depth = 0;
    outer: for (; i < raw.length; ++i) {
        const char = raw[i];
        switch (char) {
            case '[':
                const match = attrRe.exec(raw.substr(i));
                i += (match ? match[0].length : 1) - 1; // we add 1 every loop
                continue;
            case '(':
                ++depth;
                continue;
            case ':':
                if (!leftmost) {
                    continue; // doesn't matter if :scope is here, it'll always be ignored
                }
                else if (!scopeRe.test(raw.substr(i))) {
                    continue; // not ':scope', ignore
                }
                else if (depth) {
                    return null;
                }
                // Replace ':scope' with our prefix. This can happen many times; ':scope:scope' is valid.
                // It will never apply to a descendant selector (e.g., ".foo :scope") as this is ignored
                // by browsers anyway (invalid).
                raw = raw.substring(0, i) + prefix + raw.substr(i + 6);
                i += prefix.length;
                scope = true;
                --i; // we'd skip over next character otherwise
                continue; // run loop again
            case ')':
                if (depth) {
                    --depth;
                }
                continue;
        }
        if (depth) {
            continue;
        }
        switch (char) {
            case ',':
                break outer;
            case ' ':
            case '>':
            case '~':
            case '+':
                if (!leftmost) {
                    continue;
                }
                leftmost = false;
        }
    }
    const selector = (scope ? '' : `${prefix} `) + raw.substr(0, i);
    return { selector, rest: raw.substr(i + 1) };
}

/* STYLE FUNCTIONS */
function stripStyleFromString(str) {
    let x = createDiv();
    x.innerHTML = str;
    // console.log('prestrip', x)
    let style = x.querySelector('style');
    if (style)
        x.removeChild(style);
    return [x.innerHTML, style !== null && style !== void 0 ? style : null];
}
/* s must be attached to document or s.sheet will be null */
function scopeStyle(child, el, s) {
    var _a;
    child.hash = (_a = child.hash) !== null && _a !== void 0 ? _a : hash(child.source);
    child.containerEl.setAttr('sk-hash', child.hash);
    if (!s.sheet) {
        console.warn("Skribi: Could not scope style because it was not attached to the document!", EBAR, "Style: ", s, EBAR, "In element: ", el, EBAR, "Of child:", child);
        return;
    }
    const l = s.sheet.cssRules.length;
    for (let i = 0; i < l; ++i) {
        const rule = s.sheet.cssRules[i];
        if (!(rule instanceof CSSImportRule)) {
            scopeRule(rule, ['sk-hash', child.hash]);
        }
    }
    /* Changing the rule properties doesn't change the text of the style element, so we do it manually so make the resolved behavior visible for users in element panel */
    if (window.app.plugins.plugins['obsidian-skribi'].settings.reflectStyleTagText) {
        let rules = [];
        for (let i = 0; i < s.sheet.cssRules.length; i++) {
            rules.push(s.sheet.cssRules.item(i));
        }
        let str = rules.reduce((a, b) => { return a + `${b.cssText}` + '\n'; }, "");
        s.textContent = str;
    }
    return s;
}
/** Mutates a CSSRule's selectors to select elements with attribute 'sk-hash' equal to hash
/* @param rule CSSRule to scope
/* @param hash [attrKey, attrVal] to target */
function scopeRule(rule, target) {
    if (!(rule instanceof CSSStyleRule))
        return; // media and import rules ignored
    let b = prefixSelectors(rule.selectorText, `[${target[0]}='${target[1]}']`);
    rule.selectorText = b;
}

class SkribiChild extends obsidian.MarkdownRenderChild {
    constructor(plugin, el) {
        super(el);
        this._entryPacket = null;
        this.intervals = [];
        this.cbOnUnload = [];
        this.cbOnPost = [];
        this.isPost = false; // True when container has attached to document 
        this.state = "pre";
        this.sources = {
            templates: [],
            styles: [],
            integrations: [],
            scripts: []
        };
        this.plugin = plugin;
    }
    provideContext() {
        return {
            el: this.containerEl,
            registerInterval: this.skRegisterInterval.bind(this),
            registerUnload: this.skRegisterUnload.bind(this),
            registerEvent: this.skRegisterEvent.bind(this),
            registerPost: this.skRegisterPost.bind(this),
            addStyle: this.skAddStyle.bind(this),
            reload: this.rerender,
            _c: this
        };
    }
    scriptsUpdated(id) {
        if (this.plugin.settings.autoReload) {
            if (!isExtant(id) || this.sources.scripts.contains(id))
                this.rerender();
        }
    }
    pluginUpdated(id, loading) {
        if (this.plugin.settings.autoReload) {
            if (this.sources.integrations.contains(id)) {
                if (loading) {
                    timers.setTimeout(() => this.rerender(), 100);
                }
                else
                    this.rerender();
            }
        }
    }
    templatesUpdated(id, newId) {
        if (this.plugin.settings.autoReload) {
            if (((this === null || this === void 0 ? void 0 : this.templateKey) == id) || this.sources.templates.contains(id)) {
                dLog("Child received template update notification that matched one of its sources", id, this);
                this.rerender((id == (this === null || this === void 0 ? void 0 : this.templateKey)) ? id : null);
            }
        }
    }
    stylesUpdated(id) {
        if (this.plugin.settings.autoReload) {
            if ((this.sources.styles).contains(id)) {
                dLog("Child received style update notification that matched one of its sources", id, this);
                this.rerender();
            }
        }
    }
    listenFor(type, id) {
        let l = (type == "style" ? this.sources.styles : type == "template" ? this.sources.templates : null);
        if (l)
            l.push(id);
    }
    setPacket(packet) {
        if (this.packet == null) {
            this.packet = packet;
        }
    }
    collapse() {
        let pre = createEl('code', { text: this.source });
        this.containerEl.replaceWith(pre);
        this.unload();
    }
    reset() {
        let pre = createEl('code', { text: this.source });
        this.containerEl.replaceWith(pre);
        this.unload();
        console.log(this._entryPacket);
        // this._entryPacket[1] = this.containerEl.parentElement
        this.plugin.processor.processEntry(...this._entryPacket);
    }
    onload() { }
    /* NOT called by child.unload() (except sometimes it is) */
    onunload() {
        dLog("skreeb unload", this.containerEl);
        this.clear();
    }
    /* Called by rerender. */
    clear() {
        vLog("clear", this.containerEl);
        for (let i of this.intervals)
            window.clearInterval(i); // there might be cases where this doesn't get called properly (?)
        for (let cb of this.cbOnUnload)
            cb[0](cb[1]);
        // this.containerEl.parentNode.removeChild(this.containerEl)
        this.plugin.children.remove(this);
    }
    /* Called after render fulfillment */
    onPost() {
        this.isPost = true;
        this.state = "post";
        for (let cb of this.cbOnPost)
            cb[0](cb[1]);
    }
    /*-- Provider Functions --*/
    // Asynchronously adds a scoped style element to the container, from string str
    // Will not resolve until post (when element is attached to document, which is required for scopeStyle())
    // Returns reference to the created element
    // TODO: if aborted before post, will promise persist in memory?
    skAddStyle(str) {
        let s = createEl('style');
        s.innerHTML = str;
        this.containerEl.prepend(s);
        let p = () => {
            return new Promise((resolve, reject) => {
                this.skRegisterPost(() => {
                    resolve(scopeStyle(this, this.containerEl, s));
                });
            });
        };
        return p();
    }
    skRegisterInterval(cb, time, ...args) {
        //@ts-ignore
        let x = window.setInterval((...a) => {
            if (this._loaded == false) {
                window.clearInterval(x);
            }
            cb(...a);
        }, time * 1000, ...args);
        this.intervals.push(x);
        return x;
    }
    skRegisterEvent(event) {
        dLog('SkChild registered event:', event);
        this.registerEvent(event);
    }
    skRegisterUnload(cb, ...args) {
        this.cbOnUnload.push([(...x) => cb(...x), args]);
    }
    skRegisterPost(cb, ...args) {
        if (!this.isPost) {
            this.cbOnPost.push([(...x) => cb(...x), args]);
        }
        else {
            ((...x) => cb(...x))(args);
        }
    }
    // Assigned in renderSkribi()
    rerender(...args) { }
}

class SuggestionModal extends obsidian.FuzzySuggestModal {
    constructor(plugin, manualOption) {
        super(plugin.app);
        this.manual = false;
        this.plugin = plugin;
        this.manual = manualOption;
    }
    getItems() {
        // if (this.manual) {
        // return ['%%MANUAL%%'].concat(this.plugin.eta.getCacheKeys())
        // } else {
        return this.plugin.eta.getCacheKeys();
        // }
    }
    renderSuggestion(item, el) {
        // if (this.manual && item.item == "%%MANUAL%%") {
        // el.
        // } else {
        el.setText(item.item);
        // }
    }
    getItemText(item) { return item; }
    onChooseItem(item, evt) {
        this.resolve(item);
    }
    openAndGetValue(resolve, reject) {
        return __awaiter(this, void 0, void 0, function* () {
            this.resolve = resolve;
            this.reject = reject;
            this.open();
        });
    }
}

var promptTypes;
(function (promptTypes) {
    promptTypes["string"] = "string";
})(promptTypes || (promptTypes = {}));

class InsertionModal extends obsidian.Modal {
    constructor(plugin, editor, id) {
        super(plugin.app);
        this.valFields = {};
        this.plugin = plugin;
        this.editor = editor;
        this.currentID = id.toString();
        this.containerEl.addClass("skribi-insertion-modal");
        this.titleEl.setText(l["modal.insert.title"]);
    }
    onOpen() {
        this.create();
    }
    create() {
        let s = new obsidian.Setting(this.contentEl);
        s.addDropdown((drop) => {
            drop
                .addOptions(toDupeRecord(this.plugin.eta.getCacheKeys()))
                .setValue(this.currentID)
                .onChange((v) => {
                this.currentID = v;
                let f = this.generateFields(fieldsDiv, this.currentID);
                ((f.length > 0) ? f[0] : this.textInput).inputEl.focus();
            });
        });
        let fieldsDiv = this.contentEl.createDiv({ cls: "skribi-modal-fields" });
        let t = new obsidian.Setting(this.contentEl);
        t.addText((te) => { this.textInput = te; return te; });
        t.setName(l["modal.insert.append"]);
        t.settingEl.addClass("skribi-modal-field-append");
        let f = this.generateFields(fieldsDiv, this.currentID);
        ((f.length > 0) ? f[0] : this.textInput).inputEl.focus();
        let confirm = new obsidian.Setting(this.contentEl);
        confirm.addButton((button) => button
            .setButtonText(l["modal.insert.insert"])
            .onClick(() => this.doInsert()));
        this.keypressRef = this.scope.register([], "Enter", this.doInsert.bind(this));
    }
    onClose() {
        this.scope.unregister(this.keypressRef);
    }
    generateFields(el, id) {
        var _a;
        el.empty();
        var arr = [];
        if ((_a = this.plugin.eta.templates.get(id)) === null || _a === void 0 ? void 0 : _a.frontmatter) {
            let fm = this.plugin.eta.templates.get(id).frontmatter;
            for (let v of Object.keys(fm)) {
                if (v.charAt(0) == "_") {
                    let vn = v.substring(1);
                    let fma = this.parsePromptVal(vn, fm[v]);
                    let s = new obsidian.Setting(el);
                    s.settingEl.addClass("skribi-modal-template-field");
                    if (fma.type == promptTypes.string) {
                        arr.push(this.createTextField(s, fma));
                    }
                    s.setName(fma.name);
                }
            }
        }
        return arr;
    }
    createTextField(set, fma) {
        let t;
        set.addText((text) => {
            text
                .setValue(fma.default)
                .setPlaceholder(fma.placeholder)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.valFields[fma.id] = value;
            }));
            text.inputEl.addClass("skribi-text-input");
            t = text;
        });
        if (fma.default.length > 0)
            this.valFields[fma.id] = fma.default;
        return t;
    }
    parsePromptVal(k, val) {
        let v = {
            id: k,
            type: promptTypes.string,
            name: isExtant(val === null || val === void 0 ? void 0 : val.name) ? val.name : k,
            placeholder: isExtant(val === null || val === void 0 ? void 0 : val.placeholder) ? val.placeholder : "",
            default: isExtant(val === null || val === void 0 ? void 0 : val.default) ? val.default : isExtant(val === null || val === void 0 ? void 0 : val.def) ? val.def : "",
        };
        return v;
    }
    doInsert() {
        let id = this.currentID;
        let osel = this.editor.listSelections();
        let toInsert = `\`{:${id}`;
        for (let e of Object.entries(this.valFields)) {
            toInsert += ` | ${e[0]}: ${e[1]}`;
        }
        toInsert += ((this === null || this === void 0 ? void 0 : this.textInput.getValue().length) > 0) ? " | " + this.textInput.getValue() : "";
        toInsert += `}\``;
        this.editor.getDoc().replaceSelection(toInsert);
        let nsel = [];
        for (let p of osel) {
            nsel.push({ from: { line: p.anchor.line, ch: p.anchor.ch + (toInsert.length) } });
        }
        this.editor.transaction({ selections: nsel });
        this.close();
    }
}

const maximumIterations = 10000;
class TestModal extends obsidian.Modal {
    constructor(plugin, autofill) {
        super(plugin.app);
        this.iterations = 10;
        this.multiBlock = false;
        this.valFields = {};
        this.autofill = null;
        this.plugin = plugin;
        this.autofill = autofill;
        this.containerEl.addClass("skribi-test-modal");
        this.titleEl.setText(l['modal.perf.title']);
        let desc = createDiv({ cls: 'skribi-modal-desc' });
        makeExternalLink(desc.createEl('a', { text: l['documentation'], attr: { 'href': linkDocs('commands/performance') } }));
        desc.insertAfter(this.titleEl);
    }
    onOpen() {
        this.create();
    }
    create() {
        let fieldTextToEval = new obsidian.Setting(this.contentEl);
        fieldTextToEval.addTextArea((text) => { this.textFieldToEval = text; return text; });
        fieldTextToEval.setName(l["modal.perf.textToEvaluate.name"]);
        fieldTextToEval.setDesc(l["modal.perf.textToEvaluate.desc"]);
        this.textFieldToEval.setPlaceholder(l["modal.perf.textToEvaluate.placeholder"]);
        if (this.autofill) {
            fieldTextToEval.infoEl.append(createDiv({ text: `Autofilled from ${this.autofill.type}`, cls: 'setting-item-description skribi-autofill-notification' }));
            this.textFieldToEval.setValue(this.autofill.value);
        }
        let fieldIterations = new obsidian.Setting(this.contentEl);
        let iters = fieldIterations.controlEl.createEl('input', { attr: { type: 'number' } });
        iters.defaultValue = this.iterations.toString();
        iters.onchange = (ev) => { this.iterations = iters.valueAsNumber; };
        fieldIterations.setName(l["modal.perf.evalIterations.name"]);
        fieldIterations.setDesc(l["modal.perf.textToEvaluate.desc"]);
        let blockSetting = new obsidian.Setting(this.contentEl);
        blockSetting.addToggle((tog) => {
            tog.setValue(this.multiBlock);
            tog.onChange((v) => this.multiBlock = v);
            return tog;
        });
        blockSetting.setName(l["modal.perf.evalBlocks"]);
        let confirm = new obsidian.Setting(this.contentEl).setClass('skribi-button-eval');
        confirm.addButton((button) => button
            .setButtonText(l["modal.perf.evaluate"])
            .onClick(() => this.doEval()));
        this.keypressRef = this.scope.register([], "Enter", this.doEval.bind(this));
        this.contentEl.createEl('hr');
        this.resultsField = this.contentEl.createDiv({ cls: "skribi-test-results-field" });
    }
    onClose() {
        this.scope.unregister(this.keypressRef);
    }
    doEval() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.plugin.initLoaded) {
                this.resultsField.setText("Template cache not ready!");
                return;
            }
            let container = createDiv();
            let el = createDiv();
            let blocksToProcess = [];
            let toIter = Math.min(this.iterations, maximumIterations);
            if (this.multiBlock) {
                for (let i = 0; i < toIter; i++) {
                    let d = createDiv();
                    d.createEl('code', { text: this.textFieldToEval.getValue() });
                    blocksToProcess.push(d);
                }
            }
            else {
                let singleDiv = createDiv();
                for (let i = 0; i < toIter; i++) {
                    singleDiv.createEl('code', { text: this.textFieldToEval.getValue() });
                }
                blocksToProcess.push(singleDiv);
            }
            let timeStart = window.performance.now();
            const proms = blocksToProcess.map((div) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let promiseStartTime = window.performance.now();
                let promise = yield this.plugin.processor.processEntry({ srcType: "GENERAL" /* general */ }, div, {
                    remainingNestLevel: 4,
                    docId: '55555555',
                    frontmatter: null,
                    sourcePath: ((_a = this.plugin.app.workspace.getActiveFile()) === null || _a === void 0 ? void 0 : _a.path) || "",
                    addChild: (child) => { },
                    getSectionInfo: () => { return null; },
                    containerEl: container,
                    el: el
                }, 4, false, null).catch(() => { });
                return [promise, window.performance.now(), promiseStartTime];
            }));
            this.resultsField.setText(l["modal.perf.evaluating"]);
            let settledValues = yield Promise.allSettled(proms);
            vLog(`Performance test settled in: ${roundTo(window.performance.now() - timeStart, 3)}ms`);
            let fullfilled = settledValues.map((v) => { if (v.status == 'fulfilled')
                return v.value; });
            console.log(fullfilled);
            let times = fullfilled.map((result) => (result[1] - result[2]));
            let avg = average(...times);
            let p = [];
            fullfilled.map(res => res[0].map((a) => p.push(a)));
            let children = (yield Promise.allSettled(p)).map((rez) => { if (rez.status == "fulfilled")
                return rez.value[1]; });
            this.resultsField.setText(`${l["modal.perf.results"]} (${children.length} children in ${l._((times.length > 1 ? "modal.perf.resultsBlockCount.plural" : "modal.perf.resultsBlockCount.single"), times.length.toString())}): ${roundTo(avg, 3)}ms`);
            // invokeMethodOf<SkribiChild>("clear", ...children) // Unload doesn't seem to be invoked consistently so let's just make sure everything is cleared
            Array.from(children).forEach((child) => child.clear());
            blocksToProcess.map(block => block.remove()); // Children are easier to collect when they lack shelter
            container.remove();
            el.remove(); // One day, the last person who remembers you will die, and you will be forgotten forever
        });
    }
}

const extImg = ["bmp", "png", "jpg", "jpeg", "gif", "svg"];
const extAud = ["mp3", "wav", "m4a", "3gp", "flac", "ogg", "oga"];
const extVid = ["mp4", "webm", "ogv"];
const extTxt = ["md"];
/* Repairs media embeds that have been rendered to markdown */
function embedMedia(el, srcPath, plugin, depth, self) {
    return __awaiter(this, void 0, void 0, function* () {
        dLog("embed self:", self);
        dLog("embed:", el);
        var proms = [];
        const catches = el.querySelectorAll("span.internal-embed");
        let elDepth = el.getAttribute("depth");
        let d = (isExtant(elDepth) ? parseInt(elDepth) : isExtant(depth) ? depth : 0);
        dLog("embedder depth:", d);
        for (let fish of Array.from(catches)) {
            if (fish.hasClass("is-loaded"))
                continue;
            let src = obsidian.normalizePath(fish.getAttribute("src"));
            let dest = plugin.app.metadataCache.getFirstLinkpathDest(src, srcPath);
            if (dest) {
                let path = plugin.app.vault.adapter.getResourcePath(dest.path);
                let ext = dest.extension;
                if (extImg.contains(ext)) { // Embed Image
                    fish.addClass("image-embed");
                    fish.childNodes.forEach((n) => { fish.removeChild(n); });
                    let nel = fish.createEl("img");
                    nel.setAttribute("src", path);
                }
                else if (extAud.contains(ext)) { // Embed Audio
                    fish.addClass("media-embed");
                    fish.childNodes.forEach((n) => { fish.removeChild(n); });
                    let nel = fish.createEl("audio", { "attr": { "controls": true } });
                    nel.setAttribute("src", path);
                }
                else if (extVid.contains(ext)) { // Embed Video
                    fish.childNodes.forEach((n) => { fish.removeChild(n); });
                    let vidiv = fish.createEl("video", { "attr": { "controls": true } });
                    vidiv.setAttribute("src", path);
                }
                else if (extTxt.contains(ext)) {
                    /* Embed Transclusion */
                    const createEmbedPromise = () => {
                        return new Promise(() => __awaiter(this, void 0, void 0, function* () {
                            dLog("new embed prom");
                            fish.childNodes.forEach((n) => { fish.removeChild(n); });
                            let cache = plugin.app.metadataCache.getCache(dest.path);
                            let read = yield plugin.app.vault.cachedRead(dest);
                            let classes = obsidian.parseFrontMatterStringArray(cache === null || cache === void 0 ? void 0 : cache.frontmatter, "cssclass");
                            let div = fish.createDiv({ cls: "markdown-embed" });
                            div.createDiv({ cls: "markdown-embed-title", text: dest.basename });
                            let content = div.createDiv({ cls: "markdown-embed-content" });
                            let link = div.createDiv({ cls: "markdown-embed-link" });
                            obsidian.setIcon(link, "link");
                            link.onClickEvent((e) => {
                                e.preventDefault();
                                plugin.app.workspace.openLinkText(src, srcPath);
                            });
                            let pv = content.createDiv({ cls: "markdown-preview-view" });
                            pv.addClazz(classes);
                            let ps = pv.createDiv({ cls: "markdown-preview-sizer markdown-preview-section" });
                            let mkh = createDiv({ attr: { "depth": depth.toString() } });
                            yield obsidian.MarkdownRenderer.renderMarkdown(read, mkh, srcPath, null);
                            const mke = (Array.from((mkh === null || mkh === void 0 ? void 0 : mkh.childNodes) || []).map((n) => {
                                // if (n.childNodes.length > 0) { let d = createDiv(); d.append(n.cloneNode(true)); return d;} else return n;}));
                                if (n.childNodes.length > 0) {
                                    let d = createDiv();
                                    d.append(n);
                                    return d;
                                }
                                else
                                    return n;
                            }));
                            ps.append(...mke); //ps.setAttribute("depth", d.toString())
                            return embedMedia(ps, srcPath, plugin, d - 1, true);
                        }));
                    };
                    if (d <= 0) {
                        // let [regent] = createRegent({class: REGENT_CLS.depth, hover: l["regent.depth.hover"]})
                        // fish.replaceWith(regent)
                        renderRegent(fish, { class: REGENT_CLS.depth, hover: l["regent.depth.hover"] });
                        dLog("embedder hit limit");
                    }
                    else {
                        proms.push(createEmbedPromise());
                    }
                }
            }
        }
        return Promise.allSettled(proms).then(values => {
            dLog("embedder done", proms);
            return Promise.resolve(proms.length);
        });
    });
}

/* Check if code block is that good good and if so what type of good good */
function preparseSkribi(el, str, flg) {
    return __awaiter(this, void 0, void 0, function* () {
        let text = isExtant(str) ? str : el.textContent;
        if (text.length < 3)
            return;
        let e = text.substr(text.length - 2);
        let s = text.substr(0, 2);
        if (s.startsWith("{") && e.endsWith("}")) {
            let f = s[1];
            let flag = (f == ":") ? 1 : (f == "=") ? 2 : (f == "~") ? 3 : (f == "{") ? 4 : (f == ".") ? 5 : -1;
            if ((flag > 0) && (flag != 4 || (e == "}}"))) {
                return { flag: flag, text: text.substring(2, text.length - (flag == 4 ? 2 : 1)) };
            }
            else
                return;
        }
        else
            return;
    });
}
/* Parse variables in template invocations */
function parseSkribi(src) {
    return __awaiter(this, void 0, void 0, function* () {
        let sa = src.split(/(?<![\\])\|/);
        let id = sa.splice(0, 1)[0].trim();
        let args = {};
        for (let seg of sa) {
            let si = seg.indexOf(":");
            if (si == -1)
                continue;
            args[seg.slice(0, si).trim()] = seg.slice(si + 1).trim();
        }
        return { id: id, args: { v: args } };
    });
}

class SkribiProcessor {
    constructor(plugin) {
        this.queuedTemplates = [];
        this.plugin = plugin;
        this.eta = plugin.eta;
    }
    /**
     * Register our markdown processors. */
    registerProcessors() {
        const processCodeSpan = (el, ctx) => __awaiter(this, void 0, void 0, function* () { this.processEntry({ srcType: "GENERAL" /* general */ }, el, ctx); });
        this.plugin.registerMarkdownPostProcessor((el, ctx) => processCodeSpan(el, ctx));
        const processCodeBlock = (mode, str, el, ctx) => __awaiter(this, void 0, void 0, function* () { this.processEntry(mode, el, ctx, null, null, str.trimEnd()); });
        ([["normal", "", 0 /* none */], ["raw", "-raw", 3 /* raw */], ["literal", "-lit", 4 /* literal */], ["interpolate", "-int", 2 /* interp */], ["evaluate", "-eval", 5 /* eval */]])
            .forEach((v) => {
            this.plugin.registerMarkdownCodeBlockProcessor(`skribi${v[1]}`, processCodeBlock.bind(this, { srcType: "BLOCK" /* block */, flag: v[2] }));
            this.plugin.registerMarkdownCodeBlockProcessor(`sk${v[1]}`, processCodeBlock.bind(this, { srcType: "BLOCK" /* block */, flag: v[2] }));
        });
    }
    /** Entry to the Skribi process chain. Called:
     * - By MarkdownView on each block of a markdown preview
     * - By MarkdownView on code blocks of our register language types
     * - By renderSkribi to recurse nested skribis */
    processEntry(mode, // 0: codespan; 1: codeblock;
    doc, ctx, depth, self, srcIn) {
        return __awaiter(this, void 0, void 0, function* () {
            let entryPacket = [mode, doc, ctx, depth, self, srcIn];
            let nestExtant = isExtant(ctx.remainingNestLevel);
            let nestLevel = nestExtant ? ctx.remainingNestLevel : null;
            /* nestExtant means that we are inside of a natural transclusion */
            self = isExtant(self);
            depth = self ? depth : null;
            /* self means that we have been called by renderSkribi, to look for codeblocks */
            let elHasDepth = isExtant(doc.getAttribute("depth"));
            let elElHasDepth = isExtant(ctx.el.getAttribute("depth"));
            let elDepth = elHasDepth ? parseInt(doc.getAttribute("depth")) : elElHasDepth ? parseInt(ctx.el.getAttribute("depth")) : null;
            /* Used for passing depth to virtual elements (we may be in one even as we speak...)*/
            /* determine our depth condition type */
            let d = self ? depth : (elHasDepth || elElHasDepth) ? elDepth : nestExtant ? nestLevel : 0;
            if (!nestExtant && !(elHasDepth || elElHasDepth))
                dLog("processor sees no depth");
            if (elHasDepth) {
                dLog("elDepth", elDepth, "doc", doc, "el", ctx.el, "conEl", ctx.containerEl);
            }
            else {
                dLog("processor: ", "doc", doc, "el", ctx.el, "conEl", ctx.containerEl, "nest", ctx.remainingNestLevel);
            }
            /* Dispatch render promises */
            var proms = [];
            var tproms = [];
            var temps = 0;
            const elCodes = (mode.srcType == "BLOCK" /* block */) ? [doc] : doc.querySelectorAll("code");
            if (!(d <= 0)) {
                window.performance.now();
                const elProms = Array.from(elCodes).map((el) => __awaiter(this, void 0, void 0, function* () {
                    if (el.matches('.no-skribi'))
                        return Promise.resolve();
                    let t = window.performance.now();
                    dLog("start:", t);
                    let src = (isExtant(mode.flag) && mode.flag != 0 /* none */) ?
                        { text: srcIn || doc.textContent, flag: mode.flag } : yield preparseSkribi(el);
                    let originalText = (mode.srcType == "BLOCK" /* block */) ? srcIn : el.textContent;
                    try {
                        if (src != null) {
                            let skCtx = { time: window.performance.now(), depth: d, flag: src.flag, source: originalText, entryPacket: entryPacket };
                            let nel = renderRegent(el, { class: REGENT_CLS.eval, hover: l['regent.loading.hover'] });
                            if (src.flag == 1) {
                                tproms.push(this.awaitTemplatesLoaded({ el: nel, src: src.text, mdCtx: ctx, skCtx: skCtx })
                                    .catch(e => { console.warn(`Skribi: Dispatch Errored (Template)`, EBAR, e); }));
                                temps++;
                            }
                            else {
                                proms.push(this.processSkribi(nel, src.text, ctx, skCtx)
                                    .catch(e => { console.warn(`Skribi: Dispatch Errored`, EBAR, e); }));
                            }
                        }
                    }
                    catch (e) {
                        if (!e.flags.noRender) {
                            renderError(el, e);
                        }
                    }
                    return Promise.resolve();
                }));
                yield Promise.allSettled(elProms);
                if ((!this.plugin.initLoaded) && tproms.length > 0) {
                    vLog(`Queued ${tproms.length} templates`);
                }
                return proms.concat(tproms);
            }
            else {
                /* Depth too high! */
                elCodes.forEach((el) => __awaiter(this, void 0, void 0, function* () {
                    preparseSkribi(el).then((src) => __awaiter(this, void 0, void 0, function* () {
                        if (src != null) {
                            renderState(el, { class: REGENT_CLS.stasis, hover: l['regent.stasis.hover'], noRegent: true, });
                            // renderRegent(el, {class: REGENT_CLS.stasis, hover: l['regent.stasis.hover']})
                        }
                    }));
                }));
                dLog("processor hit limit");
                return Promise.resolve(null); // Postprocessor calls are not caught so we can't reject neatly.
            }
        });
    }
    /** Queues templates to process on initial template load completion, or processes them immediately if ready. */
    awaitTemplatesLoaded(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isExtant(this.plugin.eta.loader.initError)) {
                return yield this.processSkribiTemplate(args.el, args.src, args.mdCtx, args.skCtx);
            }
            let el = this.plugin.initLoaded
                ? renderRegent(args.el, { class: REGENT_CLS.eval, hover: l['regent.loading.hover'], clear: true })
                : renderRegent(args.el, { class: REGENT_CLS.wait, hover: l["regent.wait.hover"], clear: true });
            return (this.plugin.initLoaded)
                ? yield this.processSkribiTemplate(el, args.src, args.mdCtx, args.skCtx)
                : new Promise((resolve, reject) => {
                    let activate = (ele, time) => {
                        resolve(this.processSkribiTemplate(ele, args.src, args.mdCtx, Object.assign(args.skCtx, { time: time })));
                    };
                    this.queuedTemplates.push({ function: activate, element: el });
                });
        });
    }
    /** Called on template init load complete. Fires off all of the queued templates. */
    templatesReady() {
        let proms = this.queuedTemplates.map((queued) => {
            let el = renderRegent(queued.element, { class: REGENT_CLS.eval, hover: l['regent.loading.hover'] });
            return queued.function(el, window.performance.now());
        });
        Promise.allSettled(proms).then(() => { this.queuedTemplates = []; });
    }
    /** Parse variables and prep the template */
    processSkribiTemplate(el, src, mdCtx, skCtx) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            let parsed = null;
            try {
                parsed = yield parseSkribi(src);
            }
            catch (e) {
                renderError(el, e);
                return Promise.reject('Parsing Error');
            }
            /* Abort if being rendered in its own definition */
            if (((_a = this.plugin.app.metadataCache.getFirstLinkpathDest("", mdCtx.sourcePath)) === null || _a === void 0 ? void 0 : _a.basename) == parsed.id) {
                renderRegent(el, { class: REGENT_CLS.self, hover: l['Render Aborted: within self definition'] });
                return Promise.reject('Within Self Definition');
            }
            let template = (_b = this.eta.getPartial(parsed.id)) === null || _b === void 0 ? void 0 : _b.function;
            if (!isExtant(template)) {
                if (this.eta.failedTemplates.has(parsed.id)) {
                    el = yield renderError(el, { msg: `Template ${parsed.id} exists but failed to compile, with error:` + EBAR + this.eta.failedTemplates.get(parsed.id).error });
                }
                else {
                    el = yield renderError(el, { msg: `SkribiError: Cannot read undefined template '${parsed.id}' (no such template exists)` });
                }
                /* We intentionally attempt to render the template even though we know it doesn't exist,
                because it will be caught and converted into a ghost listener. */
            }
            return this.renderSkribi(el, template, parsed.id, mdCtx, Object.assign({}, skCtx, { ctx: parsed.args }));
        });
    }
    /** Wrap non-template skribis in tags as determined by their type flag */
    processSkribi(el, src, mdCtx, skCtx) {
        return __awaiter(this, void 0, void 0, function* () {
            const prep = function (str, flag) {
                switch (flag) {
                    case 2: return `<%=${src}%>`;
                    case 3: return `<%~${src}%>`;
                    case 4: return str;
                    case 5: return `<%${src}%>`;
                }
            };
            return this.renderSkribi(el, prep(src, skCtx.flag), "literal", mdCtx, skCtx);
        });
    }
    /** Main skribi rendering function */
    renderSkribi(el, con, id, mdCtx, skCtx) {
        return __awaiter(this, void 0, void 0, function* () {
            let handled = false;
            let file = this.plugin.app.metadataCache.getFirstLinkpathDest("", mdCtx.sourcePath);
            let newElement = createDiv({ cls: "skribi-render-virtual" });
            let child = new SkribiChild(this.plugin, newElement);
            Object.assign(child, {
                /* We assign rerender here for the closure */
                rerender: ((templateToRetrieve) => {
                    var _a;
                    let nskCtx = Object.assign({}, skCtx, { time: window.performance.now() });
                    if (skCtx.flag == 1 && isExtant(templateToRetrieve)) {
                        let template = (_a = this.eta.getPartial(templateToRetrieve)) === null || _a === void 0 ? void 0 : _a.function;
                        child.unload();
                        this.renderSkribi(newElement, template, templateToRetrieve, mdCtx, nskCtx);
                    }
                    else {
                        child.unload();
                        this.renderSkribi(newElement, con, id, mdCtx, nskCtx);
                    }
                }).bind(this),
                templateKey: (skCtx.flag == 1) ? id : null,
                source: skCtx.source,
                _entryPacket: skCtx.entryPacket
            });
            let ctx = Object.assign({}, (skCtx === null || skCtx === void 0 ? void 0 : skCtx.ctx) || {}, { child: child.provideContext() });
            let [rendered, packet] = yield this.eta.renderAsync(con, ctx, file)
                .catch((err) => {
                var _a, _b, _c, _d, _e;
                if (con === undefined && !this.eta.hasPartial(id)) {
                    if (isExtant(this.plugin.eta.loader.initError)) {
                        /* Loader failed to init */
                        err = this.plugin.eta.loader.initError;
                    }
                    else {
                        /* Template skribi's template does not exist (intentionally not caught until this point) */
                        let failed = this.eta.failedTemplates.has(id);
                        let msg = `Cannot read template '${id}'`;
                        msg += failed ? `\nTemplate exists, but failed to compile` : `\nNo such entry found`;
                        let nerr = new SkribiError(msg);
                        if (failed)
                            con = skCtx.source;
                        let stack = msg;
                        let info = mdCtx.getSectionInfo(mdCtx.el);
                        if (info) {
                            stack += `\n    at (${(_a = ((file === null || file === void 0 ? void 0 : file.name) ? `'/${file.name}'` : null)) !== null && _a !== void 0 ? _a : "source"}) `;
                            stack += (info.lineStart == info.lineEnd)
                                ? `line: ${info.lineStart + 1}`
                                : `lines: ${info.lineStart + 1} to ${info.lineEnd + 1}`;
                        }
                        nerr.stack = stack;
                        Object.assign(nerr, {
                            subErr: err,
                            _sk_templateFailure: failed
                                ? { id: id, error: this.eta.failedTemplates.get(id).error }
                                : undefined,
                            _sk_nullTemplate: failed ? null : id
                        });
                        err = nerr;
                    }
                }
                Object.assign(err, {
                    hasData: true,
                    _sk_invocation: (_b = err === null || err === void 0 ? void 0 : err._sk_invocation) !== null && _b !== void 0 ? _b : skCtx.source,
                    _sk_template: (_d = (skCtx.flag == 1 && ((_c = this.eta.getPartial(id)) === null || _c === void 0 ? void 0 : _c.source))) !== null && _d !== void 0 ? _d : null,
                    class: (err instanceof SkribiError) ? err.regentClass : REGENT_CLS.error
                });
                logError(err);
                renderError(el, (err === null || err === void 0 ? void 0 : err.hasData) ? err : { msg: ((_e = err === null || err === void 0 ? void 0 : err.msg) !== null && _e !== void 0 ? _e : err) || "Render Error"
                }).then(errEl => {
                    /* Alter the child so that it may yet live (and listen for source updates) */
                    Object.assign(child, {
                        containerEl: errEl,
                        state: "error",
                        rerender: ((templateToRetrieve) => {
                            let nskCtx = Object.assign({}, skCtx, { time: window.performance.now() });
                            if (skCtx.flag == 1 && isExtant(templateToRetrieve)) {
                                let template = this.eta.getPartial(templateToRetrieve).function;
                                child.unload();
                                this.renderSkribi(errEl, template, templateToRetrieve, mdCtx, nskCtx);
                            }
                            else {
                                child.unload();
                                this.renderSkribi(errEl, con, id, mdCtx, nskCtx);
                            }
                        }).bind(this),
                    });
                    mdCtx.addChild(child);
                    this.plugin.children.push(child);
                });
                handled = true;
                return Promise.resolve([null, null]);
            });
            /* END ERROR HANDLING */
            /* RENDERING */
            dLog("renderSkribi:", el, mdCtx, skCtx, id);
            if (isExtant(rendered)) {
                let d = isExtant(mdCtx.remainingNestLevel) ? mdCtx.remainingNestLevel : (skCtx.depth);
                let style = stripStyleFromString(rendered); // renderMarkdown ignores style nodes so we'll just yoink em 
                if (style[1]) {
                    rendered = style[0];
                }
                let render = ((packet === null || packet === void 0 ? void 0 : packet['noMarkdown'])
                    ? this.simpleRender(rendered, newElement)
                    : obsidian.MarkdownRenderer.renderMarkdown(rendered, newElement, mdCtx.sourcePath, null))
                    .then(() => {
                    /* this bit disabled because it kills other skribis rendering in the same block */
                    // if (el?.parentElement?.nodeName == "P") { // true when (mode == Mode.block)
                    // el.parentElement.replaceWith(el) // strip the superfluous P element
                    // }
                    newElement.setAttribute("skribi", (skCtx.flag == 1) ? 'template' : id);
                    if (skCtx.flag == 1) {
                        newElement.setAttribute("skribi-template", id);
                    }
                    newElement.removeClass(CLS.virtual);
                    if (!newElement.getAttr("class")) {
                        newElement.removeAttribute("class");
                    }
                    let shade;
                    if (this.plugin.settings.shadowMode) {
                        /* it seems that non-codeblock skribis do not survive this process */
                        let nel = createDiv();
                        el === null || el === void 0 ? void 0 : el.parentElement.prepend(nel);
                        nel.setAttr('skribi-host', '');
                        console.log(el);
                        shade = nel.attachShadow({ mode: 'open' });
                        shade.append(newElement);
                        el.remove();
                    }
                    else {
                        el.replaceWith(newElement);
                    }
                    dLog("finish: ", skCtx.time, window.performance.now());
                    if (style[1]) {
                        if (this.plugin.settings.shadowMode) {
                            shade.append(style[1]);
                            // newElement.prepend(style[1])
                        }
                        else {
                            newElement.prepend(style[1]);
                            scopeStyle(child, newElement, style[1]);
                        }
                    }
                    if (skCtx.flag == 1) {
                        vLog(`Rendered template "${id}" (${roundTo(window.performance.now() - skCtx.time, 4)} ms)`, newElement);
                    }
                    else
                        vLog(`Rendered literal (f: ${skCtx.flag}) (${roundTo(window.performance.now() - skCtx.time, 4)} ms)`, newElement);
                    return Promise.resolve(newElement);
                });
                child.setPacket(packet);
                mdCtx.addChild(child);
                this.plugin.children.push(child);
                render.then((e) => {
                    child.onPost();
                    // TODO: only restrict depth for transclusions
                    if (isExtant(mdCtx.remainingNestLevel) && (mdCtx.remainingNestLevel > 0) || !isExtant(mdCtx.remainingNestLevel)) {
                        return embedMedia(e, mdCtx.sourcePath, this.plugin, skCtx.depth);
                    }
                    else
                        return Promise.resolve();
                })
                    .then((x) => {
                    dLog("renderer final: ", d);
                    this.processEntry({ srcType: "GENERAL" /* general */ }, newElement, mdCtx, skCtx.depth - 1, true); /* Recurse the processor to parse skreeblings */
                });
                return [render, child];
            }
            else if (!handled) {
                child.clear();
                return Promise.reject("Unknown Render Error");
            }
        });
    }
    /* End of processor chain */
    simpleRender(content, el) {
        return __awaiter(this, void 0, void 0, function* () {
            el.innerHTML = content;
            console.log(el);
            return Promise.resolve();
        });
    }
}

class TemplateSuggest extends obsidian.EditorSuggest {
    constructor(plugin) {
        super(plugin.app);
        this.plugin = plugin;
    }
    onTrigger(cursor, editor, file) {
        var _a, _b, _c;
        if (this.plugin.settings.templateSuggest) {
            let soFar = editor.getLine(cursor.line).substr(0, cursor.ch);
            let match = (/^.*`{:([^}]*)$/gs).exec(soFar);
            // console.log(match)
            if (match === null || match === void 0 ? void 0 : match[0]) {
                let m = match[1].match(/\|([^\|]*)$/);
                // console.log("m", m)
                return {
                    end: cursor,
                    start: {
                        ch: isExtant(m === null || m === void 0 ? void 0 : m[1]) ? (cursor.ch - m[1].length) : (match[0].length - ((_b = (_a = match[1]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0)),
                        line: cursor.line
                    },
                    query: (_c = match === null || match === void 0 ? void 0 : match[1]) !== null && _c !== void 0 ? _c : ""
                };
            }
        }
    }
    getSuggestions(context) {
        var _a;
        let has = context.query.match(/^(.*)\|([^\:]*$)/s);
        // console.log(has)
        if (has) {
            let ind = context.query.indexOf("|");
            let key = context.query.substr(0, ind).trim();
            let tp = this.plugin.eta.templates.get(key);
            if (tp === null || tp === void 0 ? void 0 : tp.frontmatter) {
                (_a = has === null || has === void 0 ? void 0 : has[2]) === null || _a === void 0 ? void 0 : _a.trim();
                // console.log(pk)
                return Object.keys(tp.frontmatter)
                    .filter(k => { var _a; return (k.substr(1).startsWith((_a = has === null || has === void 0 ? void 0 : has[2]) === null || _a === void 0 ? void 0 : _a.trimStart()) && !(k.substring(1).trim() == (has === null || has === void 0 ? void 0 : has[2].trim()))); })
                    .map((v) => v.substr(1));
            }
        }
        else {
            let keys = this.plugin.eta.getCacheKeys();
            // console.log('query:', context?.query)
            let ret = (context === null || context === void 0 ? void 0 : context.query) ? keys.filter(key => (key.startsWith(context.query) && !(key == context.query))) : keys;
            // console.log(ret)
            return ret;
        }
    }
    renderSuggestion(value, el) {
        el.addClass("skribi-suggestion");
        el.createSpan({ text: value });
        // console.log(el.cloneNode(true))
        // console.log(el.parentElement.parentElement.cloneNode(true))
    }
    selectSuggestion(value, evt) {
        var _a;
        if (this.context) {
            // let conLength = this.context.end.ch - this.context.start.ch
            // let preLength = conLength - (this.context.query.length + 3)
            let line = this.context.editor.getLine(this.context.start.line);
            let bar = line.match(/^.*(\`\{\:([^\|]*\|)*)/s);
            // console.log('bar\n', bar)
            // console.log('query\n', this.context.query)
            // console.log('pre\n', line.substr(preLength, preLength + bar?.[0].length))
            // console.log('line\n', line)
            let ch = (_a = ((bar && (bar === null || bar === void 0 ? void 0 : bar[0])) ? bar[0].length : null)) !== null && _a !== void 0 ? _a : this.context.start.ch;
            // console.log(line.charAt(ch-1))
            this.context.editor.replaceRange(((line.charAt(ch - 1) == ":") ? "" : " ") + value, {
                line: this.context.start.line,
                ch: ch
            }, this.context.end);
        }
    }
}

function around(obj, factories) {
    const removers = Object.keys(factories).map(key => around1(obj, key, factories[key]));
    return removers.length === 1 ? removers[0] : function () { removers.forEach(r => r()); };
}
function around1(obj, method, createWrapper) {
    const original = obj[method], hadOwn = obj.hasOwnProperty(method);
    let current = createWrapper(original);
    // Let our wrapper inherit static props from the wrapping method,
    // and the wrapping method, props from the original method
    if (original)
        Object.setPrototypeOf(current, original);
    Object.setPrototypeOf(wrapper, current);
    obj[method] = wrapper;
    // Return a callback to allow safe removal
    return remove;
    function wrapper(...args) {
        // If we have been deactivated and are no longer wrapped, remove ourselves
        if (current === original && obj[method] === wrapper)
            remove();
        return current.apply(this, args);
    }
    function remove() {
        // If no other patches, just do a direct removal
        if (obj[method] === wrapper) {
            if (hadOwn)
                obj[method] = original;
            else
                delete obj[method];
        }
        if (current === original)
            return;
        // Else pass future calls through, and remove wrapper from the prototype chain
        current = original;
        Object.setPrototypeOf(wrapper, original || Function);
    }
}

class SkribosPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.varName = "sk";
        this.initLoaded = false;
        this.children = [];
        this.childProto = SkribiChild; // for dev memory querying 
        this.l = l; // for dev testing from console (import to us)
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Skribi: Loading...');
            // await this.loadSettings();
            yield this.initData();
            this.addSettingTab(new SkribosSettingTab(this.app, this));
            document.body.toggleClass(CLS.anim, this.settings.cssAnimations);
            this.eta = new EtaHandler(this);
            this.processor = new SkribiProcessor(this);
            this.processor.registerProcessors();
            this.registerEvent(this.app.workspace.on('skribi:template-init-complete', () => {
                this.initLoaded = true;
                this.processor.templatesReady();
            }));
            this.defineCommands();
            this.registerExtensions(['eta'], 'markdown');
            this.suggest = new TemplateSuggest(this);
            this.registerEditorSuggest(this.suggest);
            // registerMirror(this);
            /* Rerender preview views */
            this.app.workspace.onLayoutReady(() => {
                this.app.workspace.getLeavesOfType("markdown").forEach((leaf) => {
                    if (leaf.view.currentMode.type == "preview") {
                        leaf.view.previewMode.rerender(true);
                    }
                });
            });
            /* Register plugin status listeners (to listen for integration predicates) */
            const patchPluginLoad = around(this.app.plugins, {
                enablePlugin(old) {
                    return function (x) {
                        this.app.workspace.trigger("skribi:plugin-load", x);
                        return old.call(this, x);
                    };
                },
                disablePlugin(old) {
                    return function (x) {
                        this.app.workspace.trigger("skribi:plugin-unload", x);
                        return old.call(this, x);
                    };
                }
            });
            this.register(patchPluginLoad);
            this.registerEvent(this.app.workspace.on("skribi:plugin-load", (id) => {
                Array.from(this.children).forEach(child => child.pluginUpdated(id, true));
            }));
            this.registerEvent(this.app.workspace.on("skribi:plugin-unload", (id) => {
                Array.from(this.children).forEach(child => child.pluginUpdated(id));
            }));
        });
    }
    /** Register our commands. */
    defineCommands() {
        this.addCommand({ id: "insert-skribi", name: l['command.insert'],
            editorCallback: (editor, view) => {
                if (!this.initLoaded)
                    return;
                let x = new SuggestionModal(this);
                new Promise((resolve, reject) => x.openAndGetValue(resolve, reject))
                    .then(result => {
                    if (this.eta.hasPartial(result)) {
                        let i = new InsertionModal(this, editor, result);
                        i.open();
                    }
                }, (r) => { });
            } });
        this.addCommand({ id: "reload-scripts", name: l['command.reloadScripts'], callback: () => {
                this.eta.bus.scriptLoader.reload().then(() => console.log("Skribi: Reloaded Scripts"));
            } });
        this.addCommand({ id: "reload-skribis", name: "Reload Skribis", callback: () => {
                Array.from(this.children).forEach(child => child.rerender(child === null || child === void 0 ? void 0 : child.templateKey));
            } });
        this.addCommand({ id: "test-performance", name: l['command.perfTest'], callback: () => __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                let sel = (_b = (_a = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor) === null || _b === void 0 ? void 0 : _b.getSelection();
                let clip = yield window.navigator.clipboard.readText();
                let fill = (sel || clip) ? {
                    type: l[sel ? 'modal.perf.autofill.selection' : 'modal.perf.autofill.clipboard'],
                    value: sel ? sel : clip
                } : null;
                new TestModal(this, fill).open();
            }) });
        this.addCommand({ id: "view-templates", name: "View Templates", callback: () => {
                new IndexModal(this).open();
            } });
        this.addCommand({ id: "render-template", name: "Render Template", callback: () => {
                if (!this.initLoaded)
                    return;
                let x = new SuggestionModal(this, true);
                new Promise((resolve, reject) => x.openAndGetValue(resolve, reject))
                    .then(result => {
                    console.log(result);
                    if (this.eta.hasPartial(result)) {
                        let i = new RenderModal(this, result);
                        i.open();
                    }
                }, (r) => { });
            } });
        for (let preset of Object.entries(this.data.renderModalPresets)) {
            this.addCommand({ id: `render-preset_${preset[0]}`, name: `Render Preset - ${preset[1].name}`, callback: () => {
                    new RenderModal(this, preset[1].key, preset[1].append).open();
                } });
        }
    }
    onunload() {
        this.eta.unload();
        console.log('Skribi: Unloading...', this.children);
        Array.from(this.children).forEach((child) => {
            child.collapse();
        });
        document.body.removeClass(CLS.anim);
    }
    initData() {
        return __awaiter(this, void 0, void 0, function* () {
            this.data = Object.assign({}, yield this.loadData());
            this.settings = this.data.settings = Object.assign({}, DEFAULT_SETTINGS, this.data.settings);
            return this.writeData();
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    writeData() {
        return __awaiter(this, void 0, void 0, function* () { return this.saveData(this.data); });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () { return this.writeData(); });
    }
}

module.exports = SkribosPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
