/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var fs = require('fs');
var path = require('path');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function setPrototypeOf(obj, proto) {
    // eslint-disable-line @typescript-eslint/no-explicit-any
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(obj, proto);
    }
    else {
        obj.__proto__ = proto;
    }
}
// This is pretty much the only way to get nice, extended Errors
// without using ES6
/**
 * This returns a new Error with a custom prototype. Note that it's _not_ a constructor
 *
 * @param message Error message
 *
 * **Example**
 *
 * ```js
 * throw EtaErr("template not found")
 * ```
 */
function EtaErr(message) {
    var err = new Error(message);
    setPrototypeOf(err, EtaErr.prototype);
    return err;
}
EtaErr.prototype = Object.create(Error.prototype, {
    name: { value: 'Eta Error', enumerable: false }
});
/**
 * Throws an EtaErr with a nicely formatted error and message showing where in the template the error occurred.
 */
function ParseErr(message, str, indx) {
    var whitespace = str.slice(0, indx).split(/\n/);
    var lineNo = whitespace.length;
    var colNo = whitespace[lineNo - 1].length + 1;
    message +=
        ' at line ' +
            lineNo +
            ' col ' +
            colNo +
            ':\n\n' +
            '  ' +
            str.split(/\n/)[lineNo - 1] +
            '\n' +
            '  ' +
            Array(colNo).join(' ') +
            '^';
    throw EtaErr(message);
}

/**
 * @returns The global Promise function
 */
var promiseImpl$1 = new Function('return this')().Promise;
/**
 * @returns A new AsyncFunction constuctor
 */
function getAsyncFunctionConstructor() {
    try {
        return new Function('return (async function(){}).constructor')();
    }
    catch (e) {
        if (e instanceof SyntaxError) {
            throw EtaErr("This environment doesn't support async/await");
        }
        else {
            throw e;
        }
    }
}
/**
 * str.trimLeft polyfill
 *
 * @param str - Input string
 * @returns The string with left whitespace removed
 *
 */
function trimLeft(str) {
    // eslint-disable-next-line no-extra-boolean-cast
    if (!!String.prototype.trimLeft) {
        return str.trimLeft();
    }
    else {
        return str.replace(/^\s+/, '');
    }
}
/**
 * str.trimRight polyfill
 *
 * @param str - Input string
 * @returns The string with right whitespace removed
 *
 */
function trimRight(str) {
    // eslint-disable-next-line no-extra-boolean-cast
    if (!!String.prototype.trimRight) {
        return str.trimRight();
    }
    else {
        return str.replace(/\s+$/, ''); // TODO: do we really need to replace BOM's?
    }
}

// TODO: allow '-' to trim up until newline. Use [^\S\n\r] instead of \s
/* END TYPES */
function hasOwnProp$1(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
function copyProps$1(toObj, fromObj) {
    for (var key in fromObj) {
        if (hasOwnProp$1(fromObj, key)) {
            toObj[key] = fromObj[key];
        }
    }
    return toObj;
}
/**
 * Takes a string within a template and trims it, based on the preceding tag's whitespace control and `config.autoTrim`
 */
function trimWS(str, config, wsLeft, wsRight) {
    var leftTrim;
    var rightTrim;
    if (Array.isArray(config.autoTrim)) {
        // kinda confusing
        // but _}} will trim the left side of the following string
        leftTrim = config.autoTrim[1];
        rightTrim = config.autoTrim[0];
    }
    else {
        leftTrim = rightTrim = config.autoTrim;
    }
    if (wsLeft || wsLeft === false) {
        leftTrim = wsLeft;
    }
    if (wsRight || wsRight === false) {
        rightTrim = wsRight;
    }
    if (!rightTrim && !leftTrim) {
        return str;
    }
    if (leftTrim === 'slurp' && rightTrim === 'slurp') {
        return str.trim();
    }
    if (leftTrim === '_' || leftTrim === 'slurp') {
        // console.log('trimming left' + leftTrim)
        // full slurp
        str = trimLeft(str);
    }
    else if (leftTrim === '-' || leftTrim === 'nl') {
        // nl trim
        str = str.replace(/^(?:\r\n|\n|\r)/, '');
    }
    if (rightTrim === '_' || rightTrim === 'slurp') {
        // full slurp
        str = trimRight(str);
    }
    else if (rightTrim === '-' || rightTrim === 'nl') {
        // nl trim
        str = str.replace(/(?:\r\n|\n|\r)$/, ''); // TODO: make sure this gets \r\n
    }
    return str;
}
/**
 * A map of special HTML characters to their XML-escaped equivalents
 */
var escMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
};
function replaceChar(s) {
    return escMap[s];
}
/**
 * XML-escapes an input value after converting it to a string
 *
 * @param str - Input value (usually a string)
 * @returns XML-escaped string
 */
function XMLEscape(str) {
    // eslint-disable-line @typescript-eslint/no-explicit-any
    // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.
    var newStr = String(str);
    if (/[&<>"']/.test(newStr)) {
        return newStr.replace(/[&<>"']/g, replaceChar);
    }
    else {
        return newStr;
    }
}

/* END TYPES */
var templateLitReg = /`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})*}|(?!\${)[^\\`])*`/g;
var singleQuoteReg = /'(?:\\[\s\w"'\\`]|[^\n\r'\\])*?'/g;
var doubleQuoteReg = /"(?:\\[\s\w"'\\`]|[^\n\r"\\])*?"/g;
/** Escape special regular expression characters inside a string */
function escapeRegExp(string) {
    // From MDN
    return string.replace(/[.*+\-?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}
function parse(str, config) {
    var buffer = [];
    var trimLeftOfNextStr = false;
    var lastIndex = 0;
    var parseOptions = config.parse;
    if (config.plugins) {
        for (var i = 0; i < config.plugins.length; i++) {
            var plugin = config.plugins[i];
            if (plugin.processTemplate) {
                str = plugin.processTemplate(str, config);
            }
        }
    }
    /* Adding for EJS compatibility */
    if (config.rmWhitespace) {
        // Code taken directly from EJS
        // Have to use two separate replaces here as `^` and `$` operators don't
        // work well with `\r` and empty lines don't work well with the `m` flag.
        // Essentially, this replaces the whitespace at the beginning and end of
        // each line and removes multiple newlines.
        str = str.replace(/[\r\n]+/g, '\n').replace(/^\s+|\s+$/gm, '');
    }
    /* End rmWhitespace option */
    templateLitReg.lastIndex = 0;
    singleQuoteReg.lastIndex = 0;
    doubleQuoteReg.lastIndex = 0;
    function pushString(strng, shouldTrimRightOfString) {
        if (strng) {
            // if string is truthy it must be of type 'string'
            strng = trimWS(strng, config, trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined
            shouldTrimRightOfString);
            if (strng) {
                // replace \ with \\, ' with \'
                // we're going to convert all CRLF to LF so it doesn't take more than one replace
                strng = strng.replace(/\\|'/g, '\\$&').replace(/\r\n|\n|\r/g, '\\n');
                buffer.push(strng);
            }
        }
    }
    var prefixes = [parseOptions.exec, parseOptions.interpolate, parseOptions.raw].reduce(function (accumulator, prefix) {
        if (accumulator && prefix) {
            return accumulator + '|' + escapeRegExp(prefix);
        }
        else if (prefix) {
            // accumulator is falsy
            return escapeRegExp(prefix);
        }
        else {
            // prefix and accumulator are both falsy
            return accumulator;
        }
    }, '');
    var parseOpenReg = new RegExp('([^]*?)' + escapeRegExp(config.tags[0]) + '(-|_)?\\s*(' + prefixes + ')?\\s*', 'g');
    var parseCloseReg = new RegExp('\'|"|`|\\/\\*|(\\s*(-|_)?' + escapeRegExp(config.tags[1]) + ')', 'g');
    // TODO: benchmark having the \s* on either side vs using str.trim()
    var m;
    while ((m = parseOpenReg.exec(str))) {
        lastIndex = m[0].length + m.index;
        var precedingString = m[1];
        var wsLeft = m[2];
        var prefix = m[3] || ''; // by default either ~, =, or empty
        pushString(precedingString, wsLeft);
        parseCloseReg.lastIndex = lastIndex;
        var closeTag = void 0;
        var currentObj = false;
        while ((closeTag = parseCloseReg.exec(str))) {
            if (closeTag[1]) {
                var content = str.slice(lastIndex, closeTag.index);
                parseOpenReg.lastIndex = lastIndex = parseCloseReg.lastIndex;
                trimLeftOfNextStr = closeTag[2];
                var currentType = prefix === parseOptions.exec
                    ? 'e'
                    : prefix === parseOptions.raw
                        ? 'r'
                        : prefix === parseOptions.interpolate
                            ? 'i'
                            : '';
                currentObj = { t: currentType, val: content };
                break;
            }
            else {
                var char = closeTag[0];
                if (char === '/*') {
                    var commentCloseInd = str.indexOf('*/', parseCloseReg.lastIndex);
                    if (commentCloseInd === -1) {
                        ParseErr('unclosed comment', str, closeTag.index);
                    }
                    parseCloseReg.lastIndex = commentCloseInd;
                }
                else if (char === "'") {
                    singleQuoteReg.lastIndex = closeTag.index;
                    var singleQuoteMatch = singleQuoteReg.exec(str);
                    if (singleQuoteMatch) {
                        parseCloseReg.lastIndex = singleQuoteReg.lastIndex;
                    }
                    else {
                        ParseErr('unclosed string', str, closeTag.index);
                    }
                }
                else if (char === '"') {
                    doubleQuoteReg.lastIndex = closeTag.index;
                    var doubleQuoteMatch = doubleQuoteReg.exec(str);
                    if (doubleQuoteMatch) {
                        parseCloseReg.lastIndex = doubleQuoteReg.lastIndex;
                    }
                    else {
                        ParseErr('unclosed string', str, closeTag.index);
                    }
                }
                else if (char === '`') {
                    templateLitReg.lastIndex = closeTag.index;
                    var templateLitMatch = templateLitReg.exec(str);
                    if (templateLitMatch) {
                        parseCloseReg.lastIndex = templateLitReg.lastIndex;
                    }
                    else {
                        ParseErr('unclosed string', str, closeTag.index);
                    }
                }
            }
        }
        if (currentObj) {
            buffer.push(currentObj);
        }
        else {
            ParseErr('unclosed tag', str, m.index + precedingString.length);
        }
    }
    pushString(str.slice(lastIndex, str.length), false);
    if (config.plugins) {
        for (var i = 0; i < config.plugins.length; i++) {
            var plugin = config.plugins[i];
            if (plugin.processAST) {
                buffer = plugin.processAST(buffer, config);
            }
        }
    }
    return buffer;
}

/* END TYPES */
/**
 * Compiles a template string to a function string. Most often users just use `compile()`, which calls `compileToString` and creates a new function using the result
 *
 * **Example**
 *
 * ```js
 * compileToString("Hi <%= it.user %>", eta.config)
 * // "var tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR"
 * ```
 */
function compileToString(str, config) {
    var buffer = parse(str, config);
    var res = "var tR='',__l,__lP" +
        (config.include ? ',include=E.include.bind(E)' : '') +
        (config.includeFile ? ',includeFile=E.includeFile.bind(E)' : '') +
        '\nfunction layout(p,d){__l=p;__lP=d}\n' +
        (config.useWith ? 'with(' + config.varName + '||{}){' : '') +
        compileScope(buffer, config) +
        (config.includeFile
            ? 'if(__l)tR=' +
                (config.async ? 'await ' : '') +
                ("includeFile(__l,Object.assign(" + config.varName + ",{body:tR},__lP))\n")
            : config.include
                ? 'if(__l)tR=' +
                    (config.async ? 'await ' : '') +
                    ("include(__l,Object.assign(" + config.varName + ",{body:tR},__lP))\n")
                : '') +
        'if(cb){cb(null,tR)} return tR' +
        (config.useWith ? '}' : '');
    if (config.plugins) {
        for (var i = 0; i < config.plugins.length; i++) {
            var plugin = config.plugins[i];
            if (plugin.processFnString) {
                res = plugin.processFnString(res, config);
            }
        }
    }
    return res;
}
/**
 * Loops through the AST generated by `parse` and transform each item into JS calls
 *
 * **Example**
 *
 * ```js
 * // AST version of 'Hi <%= it.user %>'
 * let templateAST = ['Hi ', { val: 'it.user', t: 'i' }]
 * compileScope(templateAST, eta.config)
 * // "tR+='Hi ';tR+=E.e(it.user);"
 * ```
 */
function compileScope(buff, config) {
    var i = 0;
    var buffLength = buff.length;
    var returnStr = '';
    for (i; i < buffLength; i++) {
        var currentBlock = buff[i];
        if (typeof currentBlock === 'string') {
            var str = currentBlock;
            // we know string exists
            returnStr += "tR+='" + str + "'\n";
        }
        else {
            var type = currentBlock.t; // ~, s, !, ?, r
            var content = currentBlock.val || '';
            if (type === 'r') {
                // raw
                if (config.filter) {
                    content = 'E.filter(' + content + ')';
                }
                returnStr += 'tR+=' + content + '\n';
            }
            else if (type === 'i') {
                // interpolate
                if (config.filter) {
                    content = 'E.filter(' + content + ')';
                }
                if (config.autoEscape) {
                    content = 'E.e(' + content + ')';
                }
                returnStr += 'tR+=' + content + '\n';
                // reference
            }
            else if (type === 'e') {
                // execute
                returnStr += content + '\n'; // you need a \n in case you have <% } %>
            }
        }
    }
    return returnStr;
}

/**
 * Handles storage and accessing of values
 *
 * In this case, we use it to store compiled template functions
 * Indexed by their `name` or `filename`
 */
var Cacher$1 = /** @class */ (function () {
    function Cacher(cache) {
        this.cache = cache;
    }
    Cacher.prototype.define = function (key, val) {
        this.cache[key] = val;
    };
    Cacher.prototype.get = function (key) {
        // string | array.
        // TODO: allow array of keys to look down
        // TODO: create plugin to allow referencing helpers, filters with dot notation
        return this.cache[key];
    };
    Cacher.prototype.remove = function (key) {
        delete this.cache[key];
    };
    Cacher.prototype.reset = function () {
        this.cache = {};
    };
    Cacher.prototype.load = function (cacheObj) {
        copyProps$1(this.cache, cacheObj);
    };
    return Cacher;
}());

/* END TYPES */
/**
 * Eta's template storage
 *
 * Stores partials and cached templates
 */
var templates = new Cacher$1({});

/* END TYPES */
/**
 * Include a template based on its name (or filepath, if it's already been cached).
 *
 * Called like `include(templateNameOrPath, data)`
 */
function includeHelper(templateNameOrPath, data) {
    var template = this.templates.get(templateNameOrPath);
    if (!template) {
        throw EtaErr('Could not fetch template "' + templateNameOrPath + '"');
    }
    return template(data, this);
}
/** Eta's base (global) configuration */
var config = {
    async: false,
    autoEscape: true,
    autoTrim: [false, 'nl'],
    cache: false,
    e: XMLEscape,
    include: includeHelper,
    parse: {
        exec: '',
        interpolate: '=',
        raw: '~'
    },
    plugins: [],
    rmWhitespace: false,
    tags: ['<%', '%>'],
    templates: templates,
    useWith: false,
    varName: 'it'
};
/**
 * Takes one or two partial (not necessarily complete) configuration objects, merges them 1 layer deep into eta.config, and returns the result
 *
 * @param override Partial configuration object
 * @param baseConfig Partial configuration object to merge before `override`
 *
 * **Example**
 *
 * ```js
 * let customConfig = getConfig({tags: ['!#', '#!']})
 * ```
 */
function getConfig(override, baseConfig) {
    // TODO: run more tests on this
    var res = {}; // Linked
    copyProps$1(res, config); // Creates deep clone of eta.config, 1 layer deep
    if (baseConfig) {
        copyProps$1(res, baseConfig);
    }
    if (override) {
        copyProps$1(res, override);
    }
    return res;
}

/* END TYPES */
/**
 * Takes a template string and returns a template function that can be called with (data, config, [cb])
 *
 * @param str - The template string
 * @param config - A custom configuration object (optional)
 *
 * **Example**
 *
 * ```js
 * let compiledFn = eta.compile("Hi <%= it.user %>")
 * // function anonymous()
 * let compiledFnStr = compiledFn.toString()
 * // "function anonymous(it,E,cb\n) {\nvar tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR\n}"
 * ```
 */
function compile(str, config) {
    var options = getConfig(config || {});
    /* ASYNC HANDLING */
    // The below code is modified from mde/ejs. All credit should go to them.
    var ctor = options.async ? getAsyncFunctionConstructor() : Function;
    /* END ASYNC HANDLING */
    try {
        return new ctor(options.varName, 'E', // EtaConfig
        'cb', // optional callback
        compileToString(str, options)); // eslint-disable-line no-new-func
    }
    catch (e) {
        if (e instanceof SyntaxError) {
            throw EtaErr('Bad template syntax\n\n' +
                e.message +
                '\n' +
                Array(e.message.length + 1).join('=') +
                '\n' +
                compileToString(str, options) +
                '\n' // This will put an extra newline before the callstack for extra readability
            );
        }
        else {
            throw e;
        }
    }
}

var _BOM = /^\uFEFF/;
/* END TYPES */
/**
 * Get the path to the included file from the parent file path and the
 * specified path.
 *
 * If `name` does not have an extension, it will default to `.eta`
 *
 * @param name specified path
 * @param parentfile parent file path
 * @param isDirectory whether parentfile is a directory
 * @return absolute path to template
 */
function getWholeFilePath(name, parentfile, isDirectory) {
    var includePath = path.resolve(isDirectory ? parentfile : path.dirname(parentfile), // returns directory the parent file is in
    name // file
    ) + (path.extname(name) ? '' : '.eta');
    return includePath;
}
/**
 * Get the absolute path to an included template
 *
 * If this is called with an absolute path (for example, starting with '/' or 'C:\')
 * then Eta will attempt to resolve the absolute path within options.views. If it cannot,
 * Eta will fallback to options.root or '/'
 *
 * If this is called with a relative path, Eta will:
 * - Look relative to the current template (if the current template has the `filename` property)
 * - Look inside each directory in options.views
 *
 * Note: if Eta is unable to find a template using path and options, it will throw an error.
 *
 * @param path    specified path
 * @param options compilation options
 * @return absolute path to template
 */
function getPath(path, options) {
    var includePath = false;
    var views = options.views;
    var searchedPaths = [];
    // If these four values are the same,
    // getPath() will return the same result every time.
    // We can cache the result to avoid expensive
    // file operations.
    var pathOptions = JSON.stringify({
        filename: options.filename,
        path: path,
        root: options.root,
        views: options.views
    });
    if (options.cache && options.filepathCache && options.filepathCache[pathOptions]) {
        // Use the cached filepath
        return options.filepathCache[pathOptions];
    }
    /** Add a filepath to the list of paths we've checked for a template */
    function addPathToSearched(pathSearched) {
        if (!searchedPaths.includes(pathSearched)) {
            searchedPaths.push(pathSearched);
        }
    }
    /**
     * Take a filepath (like 'partials/mypartial.eta'). Attempt to find the template file inside `views`;
     * return the resulting template file path, or `false` to indicate that the template was not found.
     *
     * @param views the filepath that holds templates, or an array of filepaths that hold templates
     * @param path the path to the template
     */
    function searchViews(views, path) {
        var filePath;
        // If views is an array, then loop through each directory
        // And attempt to find the template
        if (Array.isArray(views) &&
            views.some(function (v) {
                filePath = getWholeFilePath(path, v, true);
                addPathToSearched(filePath);
                return fs.existsSync(filePath);
            })) {
            // If the above returned true, we know that the filePath was just set to a path
            // That exists (Array.some() returns as soon as it finds a valid element)
            return filePath;
        }
        else if (typeof views === 'string') {
            // Search for the file if views is a single directory
            filePath = getWholeFilePath(path, views, true);
            addPathToSearched(filePath);
            if (fs.existsSync(filePath)) {
                return filePath;
            }
        }
        // Unable to find a file
        return false;
    }
    // Path starts with '/', 'C:\', etc.
    var match = /^[A-Za-z]+:\\|^\//.exec(path);
    // Absolute path, like /partials/partial.eta
    if (match && match.length) {
        // We have to trim the beginning '/' off the path, or else
        // path.resolve(dir, path) will always resolve to just path
        var formattedPath = path.replace(/^\/*/, '');
        // First, try to resolve the path within options.views
        includePath = searchViews(views, formattedPath);
        if (!includePath) {
            // If that fails, searchViews will return false. Try to find the path
            // inside options.root (by default '/', the base of the filesystem)
            var pathFromRoot = getWholeFilePath(formattedPath, options.root || '/', true);
            addPathToSearched(pathFromRoot);
            includePath = pathFromRoot;
        }
    }
    else {
        // Relative paths
        // Look relative to a passed filename first
        if (options.filename) {
            var filePath = getWholeFilePath(path, options.filename);
            addPathToSearched(filePath);
            if (fs.existsSync(filePath)) {
                includePath = filePath;
            }
        }
        // Then look for the template in options.views
        if (!includePath) {
            includePath = searchViews(views, path);
        }
        if (!includePath) {
            throw EtaErr('Could not find the template "' + path + '". Paths tried: ' + searchedPaths);
        }
    }
    // If caching and filepathCache are enabled,
    // cache the input & output of this function.
    if (options.cache && options.filepathCache) {
        options.filepathCache[pathOptions] = includePath;
    }
    return includePath;
}
/**
 * Reads a file synchronously
 */
function readFile(filePath) {
    try {
        return fs.readFileSync(filePath).toString().replace(_BOM, ''); // TODO: is replacing BOM's necessary?
    }
    catch (_a) {
        throw EtaErr("Failed to read template at '" + filePath + "'");
    }
}

// express is set like: app.engine('html', require('eta').renderFile)
/* END TYPES */
/**
 * Reads a template, compiles it into a function, caches it if caching isn't disabled, returns the function
 *
 * @param filePath Absolute path to template file
 * @param options Eta configuration overrides
 * @param noCache Optionally, make Eta not cache the template
 */
function loadFile(filePath, options, noCache) {
    var config = getConfig(options);
    var template = readFile(filePath);
    try {
        var compiledTemplate = compile(template, config);
        if (!noCache) {
            config.templates.define(config.filename, compiledTemplate);
        }
        return compiledTemplate;
    }
    catch (e) {
        throw EtaErr('Loading file: ' + filePath + ' failed:\n\n' + e.message);
    }
}
/**
 * Get the template from a string or a file, either compiled on-the-fly or
 * read from cache (if enabled), and cache the template if needed.
 *
 * If `options.cache` is true, this function reads the file from
 * `options.filename` so it must be set prior to calling this function.
 *
 * @param options   compilation options
 * @return Eta template function
 */
function handleCache(options) {
    var filename = options.filename;
    if (options.cache) {
        var func = options.templates.get(filename);
        if (func) {
            return func;
        }
        return loadFile(filename, options);
    }
    // Caching is disabled, so pass noCache = true
    return loadFile(filename, options, true);
}
/**
 * Get the template function.
 *
 * If `options.cache` is `true`, then the template is cached.
 *
 * This returns a template function and the config object with which that template function should be called.
 *
 * @remarks
 *
 * It's important that this returns a config object with `filename` set.
 * Otherwise, the included file would not be able to use relative paths
 *
 * @param path path for the specified file (if relative, specify `views` on `options`)
 * @param options compilation options
 * @return [Eta template function, new config object]
 */
function includeFile(path, options) {
    // the below creates a new options object, using the parent filepath of the old options object and the path
    var newFileOptions = getConfig({ filename: getPath(path, options) }, options);
    // TODO: make sure properties are currectly copied over
    return [handleCache(newFileOptions), newFileOptions];
}

/* END TYPES */
/**
 * Called with `includeFile(path, data)`
 */
function includeFileHelper(path, data) {
    var templateAndConfig = includeFile(path, this);
    return templateAndConfig[0](data, templateAndConfig[1]);
}

/* END TYPES */
function handleCache$1(template, options) {
    if (options.cache && options.name && options.templates.get(options.name)) {
        return options.templates.get(options.name);
    }
    var templateFunc = typeof template === 'function' ? template : compile(template, options);
    // Note that we don't have to check if it already exists in the cache;
    // it would have returned earlier if it had
    if (options.cache && options.name) {
        options.templates.define(options.name, templateFunc);
    }
    return templateFunc;
}
/**
 * Render a template
 *
 * If `template` is a string, Eta will compile it to a function and then call it with the provided data.
 * If `template` is a template function, Eta will call it with the provided data.
 *
 * If `config.async` is `false`, Eta will return the rendered template.
 *
 * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.
 * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template.
 *
 * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.
 *
 * @param template Template string or template function
 * @param data Data to render the template with
 * @param config Optional config options
 * @param cb Callback function
 */
function render(template, data, config, cb) {
    var options = getConfig(config || {});
    if (options.async) {
        if (cb) {
            // If user passes callback
            try {
                // Note: if there is an error while rendering the template,
                // It will bubble up and be caught here
                var templateFn = handleCache$1(template, options);
                templateFn(data, options, cb);
            }
            catch (err) {
                return cb(err);
            }
        }
        else {
            // No callback, try returning a promise
            if (typeof promiseImpl$1 === 'function') {
                return new promiseImpl$1(function (resolve, reject) {
                    try {
                        resolve(handleCache$1(template, options)(data, options));
                    }
                    catch (err) {
                        reject(err);
                    }
                });
            }
            else {
                throw EtaErr("Please provide a callback function, this env doesn't support Promises");
            }
        }
    }
    else {
        return handleCache$1(template, options)(data, options);
    }
}
/**
 * Render a template asynchronously
 *
 * If `template` is a string, Eta will compile it to a function and call it with the provided data.
 * If `template` is a function, Eta will call it with the provided data.
 *
 * If there is a callback function, Eta will call it with `(err, renderedTemplate)`.
 * If there is not a callback function, Eta will return a Promise that resolves to the rendered template
 *
 * @param template Template string or template function
 * @param data Data to render the template with
 * @param config Optional config options
 * @param cb Callback function
 */
function renderAsync(template, data, config, cb) {
    // Using Object.assign to lower bundle size, using spread operator makes it larger because of typescript injected polyfills
    return render(template, data, Object.assign({}, config, { async: true }), cb);
}

// @denoify-ignore
config.includeFile = includeFileHelper;
config.filepathCache = {};

Element.prototype.addClazz = function (str) {
    if (Array.isArray(str)) {
        this.addClass(...str);
    }
    else
        this.addClass(str);
};
function getFiles(app, dir) {
    let dirPath = obsidian.normalizePath(dir);
    let fo = app.vault.getAbstractFileByPath(dirPath);
    // console.log(dirPath), console.log(fo);
    if (!fo || !(fo instanceof obsidian.TFolder))
        throw `Skribi: Could not find folder ${dirPath}`;
    let files = [];
    obsidian.Vault.recurseChildren(fo, (fi) => {
        if (fi instanceof obsidian.TFile)
            files.push(fi);
    });
    return files;
}
const isFile = (item) => (item) instanceof obsidian.TFile;
function checkFileExt(files, exts) {
    exts = toArray(exts);
    return toArray(files).every((f) => { return exts.contains(f.extension); });
}
function filterFileExt(files, exts) {
    exts = toArray(exts);
    return toArray(files).filter((f) => { if (checkFileExt(f, exts))
        return f; });
}
function toArray(args) {
    return (Array.isArray(args) ? args : [args]);
}
function isExtant(obj) {
    return !((obj === null) || (obj === undefined));
}
function roundTo(x, to) {
    return parseFloat(parseFloat(x).toPrecision(to !== null && to !== void 0 ? to : 4));
}
function getVerbosity() {
    var _a;
    //@ts-ignore
    return ((_a = window.app.plugins.plugins["obsidian-skribi"]) === null || _a === void 0 ? void 0 : _a.settings.verboseLogging) || false;
}
function vLog(...args) {
    if (getVerbosity()) {
        console.log("Skribi:", ...args);
    }
}
function dLog(...args) {
    var _a, _b;
    //@ts-ignore
    if (((_b = (_a = window === null || window === void 0 ? void 0 : window.app.plugins.plugins["obsidian-skribi"]) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.devLogging) || false) {
        console.log(...args);
    }
}
function toDupeRecord(arr) {
    return arr.reduce((a, i) => (Object.assign(Object.assign({}, a), { [i]: i })), {});
}
function withoutKey(input, key) {
    const clone = Object.assign({}, input);
    if (Array.isArray(key)) {
        key.forEach((k) => {
            delete clone[k];
        });
    }
    else {
        delete clone[key];
    }
    return clone;
}
Object.getPrototypeOf(function () {
    return __awaiter(this, void 0, void 0, function* () { });
}).constructor;
const promiseImpl = new Function('return this')().Promise;

class Cacher {
    constructor(cache) {
        this.cache = cache;
    }
    define(key, val) { this.cache[key] = val; }
    get(key) { return this.cache[key]; }
    remove(key) { delete this.cache[key]; }
    reset() { this.cache = {}; }
    load(cacheObj) { copyProps(this.cache, cacheObj); }
}
function copyProps(toObj, fromObj) {
    for (const key in fromObj) {
        if (hasOwnProp(fromObj, key)) {
            toObj[key] = fromObj[key];
        }
    }
    return toObj;
}
function hasOwnProp(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}

class Provider {
    constructor(bus) {
        this.functions = new Map();
        this.bus = bus;
    }
    createObject() {
        return Object.assign({}, Object.fromEntries(this.functions));
    }
    reload() { }
}

class ProviderScriptloader extends Provider {
    constructor(bus) {
        super(bus);
        this.namespace = "s";
        this.initLoaded = false;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.loadFiles(...getFiles(this.bus.plugin.app, this.bus.plugin.settings.scriptFolder))
                .then((ret) => {
                this.setFunc(ret);
                this.initLoaded = true;
                return Promise.resolve();
            });
        });
    }
    setFunc(funcs) {
        funcs.map((r) => {
            if (r) {
                this.functions.delete(r[0]);
                if (Array.isArray(r[1]))
                    this.functions.set(r[0], (Array.isArray(r[1]) ? Object.fromEntries(r[1]) : r[1]));
            }
        });
    }
    loadFiles(...files) {
        return __awaiter(this, void 0, void 0, function* () {
            let filtered = filterFileExt(files, "js");
            const reads = filtered.map((f) => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (!(this.bus.plugin.app.vault.adapter instanceof obsidian.FileSystemAdapter))
                        return Promise.reject();
                    let path = this.bus.plugin.app.vault.adapter.getBasePath() + "/" + f.path;
                    if (Object.keys(window.require.cache).contains(path))
                        delete window.require.cache[window.require.resolve(path)];
                    let func = yield Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require(path)); });
                    if (func === null || func === void 0 ? void 0 : func.default) {
                        return (func.default instanceof Function)
                            ? Promise.resolve([f.basename, func.default])
                            : Promise.resolve([f.basename, Object.keys(withoutKey(func, "default")).map((k) => [k, func[k]])]);
                    }
                    else
                        return Promise.reject();
                }
                catch (e) {
                    console.warn(e);
                    return Promise.reject();
                }
            }));
            return yield Promise.allSettled(reads)
                .then((settled) => {
                return settled
                    .filter((r) => { return r.status == "fulfilled"; })
                    .map((v) => { return v.value; });
            });
        });
    }
    fileUpdated(e) {
        this.bus.handler.setDirty(true);
        this.loadFiles(e).then((ret) => this.setFunc(ret), (err) => this.functions.delete(e.basename));
    }
    reload() {
        this.functions.clear();
        return this.init();
    }
}

class ProviderBus {
    constructor(handler) {
        this.providers = [];
        this.curScope = {};
        this.handler = handler;
        this.plugin = handler.plugin;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.scriptLoader = new ProviderScriptloader(this);
            yield this.scriptLoader.init();
            this.providers.push(this.scriptLoader);
            this.createScope();
            return Promise.resolve();
        });
    }
    reloadProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            for (let p of this.providers)
                p.reload();
            return Promise.resolve(); // not actually awaiting reloads
        });
    }
    getScope(refresh) {
        return (refresh ? this.createScope : this.curScope);
    }
    createScope() {
        let spaces = {};
        for (let p of this.providers)
            spaces[p.namespace] = p.createObject();
        this.curScope = spaces;
        return this.curScope;
    }
}

require("obsidian");
class EtaHandler {
    constructor(plugin) {
        this.templates = new Cacher({});
        this.failedTemplates = new Map();
        this.templateFrontmatters = new Map();
        this.templatesDirty = false;
        this.baseContext = {
            // obsidian: obsidianModule,
            render: function (str) {
                let e = createDiv({ cls: "skribi-render-virtual" });
                console.log(this);
                obsidian.MarkdownRenderer.renderMarkdown(str, e, this.this.file.path, null);
                return e.innerHTML;
            },
            has: function (v) {
                var _a, _b;
                return !((((_a = this.v) === null || _a === void 0 ? void 0 : _a[v]) == null) || (((_b = this.v) === null || _b === void 0 ? void 0 : _b[v]) == undefined));
            },
            provide_stat: this.provide_stat()
        };
        this.plugin = plugin;
        this.bus = new ProviderBus(this);
        this.varName = plugin.varName;
        if (!this.plugin.app.workspace.layoutReady) {
            this.plugin.app.workspace.onLayoutReady((() => __awaiter(this, void 0, void 0, function* () { this.bus.init(); })).bind(this.bus));
            this.plugin.app.workspace.onLayoutReady(() => __awaiter(this, void 0, void 0, function* () { return this.initPartials(); }));
        }
        else {
            this.initPartials();
            this.bus.init();
        }
    }
    // Testing closures in skript context
    provide_stat() {
        return () => {
            return this.varName;
        };
    }
    initPartials() {
        return __awaiter(this, void 0, void 0, function* () {
            this.definePartials(...getFiles(this.plugin.app, this.plugin.settings.templateFolder));
        });
    }
    definePartials(...files) {
        return __awaiter(this, void 0, void 0, function* () {
            let t = (files.length == 0) ? window.performance.now() : 0;
            let x = 0;
            let x2 = 0;
            var busScope = this.bus.getScope(true);
            const reads = files.map((f) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                if (!checkFileExt(f, ["md", "eta", "txt"]))
                    return Promise.resolve();
                let read = yield this.plugin.app.vault.cachedRead(f);
                let ff = (_a = this.plugin.app.metadataCache.getFileCache(f)) === null || _a === void 0 ? void 0 : _a.frontmatter;
                if (ff) {
                    let n = (/(?<frontmatter>^---.*?(?=\n---)\n---)/s).exec(read);
                    let nf = isExtant((_b = n === null || n === void 0 ? void 0 : n.groups) === null || _b === void 0 ? void 0 : _b.frontmatter) ? n.groups.frontmatter : null;
                    if (nf) {
                        read = read.substr((nf === null || nf === void 0 ? void 0 : nf.length) || 0);
                    } //console.log(parseFrontMatterStringArray(ff, "prompt"));
                }
                let compiled;
                try {
                    let str = compileToString(read, getConfig({ varName: this.varName, async: false, name: f.basename }));
                    compiled = compileWithScope(str, Object.assign({ 'sk': null, 'E': null, 'cb': null }, busScope));
                    // compiled = Eta.compile(read, {varName: this.varName})
                }
                catch (e) {
                    this.failedTemplates.set(f.basename, e || "Template failed to compile.");
                    console.warn(`Skribi: template "${f.basename}" failed to compile \n`, e, read);
                    this.templates.remove(f.basename);
                    // Eta.templates.remove(f.basename)
                    this.templateFrontmatters.delete(f.basename);
                    x++;
                }
                if (isExtant(compiled)) {
                    this.failedTemplates.delete(f.basename);
                    this.templates.define(f.basename, yield compiled);
                    // Eta.templates.define(f.basename, compiled)
                    if (ff)
                        this.templateFrontmatters.set(f.basename, withoutKey(ff, "position"));
                    x2++;
                }
                return Promise.resolve();
            }));
            if (!this.plugin.initLoaded) {
                Promise.allSettled(reads).then(() => {
                    {
                        if (files.length > 0) {
                            let str = `${x2} template${(x2 == 1) ? "" : "s"}`; //+ `in: ${roundTo(window.performance.now()-t, 4)}ms`
                            if (x)
                                str += `\n Of ${files.length} total templates, ${x} failed to compile.`;
                            console.log("Skribi: Loaded " + str);
                        }
                        this.plugin.loadEvents.trigger('init-load-complete');
                    }
                });
            }
            else {
                this.setDirty(false);
                vLog(`Updated template "${files[0].basename}" in ${window.performance.now() - t}ms`);
            }
        });
    }
    setDirty(dirty) {
        if (dirty)
            this.bus.createScope();
        this.templatesDirty = dirty;
    }
    getPartial(id) {
        // return Eta.templates.get(id)
        return this.templates.get(id);
    }
    hasPartial(id) {
        // return isExtant(Eta.templates.get(id))
        return isExtant(this.templates.get(id));
    }
    getCache() {
        // return Eta.templates
        return this.templates;
    }
    getCacheStore() {
        //@ts-ignore
        // return Eta.templates.cache as Record<string, TemplateFunction>
        return this.templates.cache;
    }
    getCacheKeys() {
        return Object.keys(this.getCacheStore());
    }
    renderAsync(content, ctxIn, file, packet) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!isFile(file))
                return Promise.reject(`Could not identify current file: ${file.path}`);
            let z = {};
            function p() {
                return function (x, y) {
                    z[x] = y;
                };
            }
            let cfg = getConfig({ varName: "sk", useWith: false, async: false });
            /* the 'this' object of the sk context*/
            let binder = {
                file: file,
                plugin: this.plugin
            };
            /* The 'sk' object */
            let sk = Object.assign({}, this.baseContext, ctxIn || {}, { up: p(), this: binder });
            /* scope of the tfunc env */
            let scope = Object.assign({ 'sk': sk, 'E': cfg, 'cb': null }, this.bus.getScope());
            let ren = renderEtaAsync(this, content, {}, cfg, null, scope, binder);
            // console.log("psuedo post:", sk)
            if (ren instanceof Promise) {
                return yield ren.then((r) => { return Promise.resolve([r, z]); }, (r) => { return Promise.reject(r); });
            }
            else if (String.isString(ren)) {
                return Promise.resolve([ren, z]);
            }
            else
                return Promise.reject("Unknown error");
        });
    }
    renderAsyncNaive(content, ctxIn, varName) {
        return __awaiter(this, void 0, void 0, function* () {
            let context = Object.assign({}, this.baseContext, ctxIn || {});
            let ren = renderAsync(content, context, { varName: varName !== null && varName !== void 0 ? varName : this.varName });
            if (ren instanceof Promise) {
                return yield ren.then((r) => { return Promise.resolve(r); }, (r) => { return Promise.reject(r); });
            }
            else if (String.isString(ren)) {
                return Promise.resolve(ren);
            }
            else
                return Promise.reject("Unknown error");
        });
    }
    render(content, ctxIn) {
        let context = ctxIn || {};
        content = render(content, context, {
            varName: this.varName
        });
        return content;
    }
    getCached(template, options, scope, binder) {
        if (options.name && this.templates.get(options.name)) {
            return (binder) ? this.templates.get(options.name).bind(binder) : this.templates.get(options.name);
        }
        const templateFunc = typeof template === 'function' ? template : compileWithScope(compileToString(template, options), scope || {});
        if (options.name)
            this.templates.define(options.name, templateFunc);
        return (binder) ? templateFunc.bind(binder) : templateFunc;
    }
}
function renderEta(handler, template, data, config, cb, scope, binder) {
    const options = getConfig(config || {});
    if (options.async) {
        if (cb) {
            try {
                const templateFn = handler.getCached(template, options, scope, binder);
                templateFn(scope);
            }
            catch (e) {
                return cb(e);
            }
        }
        else {
            return new promiseImpl(function (resolve, reject) {
                try {
                    resolve(handler.getCached(template, options, scope, binder)(scope));
                }
                catch (e) {
                    reject(e);
                }
            });
        }
    }
    else {
        return handler.getCached(template, options, scope, binder)(scope);
    }
}
function renderEtaAsync(handler, template, data, config, cb, scope, binder) {
    return renderEta(handler, template, data, Object.assign({}, config, { async: false }), cb, scope, binder);
}
function compileWithScope(f, scope) {
    var a = "";
    for (var v in scope) {
        a += `${v},`;
    }
    let func = `var {${a.substr(0, a.length - 1)}} = scope;\n` + f;
    // console.log(func)
    // let AsyncFunction = Object.getPrototypeOf(async function(){}).constructor
    // let c = new AsyncFunction('scope', func)
    // let c = new Function('sk', 'E', 'cb', 'scope', func)
    let c = new Function('scope', func);
    return c;
}

class SkribosSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.addClass("skribi-settings");
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Skribi Settings' });
        new obsidian.Setting(containerEl)
            .setName('Template Directory')
            .setDesc('Skribi will look for templates in this folder.')
            .addTextArea((text) => {
            text
                .setValue(this.plugin.settings.templateFolder)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.templateFolder = value;
                yield this.plugin.saveSettings();
            }));
            text.inputEl.cols = 30;
            return text;
        });
        new obsidian.Setting(containerEl)
            .setName('Skript Directory')
            .setDesc('Skribi will look for JS files in this folder.')
            .addTextArea((text) => {
            text
                .setValue(this.plugin.settings.scriptFolder)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.scriptFolder = value;
                yield this.plugin.saveSettings();
            }));
            text.inputEl.cols = 30;
            return text;
        });
        new obsidian.Setting(containerEl)
            .setName('Verbose Logging')
            .setDesc('Enable to get more detailed logs in the console.')
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.verboseLogging)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.verboseLogging = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}
const DEFAULT_SETTINGS = {
    templateFolder: "",
    scriptFolder: "",
    verboseLogging: false,
    devLogging: false,
};

const extImg = ["bmp", "png", "jpg", "jpeg", "gif", "svg"];
const extAud = ["mp3", "wav", "m4a", "3gp", "flac", "ogg", "oga"];
const extVid = ["mp4", "webm", "ogv"];
const extTxt = ["md"];
/* Repairs media embeds that have been rendered to markdown */
function embedMedia(el, srcPath, plugin, depth, self) {
    return __awaiter(this, void 0, void 0, function* () {
        dLog("embed self:", self);
        dLog("embed:", el);
        var proms = [];
        const catches = el.querySelectorAll("span.internal-embed");
        let elDepth = el.getAttribute("depth");
        let d = (isExtant(elDepth) ? parseInt(elDepth) : isExtant(depth) ? depth : 0);
        dLog("embedder depth:", d);
        for (let fish of Array.from(catches)) {
            if (fish.hasClass("is-loaded"))
                continue;
            let src = obsidian.normalizePath(fish.getAttribute("src"));
            let dest = plugin.app.metadataCache.getFirstLinkpathDest(src, srcPath);
            if (dest) {
                let path = plugin.app.vault.adapter.getResourcePath(dest.path);
                let ext = dest.extension;
                if (extImg.contains(ext)) { // Embed Image
                    fish.addClass("image-embed");
                    fish.childNodes.forEach((n) => { fish.removeChild(n); });
                    let nel = fish.createEl("img");
                    nel.setAttribute("src", path);
                }
                else if (extAud.contains(ext)) { // Embed Audio
                    fish.addClass("media-embed");
                    fish.childNodes.forEach((n) => { fish.removeChild(n); });
                    let nel = fish.createEl("audio", { "attr": { "controls": true } });
                    nel.setAttribute("src", path);
                }
                else if (extVid.contains(ext)) { // Embed Video
                    fish.childNodes.forEach((n) => { fish.removeChild(n); });
                    let vidiv = fish.createEl("video", { "attr": { "controls": true } });
                    vidiv.setAttribute("src", path);
                }
                else if (extTxt.contains(ext)) {
                    /* Embed Transclusion */
                    const createEmbedPromise = () => {
                        return new Promise(() => __awaiter(this, void 0, void 0, function* () {
                            dLog("new embed prom");
                            fish.childNodes.forEach((n) => { fish.removeChild(n); });
                            let cache = plugin.app.metadataCache.getCache(dest.path);
                            let read = yield plugin.app.vault.cachedRead(dest);
                            let classes = obsidian.parseFrontMatterStringArray(cache === null || cache === void 0 ? void 0 : cache.frontmatter, "cssclass");
                            let div = fish.createDiv({ cls: "markdown-embed" });
                            div.createDiv({ cls: "markdown-embed-title", text: dest.basename });
                            let content = div.createDiv({ cls: "markdown-embed-content" });
                            let link = div.createDiv({ cls: "markdown-embed-link" });
                            obsidian.setIcon(link, "link");
                            link.onClickEvent((e) => {
                                e.preventDefault();
                                plugin.app.workspace.openLinkText(src, srcPath);
                            });
                            let pv = content.createDiv({ cls: "markdown-preview-view" });
                            pv.addClazz(classes);
                            let ps = pv.createDiv({ cls: "markdown-preview-sizer markdown-preview-section" });
                            let mkh = createDiv({ attr: { "depth": depth.toString() } });
                            yield obsidian.MarkdownRenderer.renderMarkdown(read, mkh, srcPath, null);
                            const mke = (Array.from((mkh === null || mkh === void 0 ? void 0 : mkh.childNodes) || []).map((n) => {
                                // if (n.childNodes.length > 0) { let d = createDiv(); d.append(n.cloneNode(true)); return d;} else return n;}));
                                if (n.childNodes.length > 0) {
                                    let d = createDiv();
                                    d.append(n);
                                    return d;
                                }
                                else
                                    return n;
                            }));
                            ps.append(...mke); //ps.setAttribute("depth", d.toString())
                            return embedMedia(ps, srcPath, plugin, d - 1, true);
                        }));
                    };
                    if (d <= 0) {
                        let l = createDiv({ cls: "skribi-depth-limit" });
                        l.setAttribute("title", "It goes on forever...");
                        fish.replaceWith(l);
                        dLog("embedder hit limit");
                    }
                    else {
                        proms.push(createEmbedPromise());
                    }
                }
            }
        }
        return Promise.allSettled(proms).then(values => {
            dLog("embedder done", proms);
            return Promise.resolve(proms.length);
        });
    });
}

var promptTypes;
(function (promptTypes) {
    promptTypes["string"] = "string";
})(promptTypes || (promptTypes = {}));

class InsertionModal extends obsidian.Modal {
    constructor(plugin, editor, id) {
        super(plugin.app);
        this.valFields = {};
        this.plugin = plugin;
        this.editor = editor;
        this.currentID = id.toString();
        this.containerEl.addClass("skribi-insertion-modal");
        this.titleEl.setText("Insert Skribi Template");
    }
    onOpen() {
        this.create();
    }
    create() {
        let s = new obsidian.Setting(this.contentEl);
        s.addDropdown((drop) => {
            drop
                .addOptions(toDupeRecord(this.plugin.eta.getCacheKeys()))
                .setValue(this.currentID)
                .onChange((v) => {
                this.currentID = v;
                let f = this.generateFields(fieldsDiv, this.currentID);
                ((f.length > 0) ? f[0] : this.textInput).inputEl.focus();
            });
        });
        let fieldsDiv = this.contentEl.createDiv({ cls: "skribi-modal-fields" });
        let t = new obsidian.Setting(this.contentEl);
        t.addText((te) => { this.textInput = te; return te; });
        t.setName("Append");
        t.settingEl.addClass("skribi-modal-field-append");
        let f = this.generateFields(fieldsDiv, this.currentID);
        ((f.length > 0) ? f[0] : this.textInput).inputEl.focus();
        let confirm = new obsidian.Setting(this.contentEl);
        confirm.addButton((button) => button
            .setButtonText("Insert")
            .onClick(() => this.doInsert()));
        this.keypressRef = this.scope.register([], "Enter", this.doInsert.bind(this));
    }
    onClose() {
        this.scope.unregister(this.keypressRef);
    }
    generateFields(el, id) {
        el.empty();
        var arr = [];
        if (this.plugin.eta.templateFrontmatters.has(id)) {
            let fm = this.plugin.eta.templateFrontmatters.get(id);
            for (let v of Object.keys(fm)) {
                if (v.charAt(0) == "_") {
                    let vn = v.substring(1);
                    let fma = this.parsePromptVal(vn, fm[v]);
                    let s = new obsidian.Setting(el);
                    s.settingEl.addClass("skribi-modal-template-field");
                    if (fma.type == promptTypes.string) {
                        arr.push(this.createTextField(s, fma));
                    }
                    s.setName(fma.name);
                }
            }
        }
        return arr;
    }
    createTextField(set, fma) {
        let t;
        set.addText((text) => {
            text
                .setValue(fma.default)
                .setPlaceholder(fma.placeholder)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.valFields[fma.id] = value;
            }));
            text.inputEl.addClass("skribi-text-input");
            t = text;
        });
        if (fma.default.length > 0)
            this.valFields[fma.id] = fma.default;
        return t;
    }
    parsePromptVal(k, val) {
        let v = {
            id: k,
            type: promptTypes.string,
            name: isExtant(val === null || val === void 0 ? void 0 : val.name) ? val.name : k,
            placeholder: isExtant(val === null || val === void 0 ? void 0 : val.placeholder) ? val.placeholder : "",
            default: isExtant(val === null || val === void 0 ? void 0 : val.default) ? val.default : isExtant(val === null || val === void 0 ? void 0 : val.def) ? val.def : "",
        };
        return v;
    }
    doInsert() {
        let id = this.currentID;
        let osel = this.editor.listSelections();
        let toInsert = `\`{:${id}`;
        for (let e of Object.entries(this.valFields)) {
            toInsert += ` | ${e[0]}: ${e[1]}`;
        }
        toInsert += ((this === null || this === void 0 ? void 0 : this.textInput.getValue().length) > 0) ? " | " + this.textInput.getValue() : "";
        toInsert += `}\``;
        this.editor.getDoc().replaceSelection(toInsert);
        let nsel = [];
        for (let p of osel) {
            nsel.push({ from: { line: p.anchor.line, ch: p.anchor.ch + (toInsert.length) } });
        }
        this.editor.transaction({ selections: nsel });
        this.close();
    }
}
class SuggestionModal extends obsidian.FuzzySuggestModal {
    constructor(plugin) {
        super(plugin.app);
        this.plugin = plugin;
    }
    getItems() {
        return this.plugin.eta.getCacheKeys();
    }
    getItemText(item) { return item; }
    onChooseItem(item, evt) {
        this.resolve(item);
    }
    openAndGetValue(resolve, reject) {
        return __awaiter(this, void 0, void 0, function* () {
            this.resolve = resolve;
            this.reject = reject;
            this.open();
        });
    }
}

class SkribosPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.varName = "sk";
        this.loadEvents = new obsidian.Events();
        this.initLoaded = false;
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Skribi: Loading...');
            yield this.loadSettings();
            this.addSettingTab(new SkribosSettingTab(this.app, this));
            this.eta = new EtaHandler(this);
            let process = (el, ctx) => __awaiter(this, void 0, void 0, function* () { this.processor({ srcType: "GENERAL" /* general */ }, el, ctx); });
            // process.sortOrder = -50
            this.registerMarkdownPostProcessor((el, ctx) => process(el, ctx));
            let processBlock = (mode, str, el, ctx) => __awaiter(this, void 0, void 0, function* () { this.processor(mode, el, ctx, null, null, str.trimEnd()); });
            ([["normal", "", 0 /* none */], ["raw", "-raw", 3 /* raw */], ["literal", "-lit", 4 /* literal */], ["iterpolate", "-int", 2 /* interp */]])
                .forEach((v) => {
                this.registerMarkdownCodeBlockProcessor(`skribi${v[1]}`, processBlock.bind(this, { srcType: "BLOCK" /* block */, flag: v[2] }));
                this.registerMarkdownCodeBlockProcessor(`sk${v[1]}`, processBlock.bind(this, { srcType: "BLOCK" /* block */, flag: v[2] }));
            });
            let bUpdate = obsidian.debounce(this.eta.definePartials.bind(this.eta), 500, true);
            this.registerEvent(this.app.metadataCache.on('changed', e => {
                if (e === null || e === void 0 ? void 0 : e.parent.path.contains(this.settings.templateFolder))
                    bUpdate(e);
                if (e === null || e === void 0 ? void 0 : e.parent.path.contains(this.settings.scriptFolder))
                    this.eta.bus.scriptLoader.fileUpdated(e);
            }));
            this.initLoadRef = this.loadEvents.on('init-load-complete', () => { this.initLoaded = true; dLog("init-load-complete"); });
            this.addCommand({ id: "insert-skribi", name: "Insert Skribi",
                editorCallback: (editor, view) => {
                    if (!this.initLoaded)
                        return;
                    let x = new SuggestionModal(this);
                    new Promise((resolve, reject) => x.openAndGetValue(resolve, reject))
                        .then(result => {
                        if (this.eta.hasPartial(result)) {
                            let i = new InsertionModal(this, editor, result);
                            i.open();
                        }
                    }, (r) => { });
                } });
            // registerMirror(this);
        });
    }
    onunload() {
        this.loadEvents.offref(this.initLoadRef);
        console.log('Skribi: Unloading...');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    processor(mode, // 0: codespan; 1: codeblock;
    doc, ctx, depth, self, srcIn) {
        return __awaiter(this, void 0, void 0, function* () {
            let nestExtant = isExtant(ctx.remainingNestLevel);
            let nestLevel = nestExtant ? ctx.remainingNestLevel : null;
            /* nestExtant means that we are inside of a natural transclusion */
            self = isExtant(self);
            depth = self ? depth : null;
            /* self means that we have been called by renderSkribi, to look for codeblocks */
            let elHasDepth = isExtant(doc.getAttribute("depth"));
            let elElHasDepth = isExtant(ctx.el.getAttribute("depth"));
            let elDepth = elHasDepth ? parseInt(doc.getAttribute("depth")) : elElHasDepth ? parseInt(ctx.el.getAttribute("depth")) : null;
            /* Used for passing depth to virtual elements (we may be in one even as we speak...)*/
            /* determine our depth condition type */
            let d = self ? depth : (elHasDepth || elElHasDepth) ? elDepth : nestExtant ? nestLevel : 0;
            if (!nestExtant && !(elHasDepth || elElHasDepth))
                dLog("processor sees no depth");
            if (elHasDepth) {
                dLog("elDepth", elDepth, "doc", doc, "el", ctx.el, "conEl", ctx.containerEl);
            }
            else {
                dLog("processor: ", "doc", doc, "el", ctx.el, "conEl", ctx.containerEl, "nest", ctx.remainingNestLevel);
            }
            var proms = [];
            var temps = 0;
            const elCodes = (mode.srcType == "BLOCK" /* block */) ? [doc] : doc.querySelectorAll("code");
            if (!(d <= 0)) {
                let tm = window.performance.now();
                // elCodes.forEach(/*async*/ (el) => {
                const elProms = Array.from(elCodes).map((el) => __awaiter(this, void 0, void 0, function* () {
                    let t = window.performance.now();
                    dLog("start:", t);
                    let src = (isExtant(mode.flag) && mode.flag != 0 /* none */) ?
                        { text: srcIn || doc.textContent, flag: mode.flag } : yield preparseSkribi(el);
                    try {
                        if (src != null) {
                            el.addClass("skribi-loading"); // is this ever visible?
                            switch (src.flag) {
                                case 1: { // Template
                                    proms.push(this.predicate({ el: el, src: src.text, mdCtx: ctx, skCtx: { time: window.performance.now(), depth: d, flag: src.flag } }));
                                    temps++;
                                    break;
                                }
                                case 2:
                                case 3:
                                case 4: {
                                    proms.push(this.processSkribi(el, src.text, ctx, { time: window.performance.now(), depth: d, flag: src.flag }));
                                    break;
                                }
                                default: //return Promise.reject("Invalid flag")
                            }
                        }
                    }
                    catch (e) {
                        if (!e.flags.noRender) {
                            renderError(el, e);
                        }
                    }
                    return Promise.resolve();
                }));
                if ( /*!self && */!doc.hasClass("skribi-render-virtual")) {
                    let aps = Promise.all(elProms);
                    aps.then(() => {
                        Promise.allSettled(proms).then(() => {
                            if (proms.length > 0) {
                                if (this.initLoaded) {
                                    vLog(`Processed ${proms.length} skribis (${roundTo((window.performance.now() - tm), 4)} ms) in Element`, doc);
                                }
                                else {
                                    let str = "";
                                    if (temps > 0) {
                                        if (proms.length - temps > 0) {
                                            str = `Processed ${proms.length - temps} and queued ${temps} skribis`;
                                        }
                                        else
                                            str = `Queued ${temps} skribis`;
                                    }
                                    else
                                        str = `Processed ${proms.length - temps} skribis`;
                                    vLog(str + ` (${roundTo((window.performance.now() - tm), 4)} ms) in Element`, doc);
                                }
                            }
                        });
                    });
                }
            }
            else {
                elCodes.forEach((el) => __awaiter(this, void 0, void 0, function* () {
                    preparseSkribi(el).then((src) => __awaiter(this, void 0, void 0, function* () {
                        if (src != null)
                            renderFrozen(el, src.text);
                    }));
                }));
                dLog("processor hit limit");
                return;
            }
            return Promise.resolve();
        });
    }
    /* Await initial loading of templates */
    predicate(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.initLoaded) {
                dLog("not yet loaded");
                let el = renderWait(args.el);
                this.initLoadRef = this.loadEvents.on('init-load-complete', () => __awaiter(this, void 0, void 0, function* () {
                    this.initLoaded = true;
                    return yield this.processSkribiTemplate(el, args.src, args.mdCtx, Object.assign(args.skCtx, { time: window.performance.now() }));
                }));
            }
            else
                return yield this.processSkribiTemplate(args.el, args.src, args.mdCtx, args.skCtx);
        });
    }
    processSkribiTemplate(el, src, mdCtx, skCtx) {
        return __awaiter(this, void 0, void 0, function* () {
            let parsed = null;
            try {
                parsed = yield parseSkribi(src);
            }
            catch (e) {
                renderError(el, e);
                return null;
            }
            if (this.app.metadataCache.getFirstLinkpathDest("", mdCtx.sourcePath).basename == parsed.id) {
                el.addClass("skribi-self");
                el.removeClass("skribi-loading", "skribi-wait");
                return null;
            }
            let template = this.eta.getPartial(parsed.id);
            if (!isExtant(template)) {
                if (this.eta.failedTemplates.has(parsed.id)) {
                    renderError(el, { msg: `Template ${parsed.id} failed to compile, error: \n` + this.eta.failedTemplates.get(parsed.id) });
                }
                else {
                    renderError(el, { msg: `No such template "${parsed.id}"` });
                }
                return null;
            }
            return this.renderSkribi(el, template, parsed.id, mdCtx, Object.assign({}, skCtx, { ctx: parsed.args }));
        });
    }
    processSkribi(el, src, mdCtx, skCtx) {
        return __awaiter(this, void 0, void 0, function* () {
            const prep = function (str, flag) {
                switch (flag) {
                    case 2: return `<%=${src}%>`;
                    case 3: return `<%~${src}%>`;
                    case 4: return str;
                }
            };
            return this.renderSkribi(el, prep(src, skCtx.flag), "literal", mdCtx, skCtx);
        });
    }
    renderSkribi(el, con, id, mdCtx, skCtx) {
        return __awaiter(this, void 0, void 0, function* () {
            let file = this.app.metadataCache.getFirstLinkpathDest("", mdCtx.sourcePath);
            let e = createDiv({ cls: "skribi-render-virtual" });
            let c = new SkribiChild(e);
            Object.assign(c, { rerender: (() => { console.log("e"); c.clear(); this.renderSkribi(e, con, id, mdCtx, skCtx); }).bind(this) });
            let ctx = Object.assign({}, (skCtx === null || skCtx === void 0 ? void 0 : skCtx.ctx) || {}, {
                child: {
                    setInterval: c.setInterval.bind(c),
                    reload: c.rerender,
                }
            });
            let [rendered, packet] = yield this.eta.renderAsync(con, ctx, file).then((rendered) => {
                // console.log("rendered:", rendered)
                return Promise.resolve(rendered);
            }, (err) => {
                renderError(el, { msg: err || "Render Error" });
                return Promise.resolve(null);
            });
            dLog("renderSkrib:", el, mdCtx, skCtx, id);
            if (isExtant(rendered)) {
                let d = isExtant(mdCtx.remainingNestLevel) ? mdCtx.remainingNestLevel : (skCtx.depth);
                let r = obsidian.MarkdownRenderer.renderMarkdown(rendered, e, mdCtx.sourcePath, null).then(() => {
                    e.setAttribute("skribi", id); //e.setAttribute("depth", d.toString());
                    e.removeClass("skribi-render-virtual");
                    el.replaceWith(e);
                    dLog("finish: ", skCtx.time, window.performance.now());
                    if (skCtx.flag == 1) {
                        vLog(`Rendered template "${id}" (${roundTo(window.performance.now() - skCtx.time, 4)} ms)`, e);
                    }
                    else
                        vLog(`Rendered literal (f: ${skCtx.flag}) (${roundTo(window.performance.now() - skCtx.time, 4)} ms)`, e);
                    return Promise.resolve(e);
                });
                c.setPacket(packet);
                mdCtx.addChild(c);
                r.then((e) => {
                    // TODO: only restrict depth for transclusions
                    if (isExtant(mdCtx.remainingNestLevel) && (mdCtx.remainingNestLevel > 0) || !isExtant(mdCtx.remainingNestLevel)) {
                        return embedMedia(e, mdCtx.sourcePath, this, skCtx.depth);
                    }
                    else
                        return Promise.resolve();
                    //e.setAttribute("depth", d.toString())
                })
                    .then((x) => {
                    dLog("renderer final: ", d);
                    // e.setAttribute("depth", d.toString())
                    this.processor({ srcType: "GENERAL" /* general */ }, e, mdCtx, skCtx.depth - 1, true); /* Recurse the processor to parse skreeblings */
                });
                return r;
            }
            else {
                c.clear();
                return Promise.reject("Render Error");
            }
        });
    }
}
/* Check if code block is that good good and if so what type of good good */
function preparseSkribi(el, str, flg) {
    return __awaiter(this, void 0, void 0, function* () {
        let text = isExtant(str) ? str : el.textContent;
        if (text.length < 3)
            return;
        let e = text.substr(text.length - 2);
        let s = text.substr(0, 2);
        if (s.startsWith("{") && e.endsWith("}")) {
            let f = s[1];
            let flag = (f == ":") ? 1 : (f == "=") ? 2 : (f == "~") ? 3 : (f == "{") ? 4 : -1;
            if ((flag > 0) && (flag != 4 || (e == "}}"))) {
                return { flag: flag, text: text.substring(2, text.length - (flag == 4 ? 2 : 1)) };
            }
            else
                return;
        }
        else
            return;
    });
}
/* Parse arguments for template skreebs */
function parseSkribi(src) {
    return __awaiter(this, void 0, void 0, function* () {
        let sa = src.split(/(?<![\\])\|/);
        let id = sa.splice(0, 1)[0].trim();
        let args = {};
        for (let seg of sa) {
            let si = seg.indexOf(":");
            if (si == -1)
                continue;
            args[seg.slice(0, si).trim()] = seg.slice(si + 1).trim();
        }
        var tpCtx = {
            v: args
        };
        // console.log(args)
        return { id: id, args: tpCtx };
    });
}
function renderError(el, e) {
    return __awaiter(this, void 0, void 0, function* () {
        const pre = createEl("code", { cls: "skribi-error", text: "sk" });
        el.removeClass("skribi-loading", "skribi-wait");
        if (e === null || e === void 0 ? void 0 : e.msg)
            pre.setAttribute("title", e.msg);
        el.replaceWith(pre);
    });
}
function renderWait(el) {
    const pre = createEl("code", { cls: "skribi-wait", text: "sk" });
    el.replaceWith(pre);
    return pre;
}
function renderFrozen(el, src) {
    return __awaiter(this, void 0, void 0, function* () {
        el.removeClass("skribi-loading", "skribi-wait");
        el.addClass("skribi-frozen");
        el.setAttribute("title", "Recursion limit reached!");
    });
}
class SkribiChild extends obsidian.MarkdownRenderChild {
    constructor(el) {
        super(el);
        this.intervals = [];
    }
    setPacket(packet) {
        if (this.packet == null) {
            this.packet = packet;
        }
    }
    setInterval(cb, time, ...args) {
        let x = window.setInterval((...x) => cb(...x), time * 1000 * 60, ...args);
        this.intervals.push(x);
        return x;
    }
    onload() {
    }
    rerender() { }
    clear() {
        //console.log("clear")
        for (let i of this.intervals)
            window.clearInterval(i);
    }
    onunload() {
        this.clear();
        //console.log("ah, I die")
    }
}

module.exports = SkribosPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
