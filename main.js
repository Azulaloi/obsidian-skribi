/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var fs = require('fs');
var path = require('path');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function setPrototypeOf(obj, proto) {
    // eslint-disable-line @typescript-eslint/no-explicit-any
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(obj, proto);
    }
    else {
        obj.__proto__ = proto;
    }
}
// This is pretty much the only way to get nice, extended Errors
// without using ES6
/**
 * This returns a new Error with a custom prototype. Note that it's _not_ a constructor
 *
 * @param message Error message
 *
 * **Example**
 *
 * ```js
 * throw EtaErr("template not found")
 * ```
 */
function EtaErr(message) {
    var err = new Error(message);
    setPrototypeOf(err, EtaErr.prototype);
    return err;
}
EtaErr.prototype = Object.create(Error.prototype, {
    name: { value: 'Eta Error', enumerable: false }
});
/**
 * Throws an EtaErr with a nicely formatted error and message showing where in the template the error occurred.
 */
function ParseErr(message, str, indx) {
    var whitespace = str.slice(0, indx).split(/\n/);
    var lineNo = whitespace.length;
    var colNo = whitespace[lineNo - 1].length + 1;
    message +=
        ' at line ' +
            lineNo +
            ' col ' +
            colNo +
            ':\n\n' +
            '  ' +
            str.split(/\n/)[lineNo - 1] +
            '\n' +
            '  ' +
            Array(colNo).join(' ') +
            '^';
    throw EtaErr(message);
}

/**
 * @returns The global Promise function
 */
var promiseImpl$1 = new Function('return this')().Promise;
/**
 * @returns A new AsyncFunction constuctor
 */
function getAsyncFunctionConstructor() {
    try {
        return new Function('return (async function(){}).constructor')();
    }
    catch (e) {
        if (e instanceof SyntaxError) {
            throw EtaErr("This environment doesn't support async/await");
        }
        else {
            throw e;
        }
    }
}
/**
 * str.trimLeft polyfill
 *
 * @param str - Input string
 * @returns The string with left whitespace removed
 *
 */
function trimLeft(str) {
    // eslint-disable-next-line no-extra-boolean-cast
    if (!!String.prototype.trimLeft) {
        return str.trimLeft();
    }
    else {
        return str.replace(/^\s+/, '');
    }
}
/**
 * str.trimRight polyfill
 *
 * @param str - Input string
 * @returns The string with right whitespace removed
 *
 */
function trimRight(str) {
    // eslint-disable-next-line no-extra-boolean-cast
    if (!!String.prototype.trimRight) {
        return str.trimRight();
    }
    else {
        return str.replace(/\s+$/, ''); // TODO: do we really need to replace BOM's?
    }
}

// TODO: allow '-' to trim up until newline. Use [^\S\n\r] instead of \s
/* END TYPES */
function hasOwnProp$1(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
function copyProps$1(toObj, fromObj) {
    for (var key in fromObj) {
        if (hasOwnProp$1(fromObj, key)) {
            toObj[key] = fromObj[key];
        }
    }
    return toObj;
}
/**
 * Takes a string within a template and trims it, based on the preceding tag's whitespace control and `config.autoTrim`
 */
function trimWS(str, config, wsLeft, wsRight) {
    var leftTrim;
    var rightTrim;
    if (Array.isArray(config.autoTrim)) {
        // kinda confusing
        // but _}} will trim the left side of the following string
        leftTrim = config.autoTrim[1];
        rightTrim = config.autoTrim[0];
    }
    else {
        leftTrim = rightTrim = config.autoTrim;
    }
    if (wsLeft || wsLeft === false) {
        leftTrim = wsLeft;
    }
    if (wsRight || wsRight === false) {
        rightTrim = wsRight;
    }
    if (!rightTrim && !leftTrim) {
        return str;
    }
    if (leftTrim === 'slurp' && rightTrim === 'slurp') {
        return str.trim();
    }
    if (leftTrim === '_' || leftTrim === 'slurp') {
        // console.log('trimming left' + leftTrim)
        // full slurp
        str = trimLeft(str);
    }
    else if (leftTrim === '-' || leftTrim === 'nl') {
        // nl trim
        str = str.replace(/^(?:\r\n|\n|\r)/, '');
    }
    if (rightTrim === '_' || rightTrim === 'slurp') {
        // full slurp
        str = trimRight(str);
    }
    else if (rightTrim === '-' || rightTrim === 'nl') {
        // nl trim
        str = str.replace(/(?:\r\n|\n|\r)$/, ''); // TODO: make sure this gets \r\n
    }
    return str;
}
/**
 * A map of special HTML characters to their XML-escaped equivalents
 */
var escMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
};
function replaceChar(s) {
    return escMap[s];
}
/**
 * XML-escapes an input value after converting it to a string
 *
 * @param str - Input value (usually a string)
 * @returns XML-escaped string
 */
function XMLEscape(str) {
    // eslint-disable-line @typescript-eslint/no-explicit-any
    // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.
    var newStr = String(str);
    if (/[&<>"']/.test(newStr)) {
        return newStr.replace(/[&<>"']/g, replaceChar);
    }
    else {
        return newStr;
    }
}

/* END TYPES */
var templateLitReg = /`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})*}|(?!\${)[^\\`])*`/g;
var singleQuoteReg = /'(?:\\[\s\w"'\\`]|[^\n\r'\\])*?'/g;
var doubleQuoteReg = /"(?:\\[\s\w"'\\`]|[^\n\r"\\])*?"/g;
/** Escape special regular expression characters inside a string */
function escapeRegExp(string) {
    // From MDN
    return string.replace(/[.*+\-?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}
function parse(str, config) {
    var buffer = [];
    var trimLeftOfNextStr = false;
    var lastIndex = 0;
    var parseOptions = config.parse;
    if (config.plugins) {
        for (var i = 0; i < config.plugins.length; i++) {
            var plugin = config.plugins[i];
            if (plugin.processTemplate) {
                str = plugin.processTemplate(str, config);
            }
        }
    }
    /* Adding for EJS compatibility */
    if (config.rmWhitespace) {
        // Code taken directly from EJS
        // Have to use two separate replaces here as `^` and `$` operators don't
        // work well with `\r` and empty lines don't work well with the `m` flag.
        // Essentially, this replaces the whitespace at the beginning and end of
        // each line and removes multiple newlines.
        str = str.replace(/[\r\n]+/g, '\n').replace(/^\s+|\s+$/gm, '');
    }
    /* End rmWhitespace option */
    templateLitReg.lastIndex = 0;
    singleQuoteReg.lastIndex = 0;
    doubleQuoteReg.lastIndex = 0;
    function pushString(strng, shouldTrimRightOfString) {
        if (strng) {
            // if string is truthy it must be of type 'string'
            strng = trimWS(strng, config, trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined
            shouldTrimRightOfString);
            if (strng) {
                // replace \ with \\, ' with \'
                // we're going to convert all CRLF to LF so it doesn't take more than one replace
                strng = strng.replace(/\\|'/g, '\\$&').replace(/\r\n|\n|\r/g, '\\n');
                buffer.push(strng);
            }
        }
    }
    var prefixes = [parseOptions.exec, parseOptions.interpolate, parseOptions.raw].reduce(function (accumulator, prefix) {
        if (accumulator && prefix) {
            return accumulator + '|' + escapeRegExp(prefix);
        }
        else if (prefix) {
            // accumulator is falsy
            return escapeRegExp(prefix);
        }
        else {
            // prefix and accumulator are both falsy
            return accumulator;
        }
    }, '');
    var parseOpenReg = new RegExp('([^]*?)' + escapeRegExp(config.tags[0]) + '(-|_)?\\s*(' + prefixes + ')?\\s*', 'g');
    var parseCloseReg = new RegExp('\'|"|`|\\/\\*|(\\s*(-|_)?' + escapeRegExp(config.tags[1]) + ')', 'g');
    // TODO: benchmark having the \s* on either side vs using str.trim()
    var m;
    while ((m = parseOpenReg.exec(str))) {
        lastIndex = m[0].length + m.index;
        var precedingString = m[1];
        var wsLeft = m[2];
        var prefix = m[3] || ''; // by default either ~, =, or empty
        pushString(precedingString, wsLeft);
        parseCloseReg.lastIndex = lastIndex;
        var closeTag = void 0;
        var currentObj = false;
        while ((closeTag = parseCloseReg.exec(str))) {
            if (closeTag[1]) {
                var content = str.slice(lastIndex, closeTag.index);
                parseOpenReg.lastIndex = lastIndex = parseCloseReg.lastIndex;
                trimLeftOfNextStr = closeTag[2];
                var currentType = prefix === parseOptions.exec
                    ? 'e'
                    : prefix === parseOptions.raw
                        ? 'r'
                        : prefix === parseOptions.interpolate
                            ? 'i'
                            : '';
                currentObj = { t: currentType, val: content };
                break;
            }
            else {
                var char = closeTag[0];
                if (char === '/*') {
                    var commentCloseInd = str.indexOf('*/', parseCloseReg.lastIndex);
                    if (commentCloseInd === -1) {
                        ParseErr('unclosed comment', str, closeTag.index);
                    }
                    parseCloseReg.lastIndex = commentCloseInd;
                }
                else if (char === "'") {
                    singleQuoteReg.lastIndex = closeTag.index;
                    var singleQuoteMatch = singleQuoteReg.exec(str);
                    if (singleQuoteMatch) {
                        parseCloseReg.lastIndex = singleQuoteReg.lastIndex;
                    }
                    else {
                        ParseErr('unclosed string', str, closeTag.index);
                    }
                }
                else if (char === '"') {
                    doubleQuoteReg.lastIndex = closeTag.index;
                    var doubleQuoteMatch = doubleQuoteReg.exec(str);
                    if (doubleQuoteMatch) {
                        parseCloseReg.lastIndex = doubleQuoteReg.lastIndex;
                    }
                    else {
                        ParseErr('unclosed string', str, closeTag.index);
                    }
                }
                else if (char === '`') {
                    templateLitReg.lastIndex = closeTag.index;
                    var templateLitMatch = templateLitReg.exec(str);
                    if (templateLitMatch) {
                        parseCloseReg.lastIndex = templateLitReg.lastIndex;
                    }
                    else {
                        ParseErr('unclosed string', str, closeTag.index);
                    }
                }
            }
        }
        if (currentObj) {
            buffer.push(currentObj);
        }
        else {
            ParseErr('unclosed tag', str, m.index + precedingString.length);
        }
    }
    pushString(str.slice(lastIndex, str.length), false);
    if (config.plugins) {
        for (var i = 0; i < config.plugins.length; i++) {
            var plugin = config.plugins[i];
            if (plugin.processAST) {
                buffer = plugin.processAST(buffer, config);
            }
        }
    }
    return buffer;
}

/* END TYPES */
/**
 * Compiles a template string to a function string. Most often users just use `compile()`, which calls `compileToString` and creates a new function using the result
 *
 * **Example**
 *
 * ```js
 * compileToString("Hi <%= it.user %>", eta.config)
 * // "var tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR"
 * ```
 */
function compileToString(str, config) {
    var buffer = parse(str, config);
    var res = "var tR='',__l,__lP" +
        (config.include ? ',include=E.include.bind(E)' : '') +
        (config.includeFile ? ',includeFile=E.includeFile.bind(E)' : '') +
        '\nfunction layout(p,d){__l=p;__lP=d}\n' +
        (config.useWith ? 'with(' + config.varName + '||{}){' : '') +
        compileScope(buffer, config) +
        (config.includeFile
            ? 'if(__l)tR=' +
                (config.async ? 'await ' : '') +
                ("includeFile(__l,Object.assign(" + config.varName + ",{body:tR},__lP))\n")
            : config.include
                ? 'if(__l)tR=' +
                    (config.async ? 'await ' : '') +
                    ("include(__l,Object.assign(" + config.varName + ",{body:tR},__lP))\n")
                : '') +
        'if(cb){cb(null,tR)} return tR' +
        (config.useWith ? '}' : '');
    if (config.plugins) {
        for (var i = 0; i < config.plugins.length; i++) {
            var plugin = config.plugins[i];
            if (plugin.processFnString) {
                res = plugin.processFnString(res, config);
            }
        }
    }
    return res;
}
/**
 * Loops through the AST generated by `parse` and transform each item into JS calls
 *
 * **Example**
 *
 * ```js
 * // AST version of 'Hi <%= it.user %>'
 * let templateAST = ['Hi ', { val: 'it.user', t: 'i' }]
 * compileScope(templateAST, eta.config)
 * // "tR+='Hi ';tR+=E.e(it.user);"
 * ```
 */
function compileScope(buff, config) {
    var i = 0;
    var buffLength = buff.length;
    var returnStr = '';
    for (i; i < buffLength; i++) {
        var currentBlock = buff[i];
        if (typeof currentBlock === 'string') {
            var str = currentBlock;
            // we know string exists
            returnStr += "tR+='" + str + "'\n";
        }
        else {
            var type = currentBlock.t; // ~, s, !, ?, r
            var content = currentBlock.val || '';
            if (type === 'r') {
                // raw
                if (config.filter) {
                    content = 'E.filter(' + content + ')';
                }
                returnStr += 'tR+=' + content + '\n';
            }
            else if (type === 'i') {
                // interpolate
                if (config.filter) {
                    content = 'E.filter(' + content + ')';
                }
                if (config.autoEscape) {
                    content = 'E.e(' + content + ')';
                }
                returnStr += 'tR+=' + content + '\n';
                // reference
            }
            else if (type === 'e') {
                // execute
                returnStr += content + '\n'; // you need a \n in case you have <% } %>
            }
        }
    }
    return returnStr;
}

/**
 * Handles storage and accessing of values
 *
 * In this case, we use it to store compiled template functions
 * Indexed by their `name` or `filename`
 */
var Cacher$1 = /** @class */ (function () {
    function Cacher(cache) {
        this.cache = cache;
    }
    Cacher.prototype.define = function (key, val) {
        this.cache[key] = val;
    };
    Cacher.prototype.get = function (key) {
        // string | array.
        // TODO: allow array of keys to look down
        // TODO: create plugin to allow referencing helpers, filters with dot notation
        return this.cache[key];
    };
    Cacher.prototype.remove = function (key) {
        delete this.cache[key];
    };
    Cacher.prototype.reset = function () {
        this.cache = {};
    };
    Cacher.prototype.load = function (cacheObj) {
        copyProps$1(this.cache, cacheObj);
    };
    return Cacher;
}());

/* END TYPES */
/**
 * Eta's template storage
 *
 * Stores partials and cached templates
 */
var templates = new Cacher$1({});

/* END TYPES */
/**
 * Include a template based on its name (or filepath, if it's already been cached).
 *
 * Called like `include(templateNameOrPath, data)`
 */
function includeHelper(templateNameOrPath, data) {
    var template = this.templates.get(templateNameOrPath);
    if (!template) {
        throw EtaErr('Could not fetch template "' + templateNameOrPath + '"');
    }
    return template(data, this);
}
/** Eta's base (global) configuration */
var config = {
    async: false,
    autoEscape: true,
    autoTrim: [false, 'nl'],
    cache: false,
    e: XMLEscape,
    include: includeHelper,
    parse: {
        exec: '',
        interpolate: '=',
        raw: '~'
    },
    plugins: [],
    rmWhitespace: false,
    tags: ['<%', '%>'],
    templates: templates,
    useWith: false,
    varName: 'it'
};
/**
 * Takes one or two partial (not necessarily complete) configuration objects, merges them 1 layer deep into eta.config, and returns the result
 *
 * @param override Partial configuration object
 * @param baseConfig Partial configuration object to merge before `override`
 *
 * **Example**
 *
 * ```js
 * let customConfig = getConfig({tags: ['!#', '#!']})
 * ```
 */
function getConfig(override, baseConfig) {
    // TODO: run more tests on this
    var res = {}; // Linked
    copyProps$1(res, config); // Creates deep clone of eta.config, 1 layer deep
    if (baseConfig) {
        copyProps$1(res, baseConfig);
    }
    if (override) {
        copyProps$1(res, override);
    }
    return res;
}

/* END TYPES */
/**
 * Takes a template string and returns a template function that can be called with (data, config, [cb])
 *
 * @param str - The template string
 * @param config - A custom configuration object (optional)
 *
 * **Example**
 *
 * ```js
 * let compiledFn = eta.compile("Hi <%= it.user %>")
 * // function anonymous()
 * let compiledFnStr = compiledFn.toString()
 * // "function anonymous(it,E,cb\n) {\nvar tR='',include=E.include.bind(E),includeFile=E.includeFile.bind(E);tR+='Hi ';tR+=E.e(it.user);if(cb){cb(null,tR)} return tR\n}"
 * ```
 */
function compile(str, config) {
    var options = getConfig(config || {});
    /* ASYNC HANDLING */
    // The below code is modified from mde/ejs. All credit should go to them.
    var ctor = options.async ? getAsyncFunctionConstructor() : Function;
    /* END ASYNC HANDLING */
    try {
        return new ctor(options.varName, 'E', // EtaConfig
        'cb', // optional callback
        compileToString(str, options)); // eslint-disable-line no-new-func
    }
    catch (e) {
        if (e instanceof SyntaxError) {
            throw EtaErr('Bad template syntax\n\n' +
                e.message +
                '\n' +
                Array(e.message.length + 1).join('=') +
                '\n' +
                compileToString(str, options) +
                '\n' // This will put an extra newline before the callstack for extra readability
            );
        }
        else {
            throw e;
        }
    }
}

var _BOM = /^\uFEFF/;
/* END TYPES */
/**
 * Get the path to the included file from the parent file path and the
 * specified path.
 *
 * If `name` does not have an extension, it will default to `.eta`
 *
 * @param name specified path
 * @param parentfile parent file path
 * @param isDirectory whether parentfile is a directory
 * @return absolute path to template
 */
function getWholeFilePath(name, parentfile, isDirectory) {
    var includePath = path.resolve(isDirectory ? parentfile : path.dirname(parentfile), // returns directory the parent file is in
    name // file
    ) + (path.extname(name) ? '' : '.eta');
    return includePath;
}
/**
 * Get the absolute path to an included template
 *
 * If this is called with an absolute path (for example, starting with '/' or 'C:\')
 * then Eta will attempt to resolve the absolute path within options.views. If it cannot,
 * Eta will fallback to options.root or '/'
 *
 * If this is called with a relative path, Eta will:
 * - Look relative to the current template (if the current template has the `filename` property)
 * - Look inside each directory in options.views
 *
 * Note: if Eta is unable to find a template using path and options, it will throw an error.
 *
 * @param path    specified path
 * @param options compilation options
 * @return absolute path to template
 */
function getPath(path, options) {
    var includePath = false;
    var views = options.views;
    var searchedPaths = [];
    // If these four values are the same,
    // getPath() will return the same result every time.
    // We can cache the result to avoid expensive
    // file operations.
    var pathOptions = JSON.stringify({
        filename: options.filename,
        path: path,
        root: options.root,
        views: options.views
    });
    if (options.cache && options.filepathCache && options.filepathCache[pathOptions]) {
        // Use the cached filepath
        return options.filepathCache[pathOptions];
    }
    /** Add a filepath to the list of paths we've checked for a template */
    function addPathToSearched(pathSearched) {
        if (!searchedPaths.includes(pathSearched)) {
            searchedPaths.push(pathSearched);
        }
    }
    /**
     * Take a filepath (like 'partials/mypartial.eta'). Attempt to find the template file inside `views`;
     * return the resulting template file path, or `false` to indicate that the template was not found.
     *
     * @param views the filepath that holds templates, or an array of filepaths that hold templates
     * @param path the path to the template
     */
    function searchViews(views, path) {
        var filePath;
        // If views is an array, then loop through each directory
        // And attempt to find the template
        if (Array.isArray(views) &&
            views.some(function (v) {
                filePath = getWholeFilePath(path, v, true);
                addPathToSearched(filePath);
                return fs.existsSync(filePath);
            })) {
            // If the above returned true, we know that the filePath was just set to a path
            // That exists (Array.some() returns as soon as it finds a valid element)
            return filePath;
        }
        else if (typeof views === 'string') {
            // Search for the file if views is a single directory
            filePath = getWholeFilePath(path, views, true);
            addPathToSearched(filePath);
            if (fs.existsSync(filePath)) {
                return filePath;
            }
        }
        // Unable to find a file
        return false;
    }
    // Path starts with '/', 'C:\', etc.
    var match = /^[A-Za-z]+:\\|^\//.exec(path);
    // Absolute path, like /partials/partial.eta
    if (match && match.length) {
        // We have to trim the beginning '/' off the path, or else
        // path.resolve(dir, path) will always resolve to just path
        var formattedPath = path.replace(/^\/*/, '');
        // First, try to resolve the path within options.views
        includePath = searchViews(views, formattedPath);
        if (!includePath) {
            // If that fails, searchViews will return false. Try to find the path
            // inside options.root (by default '/', the base of the filesystem)
            var pathFromRoot = getWholeFilePath(formattedPath, options.root || '/', true);
            addPathToSearched(pathFromRoot);
            includePath = pathFromRoot;
        }
    }
    else {
        // Relative paths
        // Look relative to a passed filename first
        if (options.filename) {
            var filePath = getWholeFilePath(path, options.filename);
            addPathToSearched(filePath);
            if (fs.existsSync(filePath)) {
                includePath = filePath;
            }
        }
        // Then look for the template in options.views
        if (!includePath) {
            includePath = searchViews(views, path);
        }
        if (!includePath) {
            throw EtaErr('Could not find the template "' + path + '". Paths tried: ' + searchedPaths);
        }
    }
    // If caching and filepathCache are enabled,
    // cache the input & output of this function.
    if (options.cache && options.filepathCache) {
        options.filepathCache[pathOptions] = includePath;
    }
    return includePath;
}
/**
 * Reads a file synchronously
 */
function readFile(filePath) {
    try {
        return fs.readFileSync(filePath).toString().replace(_BOM, ''); // TODO: is replacing BOM's necessary?
    }
    catch (_a) {
        throw EtaErr("Failed to read template at '" + filePath + "'");
    }
}

// express is set like: app.engine('html', require('eta').renderFile)
/* END TYPES */
/**
 * Reads a template, compiles it into a function, caches it if caching isn't disabled, returns the function
 *
 * @param filePath Absolute path to template file
 * @param options Eta configuration overrides
 * @param noCache Optionally, make Eta not cache the template
 */
function loadFile(filePath, options, noCache) {
    var config = getConfig(options);
    var template = readFile(filePath);
    try {
        var compiledTemplate = compile(template, config);
        if (!noCache) {
            config.templates.define(config.filename, compiledTemplate);
        }
        return compiledTemplate;
    }
    catch (e) {
        throw EtaErr('Loading file: ' + filePath + ' failed:\n\n' + e.message);
    }
}
/**
 * Get the template from a string or a file, either compiled on-the-fly or
 * read from cache (if enabled), and cache the template if needed.
 *
 * If `options.cache` is true, this function reads the file from
 * `options.filename` so it must be set prior to calling this function.
 *
 * @param options   compilation options
 * @return Eta template function
 */
function handleCache(options) {
    var filename = options.filename;
    if (options.cache) {
        var func = options.templates.get(filename);
        if (func) {
            return func;
        }
        return loadFile(filename, options);
    }
    // Caching is disabled, so pass noCache = true
    return loadFile(filename, options, true);
}
/**
 * Get the template function.
 *
 * If `options.cache` is `true`, then the template is cached.
 *
 * This returns a template function and the config object with which that template function should be called.
 *
 * @remarks
 *
 * It's important that this returns a config object with `filename` set.
 * Otherwise, the included file would not be able to use relative paths
 *
 * @param path path for the specified file (if relative, specify `views` on `options`)
 * @param options compilation options
 * @return [Eta template function, new config object]
 */
function includeFile(path, options) {
    // the below creates a new options object, using the parent filepath of the old options object and the path
    var newFileOptions = getConfig({ filename: getPath(path, options) }, options);
    // TODO: make sure properties are currectly copied over
    return [handleCache(newFileOptions), newFileOptions];
}

/* END TYPES */
/**
 * Called with `includeFile(path, data)`
 */
function includeFileHelper(path, data) {
    var templateAndConfig = includeFile(path, this);
    return templateAndConfig[0](data, templateAndConfig[1]);
}

/* END TYPES */
function handleCache$1(template, options) {
    if (options.cache && options.name && options.templates.get(options.name)) {
        return options.templates.get(options.name);
    }
    var templateFunc = typeof template === 'function' ? template : compile(template, options);
    // Note that we don't have to check if it already exists in the cache;
    // it would have returned earlier if it had
    if (options.cache && options.name) {
        options.templates.define(options.name, templateFunc);
    }
    return templateFunc;
}
/**
 * Render a template
 *
 * If `template` is a string, Eta will compile it to a function and then call it with the provided data.
 * If `template` is a template function, Eta will call it with the provided data.
 *
 * If `config.async` is `false`, Eta will return the rendered template.
 *
 * If `config.async` is `true` and there's a callback function, Eta will call the callback with `(err, renderedTemplate)`.
 * If `config.async` is `true` and there's not a callback function, Eta will return a Promise that resolves to the rendered template.
 *
 * If `config.cache` is `true` and `config` has a `name` or `filename` property, Eta will cache the template on the first render and use the cached template for all subsequent renders.
 *
 * @param template Template string or template function
 * @param data Data to render the template with
 * @param config Optional config options
 * @param cb Callback function
 */
function render(template, data, config, cb) {
    var options = getConfig(config || {});
    if (options.async) {
        if (cb) {
            // If user passes callback
            try {
                // Note: if there is an error while rendering the template,
                // It will bubble up and be caught here
                var templateFn = handleCache$1(template, options);
                templateFn(data, options, cb);
            }
            catch (err) {
                return cb(err);
            }
        }
        else {
            // No callback, try returning a promise
            if (typeof promiseImpl$1 === 'function') {
                return new promiseImpl$1(function (resolve, reject) {
                    try {
                        resolve(handleCache$1(template, options)(data, options));
                    }
                    catch (err) {
                        reject(err);
                    }
                });
            }
            else {
                throw EtaErr("Please provide a callback function, this env doesn't support Promises");
            }
        }
    }
    else {
        return handleCache$1(template, options)(data, options);
    }
}
/**
 * Render a template asynchronously
 *
 * If `template` is a string, Eta will compile it to a function and call it with the provided data.
 * If `template` is a function, Eta will call it with the provided data.
 *
 * If there is a callback function, Eta will call it with `(err, renderedTemplate)`.
 * If there is not a callback function, Eta will return a Promise that resolves to the rendered template
 *
 * @param template Template string or template function
 * @param data Data to render the template with
 * @param config Optional config options
 * @param cb Callback function
 */
function renderAsync(template, data, config, cb) {
    // Using Object.assign to lower bundle size, using spread operator makes it larger because of typescript injected polyfills
    return render(template, data, Object.assign({}, config, { async: true }), cb);
}

// @denoify-ignore
config.includeFile = includeFileHelper;
config.filepathCache = {};

const VAR_NAME = 'sk';
const EBAR = `\n---------------------------\n`;

Element.prototype.addClazz = function (str) {
    if (Array.isArray(str)) {
        this.addClass(...str);
    }
    else
        this.addClass(str);
};
function getFiles(app, dir) {
    let dirPath = obsidian.normalizePath(dir);
    let fo = app.vault.getAbstractFileByPath(dirPath);
    if (!fo || !(fo instanceof obsidian.TFolder))
        throw `Skribi: Could not find folder '${dirPath}'`;
    let files = [];
    obsidian.Vault.recurseChildren(fo, (fi) => {
        if (fi instanceof obsidian.TFile)
            files.push(fi);
    });
    // console.log(files)
    return files;
}
function checkFileExt(files, exts) {
    exts = toArray(exts);
    return toArray(files).every((f) => { return exts.contains(f.extension); });
}
function filterFileExt(files, exts) {
    exts = toArray(exts);
    return toArray(files).filter((f) => { if (checkFileExt(f, exts))
        return f; });
}
function toArray(args) {
    return (Array.isArray(args) ? args : [args]);
}
function isInFolder(e, dir) {
    let boo = (obsidian.normalizePath((/.+\//g).exec(e.path)[0]) == obsidian.normalizePath(dir));
    return boo;
}
function isExtant(obj) {
    return !((obj === null) || (obj === undefined));
}
function roundTo(x, to) {
    return parseFloat(parseFloat(x).toPrecision(to !== null && to !== void 0 ? to : 4));
}
function getVerbosity() {
    var _a;
    //@ts-ignore
    return ((_a = window.app.plugins.plugins["obsidian-skribi"]) === null || _a === void 0 ? void 0 : _a.settings.verboseLogging) || false;
}
function vLog(...args) {
    if (getVerbosity()) {
        console.log("Skribi:", ...args);
    }
}
function vWarn(...args) {
    if (getVerbosity()) {
        console.warn("Skribi:", ...args);
    }
}
function dLog(...args) {
    var _a, _b;
    //@ts-ignore
    if (((_b = (_a = window === null || window === void 0 ? void 0 : window.app.plugins.plugins["obsidian-skribi"]) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.devLogging) || false) {
        console.log(...args);
    }
}
/* Takes an array of strings and returns a record of key/value pairs for each, where the key and value are the same */
function toDupeRecord(arr) {
    return arr.reduce((a, i) => (Object.assign(Object.assign({}, a), { [i]: i })), {});
}
/**
 * @param input An object to clone
 * @param keys The keys of properties to omit from the clone
 * @returns A clone of 'input' without the omitted properties */
function withoutKey(input, key) {
    const clone = Object.assign({}, input);
    if (Array.isArray(key)) {
        key.forEach((k) => {
            delete clone[k];
        });
    }
    else {
        delete clone[key];
    }
    return clone;
}
Object.getPrototypeOf(function () {
    return __awaiter(this, void 0, void 0, function* () { });
}).constructor;
const promiseImpl = new Function('return this')().Promise;
const getAsyncConstructor = () => new Function('return (async function(){}).constructor')();
const isFunc = (func) => (func instanceof Function);
const isFile = (item) => (item) instanceof obsidian.TFile;
function average(...numbers) {
    return numbers.reduce((val, cur) => val + cur) / numbers.length;
}
/* Get link to documentation page. */
function linkDocs(page) {
    // return `https://azulaloi.net/obsidian-skribi/${page}`
    return `https://azulaloi.github.io/obsidian-skribi/${page}`;
}
/* Prefixes string with plugin name. Makes reusing code across plugins easier. */
function kls(cls) { return `skribi-${cls}`; }
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while (i) {
        hash = (hash * 33) ^ str.charCodeAt(--i);
    }
    return hash >>> 0;
}

/** Adds the entries of scope to a function string.
* @param functionString A string function compiled by Eta's compileToString()
* @param keys Array of keys that the returned function will expect to be present in its scope argument
* @param async If true, returned function will be asynchronous */
function compileWith(functionString, keys, async) {
    var a = "";
    for (let k of keys) {
        a += `${k},`;
    }
    let func = `var {${a.substr(0, a.length - 1)}} = scope;\n` + functionString;
    let constructor = (async) ? getAsyncConstructor() : Function;
    let compiled = new constructor('scope', func);
    return compiled;
}
/* Version of Eta's render function, modified to handle scoped templates */
function renderEta(handler, template, data, config, cb, scope, binder) {
    const options = getConfig(config || {});
    if (options.async) {
        // if (cb) {
        // try { 
        // const templateFn = handler.getCached(template, options, scope, binder)
        // templateFn(scope)
        // } catch(e) {
        // return cb(e)
        // }
        // } else {
        // return (async () => handler.getCached(template, options, scope, binder)(scope))()
        return new promiseImpl(function (resolve, reject) {
            try {
                resolve(handler.getCached(template, options, scope, binder)(scope));
            }
            catch (e) {
                reject(e);
            }
        });
        // }
    }
    else {
        let func = handler.getCached(template, options, scope, binder);
        dLog(`Rendering function`, func);
        return func(scope);
    }
}
/* Version of Eta's async render function, just sets async to true */
/* Note: perf impact of using async templatefunctions is negligible */
function renderEtaAsync(handler, template, data, config, cb, scope, binder) {
    return renderEta(handler, template, data, Object.assign({}, config, { async: true }), cb, scope, binder);
}

class Provider {
    constructor(bus, id) {
        this.functions = new Map();
        this.initLoaded = false;
        this.isDirty = false;
        this.bus = bus;
        this.id = id;
    }
    createObject() {
        return Object.assign({}, Object.fromEntries(this.functions));
    }
    init() {
        this.initLoaded = true;
        return Promise.resolve();
    }
    unload() { }
    reload() {
        return Promise.resolve();
    }
    /**
     * @param clean If true, provider.isDirty = false */
    setDirty(dirty) {
        this.isDirty = isExtant(dirty) ? dirty : true;
        this.bus.providerNotificationDirty(this, this.isDirty);
    }
    /* May be called without data. */
    postDirty(...args) { }
}
class ProviderPredicated extends Provider {
    constructor() {
        super(...arguments);
        this.predicatePluginName = '';
    }
    getPredicate() {
        var _a;
        return ((_a = this.bus.plugin.app.plugins.plugins) === null || _a === void 0 ? void 0 : _a[this.predicatePluginName]) || null;
    }
    /**
     * @returns true only when the predicate condition is met */
    predicateCheck() {
        return this.bus.plugin.app.plugins.enabledPlugins.has(this.predicatePluginName);
    }
    /**
     * @returns An error string describing the unmet predicate condition */
    predicateError() {
        return `Integration Module '${this.id}' not available, could not find required plugin: '${this.predicatePluginName}'`;
    }
}

class ProviderSK extends Provider {
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.init.call(this);
        });
    }
    createObject() {
        return {
            render: function (str) {
                let e = createDiv({ cls: "skribi-render-virtual" });
                console.log(this);
                obsidian.MarkdownRenderer.renderMarkdown(str, e, this.ctx.file.path, null);
                return e.innerHTML;
            },
            has: function (v) {
                var _a, _b;
                return !((((_a = this.v) === null || _a === void 0 ? void 0 : _a[v]) == null) || (((_b = this.v) === null || _b === void 0 ? void 0 : _b[v]) == undefined));
            },
            abort: function (s) {
                let abortPacket = String.isString(s)
                    ? { hasData: true, flag: 'abort', hover: s }
                    : Object.assign({ hasData: true, flag: 'abort' }, s);
                throw abortPacket;
            },
            getTemplateSource: function (s) {
                return makeInitPromise(this.child, () => {
                    var _a;
                    let has = this.ctx.plugin.eta.loader.styleCache.has(s);
                    if (!has) {
                        console.warn(`Skribi: getTemplateSource()\n Could not find requested template '${s}'\n`, this.child._c);
                    }
                    let c = this.ctx.plugin.eta.loader.templateCache.get(s);
                    if (has && !(c === null || c === void 0 ? void 0 : c.source)) {
                        console.warn(`Skribi: getTemplateSource()\n Template '${s}' found, but has no cached source\n`, this.child._c);
                    }
                    return (_a = c === null || c === void 0 ? void 0 : c.source) !== null && _a !== void 0 ? _a : null;
                });
            },
            getStyle: function (s) {
                return makeInitPromise(this.child, () => {
                    if (!this.ctx.plugin.eta.loader.styleCache.has(s)) {
                        console.warn(`Skribi: getStyle()\n Could not find requested style '${s}.css'\n`, this.child._c);
                    }
                    return this.ctx.plugin.eta.loader.styleCache.get(s);
                });
            },
            /**
             * @param styleSnip The ID of a .css file that is expected to be present in the style cache
             * @returns A promise for the scoped style (resolves on post) */
            includeStyle: function (styleSnip) {
                return __awaiter(this, void 0, void 0, function* () {
                    return makeInitPromise(this.child, () => __awaiter(this, void 0, void 0, function* () {
                        this.child._c.listenFor("style", styleSnip);
                        return this.child.addStyle(yield this.getStyle(styleSnip));
                    }));
                });
            }
        };
    }
}
function makeInitPromise(child, cb) {
    if (window.app.plugins.plugins['obsidian-skribi'].initLoaded) {
        return Promise.resolve(cb());
    }
    else
        return makeEventPromise(child, window.app.workspace, 'skribi:template-init-complete', cb);
}
function makeEventPromise(child, eventConstructor, eventName, cb) {
    return new Promise((resolve, reject) => {
        console.log("makeEventPromise", this);
        let x = eventConstructor.on(eventName, () => {
            eventConstructor.offref(x);
            resolve(cb());
        });
        child.registerEvent(x);
    });
}

class ProviderDataview extends ProviderPredicated {
    constructor() {
        super(...arguments);
        this.predicatePluginName = 'dataview';
        // createDynamic(state: DynamicState) {
        // let api = new DataviewInlineApi(this.dvp.index, state.child, state.el, this.bus.plugin.app, this.dvp.settings, state.file.path)
        // return this?.dvp?.api || null
        // }
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            // this.dvp = this.bus.plugin.app.plugins.plugins.dataview as DataviewPlugin || null
            this.eventRef_API_READY = this.bus.plugin.app.metadataCache.on('dataview:api-ready', (api) => { this.apiReady(); });
            return _super.init.call(this);
        });
    }
    unload() {
        this.bus.plugin.app.metadataCache.offref(this.eventRef_API_READY);
    }
    createObject() {
        var _a, _b;
        return ((_b = (_a = this.bus.plugin.app.plugins.plugins) === null || _a === void 0 ? void 0 : _a.dataview) === null || _b === void 0 ? void 0 : _b.api) || null;
    }
    apiReady() {
    }
}

class ProviderWeather extends ProviderPredicated {
    constructor() {
        super(...arguments);
        this.predicatePluginName = 'obsidian-weather';
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.eventRefs = {
                ready: this.bus.plugin.app.workspace.on("az-weather:api-ready", () => { }),
                unload: this.bus.plugin.app.workspace.on("az-weather:api-unload", () => { }),
                tick: this.bus.plugin.app.workspace.on("az-weather:api-tick", () => { })
            };
            this.functions.set("check", this.provide_predicate());
            this.functions.set("cache", this.provide_dispenseCache());
            this.functions.set("tickEventRef", this.provide_tickEventRef());
            return _super.init.call(this);
        });
    }
    unload() {
        for (let r of Object.values(this.eventRefs)) {
            this.bus.plugin.app.workspace.offref(r);
        }
    }
    /* Provisions */
    provide_predicate() {
        return () => {
            return (!!this.weatherAPI);
        };
    }
    provide_dispenseCache() {
        return () => {
            var _a;
            let p = this.getPredicate();
            return (_a = p === null || p === void 0 ? void 0 : p.API) === null || _a === void 0 ? void 0 : _a.dispenseCache.bind(p.API)();
        };
    }
    provide_tickEventRef() {
        return (cb) => {
            return this.bus.plugin.app.workspace.on("az-weather:api-tick", (...a) => cb(...a));
        };
    }
}

// TODO: add system to auto-reload skribis when module cache changes 
class ProviderScriptloader extends Provider {
    constructor() {
        super(...arguments);
        this.loadedModules = new Map();
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return this.initLoad().then(() => _super.init.call(this));
        });
    }
    initLoad() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.loadAndSet(...getFiles(this.bus.plugin.app, this.bus.plugin.settings.scriptFolder));
        });
    }
    loadAndSet(...file) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.readFiles(...file)
                .then((ret) => { /*vLog('Loading JS modules...', ret);*/ this.stashModule(ret); return Promise.resolve(); });
        });
    }
    stashModule(modules) {
        dLog('Scriptloader: stashModule', modules);
        modules.forEach((r) => {
            var _a, _b;
            if (r) {
                this.loadedModules.delete(r[0]);
                this.loadedModules.set(r[0], {
                    name: (String.isString((_b = (_a = r[1]) === null || _a === void 0 ? void 0 : _a._name) !== null && _b !== void 0 ? _b : null) ? r[1]._name : null),
                    properties: withoutKey(r[1], '_name')
                });
            }
        });
    }
    createObject() {
        let exports = new Map();
        this.loadedModules.forEach((value, key) => {
            var _a;
            let single = (Object.keys(value.properties).length == 1);
            exports.set(((_a = value.name) !== null && _a !== void 0 ? _a : (single ? Object.keys(value.properties)[0] : key)), single ? Object.values(value.properties)[0] : value.properties);
        });
        return Object.assign({}, Object.fromEntries(exports));
    }
    readFiles(...files) {
        return __awaiter(this, void 0, void 0, function* () {
            let filtered = filterFileExt(files, "js");
            const reads = filtered.map((f) => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (!(this.bus.plugin.app.vault.adapter instanceof obsidian.FileSystemAdapter))
                        return Promise.reject();
                    let path = this.bus.plugin.app.vault.adapter.getBasePath() + "/" + f.path;
                    let resPath = window.require.resolve(path);
                    if (Object.keys(window.require.cache).contains(resPath))
                        delete window.require.cache[window.require.resolve(resPath)];
                    const mod = require(path);
                    return (isExtant(mod))
                        ? Promise.resolve([f.basename, mod])
                        : Promise.reject();
                }
                catch (e) {
                    console.warn(e);
                    return Promise.reject();
                }
            }));
            return yield Promise.allSettled(reads)
                .then((settled) => {
                return settled
                    .filter((r) => { return r.status == "fulfilled"; })
                    .map((v) => { return v.value; });
            });
        });
    }
    clearJS(...items) {
        let names = items.map((item) => {
            if (isFile(item))
                return filterFileExt(item, 'js')[0].basename;
            else if (String.isString(item))
                return item;
        });
        for (let name of names)
            this.loadedModules.delete(name);
    }
    reload() {
        const _super = Object.create(null, {
            reload: { get: () => super.reload }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.loadedModules.clear();
            yield this.initLoad();
            return _super.reload.call(this);
        });
    }
    postDirty() {
        if (this.bus.plugin.settings.autoReload) {
            Array.from(this.bus.plugin.children).forEach(child => child.scriptsUpdated());
        }
    }
    /* FileMinder Functions */
    get directory() { return this.bus.plugin.settings.scriptFolder; }
    fileUpdated(file) {
        if (!isFile(file))
            return;
        vLog(`File '${file.name}' in script directory modified, updating...`);
        this.clearJS(file);
        this.loadAndSet(file)
            .then(() => { this.setDirty(); }, () => this.clearJS(file));
    }
    fileDeleted(file) {
        if (!isFile(file))
            return;
        vLog(`File '${file.name}' removed from script directory, unloading...`);
        this.clearJS(file);
        this.setDirty();
    }
    fileAdded(file) {
        if (!isFile(file))
            return;
        vLog(`File '${file.name}' added to script directory, loading...`);
        this.loadAndSet(file)
            .then(() => { this.setDirty(); }, () => this.clearJS(file));
    }
    fileRenamed(file, oldName) {
        if (!isFile(file))
            return;
        vLog(`Script file '${oldName}' renamed to '${file.name}', updating...`);
        this.clearJS(oldName);
        this.loadAndSet(file)
            .then(() => { this.setDirty(); }, () => { });
    }
    directoryChanged() {
        vLog(`Script directory changed, reloading scripts...`);
        this.reload().then(() => this.setDirty(), (e) => { console.warn(e); });
    }
    isInDomain(file) {
        return isInFolder(file, this.directory);
    }
}

const obsidianModule = require("obsidian");
const MODULE_NAME_INTEGRATIONS = 'int';
/* Handles all script function providers */
class ProviderBus {
    constructor(handler) {
        this.providers = new Map();
        this.providersPredicated = new Map();
        this.scopeStatic = {};
        // Indicates that a provider has been added or removed, and the static scope should be regenerated.
        this.isStaticScopeDirty = false;
        /**
         * Integration point for other plugins to add a provider
         * @param provider Provider implementation to add */
        this.addProvider = (provider) => {
            this.providers.set(provider.id, provider);
            this.isStaticScopeDirty = true;
            this.handler.recompileTemplates();
        };
        /**
         * Integration point for other plugins to add a predicated provider
         * @param provider ProviderPredicated implementation to add */
        this.addProviderPredicated = (provider) => {
            this.providersPredicated.set(provider.id, provider);
        };
        this.handler = handler;
        this.plugin = handler.plugin;
        this.scriptLoader = new ProviderScriptloader(this, 'js'); // assigned here so that we can register file events in handler
    }
    /* Construct all providers but do not initialize them yet, so that we can compile and cache templates ASAP */
    preInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.addTo(this.providers, this.scriptLoader);
            this.addTo(this.providersPredicated, new ProviderDataview(this, 'dv'));
            this.addTo(this.providersPredicated, new ProviderWeather(this, 'weather'));
            this.skBase = new ProviderSK(this, VAR_NAME);
            return Promise.resolve();
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const inits = Object.values(this.execOnProviders('init'));
            yield Promise.allSettled(inits);
            this.createStaticScope();
            return Promise.resolve();
        });
    }
    addTo(providers, provider) {
        providers.set(provider.id, provider);
    }
    unload() {
        this.execOnProviders('unload');
    }
    /* Invoked by providers to indicate their provision must be regenerated */
    providerNotificationDirty(provider, isDirty, ...data) {
        if (isDirty)
            this.refreshProvider(provider, ...data);
    }
    /* Regenerate the provision of a single provider, and pass data to its post function */
    refreshProvider(provider, ...data) {
        provider.setDirty(false);
        Object.assign(this.scopeStatic, { [provider.id]: provider.createObject() });
        provider.postDirty(...data);
    }
    /* Clean dirty providers by regenerating their provision */
    refreshProviders(...providers) {
        let proxy = {};
        for (let provider of providers) {
            proxy[provider.id] = provider.createObject();
            provider.setDirty(false);
        }
        Object.assign(this.scopeStatic, proxy);
        providers.forEach(provider => provider.postDirty());
    }
    /* Reloads all providers */
    reloadProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            let proms = this.execOnProviders('reload');
            return Promise.allSettled(Object.values(proms));
        });
    }
    getScopeKeys() {
        return [...this.providers.keys(), MODULE_NAME_INTEGRATIONS, 'moment', 'obsidian'];
    }
    /* Retrieves providers object */
    getScope(ctx, refresh) {
        let dirties = Object.values(this.providers).filter((p) => { return p.isDirty; });
        if (dirties)
            this.refreshProviders(...dirties);
        if (this.isStaticScopeDirty)
            this.createStaticScope();
        return Object.assign({}, this.scopeStatic, { [MODULE_NAME_INTEGRATIONS]: this.createPredicatedScope(ctx || null) });
    }
    /* Creates scope object. Should not be used to get the scope. */
    createStaticScope() {
        let spaces = {};
        for (let p of this.providers)
            spaces[p[0]] = p[1].createObject();
        spaces['moment'] = window.moment;
        spaces['obsidian'] = obsidianModule;
        this.scopeStatic = spaces;
        this.isStaticScopeDirty = false;
        return this.scopeStatic;
    }
    /* Predicated providers */
    createPredicatedScope(ctx) {
        let spaces = {};
        for (let p of this.providersPredicated) {
            Object.defineProperty(spaces, p[0], { get: function () {
                    if (p[1].predicateCheck())
                        return p[1].createObject();
                    else
                        throw new Error(p[1].predicateError());
                }
            });
        }
        return spaces;
    }
    /* Get the base provider scope */
    getScopeSK() {
        return this.skBase.createObject();
    }
    /* Invoke function on all providers and return array of results */
    execOnProviders(func) {
        let rets = {};
        const invoke = (providers) => {
            for (let p of providers)
                if ((p != null) && (isFunc(p[1][func]))) {
                    rets[p[0]] = p[1][func]();
                }
        };
        invoke(this.providers);
        invoke(this.providersPredicated);
        return rets;
    }
}

/* This is slightly modified from Eta */
class Cacher {
    constructor(cache) {
        this.cache = cache;
    }
    define(key, val) { this.cache[key] = val; }
    get(key) { return this.cache[key]; }
    remove(key) { delete this.cache[key]; }
    reset() { this.cache = {}; }
    load(cacheObj) { copyProps(this.cache, cacheObj); }
    has(key) {
        return !((this.cache[key] === null) || (this.cache[key] === undefined));
    }
}
function copyProps(toObj, fromObj) {
    for (const key in fromObj) {
        if (hasOwnProp(fromObj, key)) {
            toObj[key] = fromObj[key];
        }
    }
    return toObj;
}
function hasOwnProp(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* Responsible for the caching and management of templates. */
// TODO: add system to auto-reload skribis when relevant template cache changes 
class TemplateLoader {
    constructor(handler) {
        this.templateCache = new Cacher({});
        this.templateFailures = new Map();
        this.styleCache = new Cacher({});
        this.handler = handler;
        this.plugin = handler.plugin;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.initLoad();
        });
    }
    initLoad() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.definePartials(...getFiles(this.plugin.app, this.directory));
            this.plugin.app.workspace.trigger('skribi:template-init-complete');
            return Promise.resolve();
        });
    }
    /**
     * Reads passed files and attempts to cache them.
     * Handles templates and styles. Templates are compiled to functions. */
    definePartials(...files) {
        return __awaiter(this, void 0, void 0, function* () {
            const startTime = window.performance.now();
            var failureCount = 0;
            var successCount = 0;
            const scopeKeys = this.handler.bus.getScopeKeys();
            let styleFiles = [];
            let templateFiles = [];
            files.forEach(file => {
                switch (file.extension) {
                    case "md":
                        templateFiles.push(file);
                        break;
                    case "eta":
                        templateFiles.push(file);
                        break;
                    case "css":
                        styleFiles.push(file);
                        break;
                }
            });
            const readTemplates = templateFiles.map((file) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                let read = yield this.plugin.app.vault.cachedRead(file);
                let fileFrontmatter = null;
                if (file.extension == "eta") {
                    let fmSearch = (/^---\n*(?<frontmatter>.*?)\n*---/s).exec(read);
                    if (fmSearch.groups.frontmatter) {
                        try {
                            let yaml = obsidian.parseYaml(fmSearch.groups.frontmatter.trim());
                            fileFrontmatter = yaml;
                            read = read.substr(fmSearch[0].length);
                        }
                        catch (e) {
                            vWarn(`Error parsing frontmatter of ${file.name}, please report.`, EBAR, e);
                        }
                    }
                }
                else {
                    /* Markdown files can check for cached frontmatter which is maybe faster */
                    fileFrontmatter = (_a = this.plugin.app.metadataCache.getFileCache(file)) === null || _a === void 0 ? void 0 : _a.frontmatter;
                    if (fileFrontmatter) {
                        let fmSearch = (/(?<frontmatter>^---.*?(?=\n---)\n---)/s).exec(read);
                        let fmText = (_c = (_b = fmSearch === null || fmSearch === void 0 ? void 0 : fmSearch.groups) === null || _b === void 0 ? void 0 : _b.frontmatter) !== null && _c !== void 0 ? _c : null;
                        if (isExtant(fmText)) {
                            read = read.substr(fmText.length);
                        }
                    }
                }
                try {
                    let compiledString = compileToString(read, getConfig({ varName: VAR_NAME, name: file.basename }));
                    var compiled = compileWith(compiledString, [VAR_NAME, 'E', 'cb', ...scopeKeys], (read.contains('await')));
                }
                catch (err) {
                    this.templateFailures.set(file.basename, err || `Template failed to compile: Unknown Error`);
                    console.warn(`Skribi: template '${file.basename}' failed to compile`, EBAR, err, EBAR, read);
                    this.templateCache.remove(file.basename);
                    failureCount++;
                    return Promise.reject();
                }
                this.templateFailures.delete(file.basename);
                this.templateCache.define(file.basename, {
                    'source': read,
                    'function': compiled,
                    'frontmatter': fileFrontmatter ? withoutKey(fileFrontmatter, 'position') : null
                });
                successCount++;
                return Promise.resolve();
            }));
            const readStyles = styleFiles.map((file) => __awaiter(this, void 0, void 0, function* () {
                let read = yield this.plugin.app.vault.cachedRead(file);
                this.styleCache.define(file.basename, read);
            }));
            yield Promise.allSettled(readTemplates.concat(readStyles));
            if ((!this.plugin.initLoaded) && files.length) {
                let str = `${successCount} template${(successCount == 1) ? '' : 's'}`;
                if (failureCount)
                    str += `\n Of ${templateFiles.length} total templates, ${failureCount} failed to compile.`;
                console.log(`Skribi: Loaded ` + str);
            }
            else if (this.plugin.initLoaded) {
                /* Other than during init, definePartials is called on single files at a time.  */
                if (templateFiles.length > 0) {
                    Array.from(this.plugin.children).forEach((child) => {
                        child.templatesUpdated(templateFiles[0].basename);
                    });
                    vLog(`Updated template '${templateFiles[0].basename}' in ${roundTo(window.performance.now() - startTime, 4)}ms`);
                }
                if (styleFiles.length > 0) {
                    Array.from(this.plugin.children).forEach((child) => {
                        child.stylesUpdated(styleFiles[0].basename);
                    });
                    vLog(`Update style '${styleFiles[0].basename}'`);
                }
            }
            return Promise.resolve();
        });
    }
    /* Deletes cache entries by string name or file of origin */
    deletePartial(...items) {
        for (let item of items) {
            let name = isFile(item) ? item.basename : item;
            this.templateCache.remove(name);
        }
    }
    deletePartialByName(...items) {
        var _a, _b;
        for (let item of items) {
            let split = (/(?<name>[^]+)\.(?<extension>[^]+)$/g).exec(item);
            if (!((_b = (_a = Object.keys(split === null || split === void 0 ? void 0 : split.groups)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0 > 0)) {
                console.warn('Skribi: TemplateLoader.deletePartialByName() could not parse name \n', item);
                continue;
            }
            if (split.groups['extension'] == "css") {
                this.styleCache.remove(split.groups['name']);
                Array.from(this.plugin.children).forEach((child) => {
                    child.stylesUpdated(split.groups['name']);
                });
            }
            else {
                this.templateCache.remove(split.groups['name']);
                Array.from(this.plugin.children).forEach((child) => {
                    child.templatesUpdated(split.groups['name']);
                });
            }
        }
    }
    reload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.templateCache.reset();
            return this.definePartials(...getFiles(this.plugin.app, this.directory));
        });
    }
    /* FileMinder Functions */
    get directory() { return this.plugin.settings.templateFolder; }
    fileUpdated(file) {
        if (!isFile(file))
            return;
        vLog(`File '${file.name}' in template directory modified, updating...`);
        this.definePartials(file);
    }
    // fileDeleted(file: TAbstractFile | string): void { // never actually called as string I just wrote it to handle it for some reason
    //   let isf = isFile(file)
    //   if ((!isf && !(String.isString(file) && this.templateCache.get(file)))) return;
    //   vLog(`File '${isf ? (file as TFile).name : file}' removed from template directory, unloading...`)
    //   this.deletePartial(file as (TFile | string))
    // }
    fileDeleted(file) {
        if (!isFile(file))
            return;
        vLog(`File '${file.name}' removed from template directory, unloading...`);
        this.deletePartialByName(file.name);
    }
    fileAdded(file) {
        if (!isFile(file))
            return;
        vLog(`File '${file.name}' added to template directory, loading...`);
        this.definePartials(file);
    }
    fileRenamed(file, oldName) {
        if (!isFile(file))
            return;
        vLog(`Template file '${oldName}' renamed to '${file.name}', updating...`);
        this.deletePartialByName(oldName);
        this.definePartials(file);
    }
    directoryChanged() {
        vLog(`Template directory changed, reloading templates...`);
        this.reload();
    }
    isInDomain(file) {
        return isInFolder(file, this.directory);
    }
}

class EtaHandler {
    // get templateFrontmatters() {return this.loader.templateFrontmatters}
    constructor(plugin) {
        this.templatesDirty = false;
        this.plugin = plugin;
        this.bus = new ProviderBus(this);
        this.loader = new TemplateLoader(this);
        if (!this.plugin.app.workspace.layoutReady)
            this.plugin.app.workspace.onLayoutReady(() => this.init.bind(this)());
        else
            this.init();
    }
    get templates() { return this.loader.templateCache; }
    get failedTemplates() { return this.loader.templateFailures; }
    init() {
        this.initLoad().then(() => {
            this.registerFileEvents();
        }).catch((err) => {
            console.error(`Skribi: EtaHandler failed to initialize!`, EBAR, err);
        });
    }
    registerFileEvents() {
        /* Because the FileMinder index does not change, we don't need the event refs */
        const minders = [this.bus.scriptLoader, this.loader];
        for (let minder of minders) {
            this.plugin.registerEvent(this.plugin.app.vault.on('modify', file => {
                if (minder.isInDomain(file))
                    minder.fileUpdated(file);
            }));
            this.plugin.registerEvent(this.plugin.app.vault.on('delete', file => {
                if (minder.isInDomain(file))
                    minder.fileDeleted(file);
            }));
            this.plugin.registerEvent(this.plugin.app.vault.on('create', file => {
                if (minder.isInDomain(file))
                    minder.fileAdded(file);
            }));
            this.plugin.registerEvent(this.plugin.app.vault.on('rename', (file, oldPath) => {
                let ourDir = this.plugin.app.vault.getAbstractFileByPath(obsidian.normalizePath(minder.directory));
                let oldDir = this.plugin.app.vault.getAbstractFileByPath(obsidian.normalizePath((/.+\//g).exec(oldPath)[0]));
                if (file.parent == ourDir) {
                    // New location of file is in our directory
                    if (file.parent == oldDir) {
                        // File did not move but was renamed
                        minder.fileRenamed(file, (/([a-zA-Z0-9-_.]+\..*)/g).exec(oldPath)[0]);
                    }
                    else {
                        // File was moved from elsewhere into the template directory
                        minder.fileAdded(file);
                    }
                }
                else if (oldDir == ourDir) {
                    // File used to be in templates directory and is no longer
                    minder.fileDeleted(file);
                }
            }));
        }
    }
    initLoad() {
        return __awaiter(this, void 0, void 0, function* () {
            let { a: a, b: b } = yield this.bus.preInit().then(() => {
                return { a: this.bus.init(), b: this.loader.init() };
            });
            return Promise.all([a, b]);
        });
    }
    unload() {
        this.bus.unload();
    }
    recompileTemplates() {
        // If the bus scope changes, the templates must be recompiled. 
        // The bus scope should not change post-init unless an external source modifies the provider list.
        this.loader.reload();
    }
    getPartial(id) {
        return this.loader.templateCache.get(id);
    }
    hasPartial(id) {
        return isExtant(this.loader.templateCache.get(id));
    }
    getCacheKeys() {
        //@ts-ignore
        return Object.keys(this.templates.cache);
    }
    /**
    * Primary skribi render function. Renders asynchronously (TemplateFunction may or may not be async)
    * @param content String or scoped template function to render
    * @param ctxIn Context object to be added to `sk` object
    * @param file File in which the skribi is being rendered
    * @returns [rendered string, returned packet (currently unused)] */
    renderAsync(content, ctxIn, file) {
        return __awaiter(this, void 0, void 0, function* () {
            /* Used to pass data up to the render process from the skribi function */
            let packet = {};
            function up() {
                return function (x, y) {
                    packet[x] = y;
                };
            }
            let cfg = getConfig({ varName: VAR_NAME });
            /* the 'this' object of the sk context*/
            let binder = {};
            /* The 'sk' object */
            let sk = Object.assign({}, ctxIn || {}, {
                this: binder,
                getEnv: getEnv,
                up: up(),
                ctx: {
                    file: file || null,
                    plugin: this.plugin,
                    app: this.plugin.app
                }
            }, this.bus.getScopeSK());
            /* Scope to pass to the function. Must contain all keys that function was compiled with. */
            let scope = Object.assign({ 'sk': sk, 'E': cfg, 'cb': null }, this.bus.getScope());
            function getEnv() {
                return scope;
            }
            let ren = (content.toString().contains('await')) // This will catch strings containing await as well, maybe a flag should be used instead
                ? renderEtaAsync(this, content, {}, cfg, null, scope, binder)
                : renderEta(this, content, {}, cfg, null, scope, binder);
            if (ren instanceof Promise) {
                return yield ren.then((r) => { return Promise.resolve([r, packet]); }, (r) => { return Promise.reject(r); });
            }
            else if (String.isString(ren)) {
                return Promise.resolve([ren, packet]);
            }
            else
                return Promise.reject("EtaHandler.renderAsync: Unknown Error");
        });
    }
    /* this is somehow 1.3x slower than renderAsync */
    renderAsyncNaive(content, ctxIn, varName) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Skribos: renderAsyncNaive invoked', content, ctxIn);
            let context = Object.assign({}, ctxIn || {});
            let ren = renderAsync(content, context, { varName: varName !== null && varName !== void 0 ? varName : VAR_NAME });
            if (ren instanceof Promise) {
                return yield ren.then((r) => { return Promise.resolve(r); }, (r) => { return Promise.reject(r); });
            }
            else if (String.isString(ren)) {
                return Promise.resolve(ren);
            }
            else
                return Promise.reject("Unknown error");
        });
    }
    render(content, ctxIn) {
        let context = ctxIn || {};
        content = render(content, context, {
            varName: VAR_NAME
        });
        return content;
    }
    /** TemplateFunction handler, will return cached or compiled function, appropriately bound and scoped
     * @param template String or scoped template function
     * @param options EtaConfig
     * @param scope Object containing objects that should be available in the returned function's scope
     * @param binder Object to which the returned function will be bound */
    getCached(template, options, scope, binder) {
        if (options.name && this.templates.get(options.name)) {
            return (binder) ? this.templates.get(options.name).function.bind(binder) : this.templates.get(options.name);
        }
        const templateFunc = typeof template === 'function' ? template : compileWith(compileToString(template, options), Object.keys(scope), options.async);
        if (options.name)
            this.templates.define(options.name, { source: (String.isString(template) ? template : null), function: templateFunc });
        return (binder) ? templateFunc.bind(binder) : templateFunc;
    }
}

var test$1 = "test";
var documentation = "Documentation";
var en = {
	test: test$1,
	documentation: documentation,
	"command.insert": "Insert Skribi",
	"command.reloadScripts": "Reload Scripts",
	"command.perfTest": "Test Performance",
	"regent.loading.hover": "Evaluating...",
	"regent.stasis.hover": "Recursion limit reached!",
	"regent.self.hover": "Self Render Prohibited",
	"setting.title": "Skribi Settings",
	"setting.templateDirectory.name": "Template Directory",
	"setting.templateDirectory.desc": "Skribi will look for templates in this folder.",
	"setting.scriptDirectory.name": "Skript Directory",
	"setting.scriptDirectory.desc": "Skribi will look for JS files in this folder.",
	"setting.errorLog.name": "Error Logging",
	"setting.errorLog.desc": "Enable to dump any errored renders to the console. If false, will still add the error as tooltip on the errored element. \n Will spam your console if typing into a skribi with a preview window open.",
	"setting.verbose.name": "Verbose Logging",
	"setting.verbose.desc": "Enable to get more detailed logs in the console.",
	"setting.autoReload.name": "Auto Reload",
	"setting.autoReload.desc": "Enable to automatically reload rendered skribis when scripts or relevant templates are updated.",
	"setting.templateSuggest.name": "Template Suggestions",
	"setting.templateSuggest.desc": "Displays a suggestion popover when invoking a template that prompts with template names and value keys.",
	"modal.insert.title": "Insert Skribi Template",
	"modal.insert.append": "Append",
	"modal.insert.insert": "Insert",
	"modal.confirm.title": "Please Confirm",
	"modal.confirm.confirm": "Confirm",
	"modal.confirm.cancel": "Cancel",
	"modal.external.title": "Open External Link?",
	"modal.external.desc": "Will open the following address with default program:",
	"modal.external.label": "Open Link",
	"modal.perf.title": "Skribi Performance Test",
	"modal.perf.textToEvaluate.name": "Text To Evaluate",
	"modal.perf.textToEvaluate.desc": "Text is evaluated as the contents of a code span.",
	"modal.perf.textToEvaluate.placeholder": "{~ console.log('Hello World'); }",
	"modal.perf.evalIterations.name": "Evaluation Iterations",
	"modal.perf.evalIterations.desc": "How many times should the text be evaluated?",
	"modal.perf.evalBlocks": "Eval As Individual Blocks?",
	"modal.perf.evaluate": "Evaluate",
	"modal.perf.evaluating": "Evaluating...",
	"modal.perf.results": "Average fulfillment time",
	"modal.perf.resultsBlockCount.single": "%0 block",
	"modal.perf.resultsBlockCount.plural": "%0 blocks",
	"modal.perf.autofill.selection": "Selection",
	"modal.perf.autofill.clipboard": "Clipboard"
};

var test = "test but in a british accent";
var en_gb = {
	test: test
};

const locales = {
    en: en,
    'en-gb': en_gb
};
function make() {
    let out = {
        '_': t
    };
    for (let key of Object.keys(en)) {
        if (String.isString(en[key])) {
            Object.defineProperty(out, key, {
                get: function () {
                    var _a, _b;
                    return (_b = (_a = locale()) === null || _a === void 0 ? void 0 : _a[key]) !== null && _b !== void 0 ? _b : en[key];
                }
            });
        }
    }
    vLog('Locale definitions constructed');
    return out;
}
function locale() { return locales === null || locales === void 0 ? void 0 : locales[window.moment.locale()]; }
/* Pull localized strings from this. */
const l = make();
/**
 * You can pull strings from this.
 * Pro: safely handles undefined keys
 * Contra: you won't get the property definition tooltips in VSC, which was the whole point of this design
 * @param key Lang file string key to return local version of
 * @param args Strings to insert into insertion tags (eg '%0')
 * @returns Localized string */
function t(key, ...args) {
    var _a, _b;
    if (!isExtant(en[key]))
        vWarn(`Babel received undefined key: ${key}`);
    let str = (_b = (_a = l[key]) !== null && _a !== void 0 ? _a : en[key]) !== null && _b !== void 0 ? _b : `$${key}`;
    return str.replace((/%(\d+)/g), (t, n) => (void 0 !== args[n] ? args[n] : t));
}

class confirmationModal extends obsidian.Modal {
    constructor(app, fieldsIn) {
        super(app);
        this.fields = {
            title: l["modal.confirm.title"],
            labelPos: l["modal.confirm.confirm"],
            labelNeg: l["modal.confirm.cancel"],
        };
        Object.assign(this.fields, fieldsIn || {});
    }
    onOpen() {
        this.titleEl.setText(this.fields.title);
        this.containerEl.addClazz(kls('confirmation-modal'), this.fields.class);
        if (this.fields.desc)
            this.contentEl.createDiv({ cls: kls('confirmation-modal-description'), text: this.fields.desc });
        this.contentEl.append(...this.fields.elements);
        let c = this.contentEl.createDiv({ cls: kls('confirm-modal-buttons') });
        c.createEl("button", { text: this.fields.labelPos, cls: kls('modal-button-confirm') }, (b) => {
            b.onClickEvent(() => {
                this.resolve("true");
                this.close();
            });
        });
        c.createEl("button", { text: this.fields.labelNeg, cls: kls('modal-button-cancel') }, (b) => {
            b.onClickEvent(() => {
                this.resolve("false");
                this.close();
            });
        });
    }
    openAndGetValue(resolve, reject) {
        return __awaiter(this, void 0, void 0, function* () {
            this.resolve = resolve;
            this.reject = reject;
            this.open();
        });
    }
}
function makeExternalLink(linkIn) {
    const link = String.isString(linkIn) ? createEl('a', { attr: { href: linkIn } }) : linkIn;
    link.addEventListener('click', (ev) => {
        ev.preventDefault();
        let p = new confirmationModal(window.app, {
            title: l["modal.external.title"],
            desc: l["modal.external.desc"],
            labelPos: l["modal.external.label"],
            elements: [createDiv({ cls: kls('confirmation-modal-link'), text: link.getAttr('href') })]
        });
        new Promise((resolve, reject) => p.openAndGetValue(resolve, reject))
            .then(res => {
            if (res === "true") {
                window.open(link.getAttr('href'));
            }
        });
    });
    return link;
}

class SkribosSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.saveSetting = obsidian.debounce((setting, value, cb, ...args) => __awaiter(this, void 0, void 0, function* () {
            // console.log("saving: " + setting + " = " + value)
            this.plugin.settings[setting] = value;
            this.plugin.saveSettings().then(() => { if (isExtant(cb) && isFunc(cb))
                cb(...args || null); });
        }), 2000, true);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.addClass("skribi-settings");
        containerEl.empty();
        containerEl.createEl('h2', { text: l["setting.title"] });
        let desc = containerEl.createDiv({ cls: 'skribi-modal-desc', attr: { style: "margin-bottom: 1em;" } });
        makeExternalLink(desc.createEl('a', { text: l['documentation'], attr: { 'href': linkDocs('settings') } }));
        new obsidian.Setting(containerEl)
            .setName(l["setting.templateDirectory.name"])
            .setDesc(l["setting.templateDirectory.desc"])
            .addTextArea((text) => {
            text
                .setValue(this.plugin.settings.templateFolder)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.templateFolder = value;
                yield this.plugin.saveSettings();
            }));
            text.inputEl.cols = 30;
            return text;
        });
        new obsidian.Setting(containerEl)
            .setName(l["setting.scriptDirectory.name"])
            .setDesc(l["setting.scriptDirectory.desc"])
            .addTextArea((text) => {
            text
                .setValue(this.plugin.settings.scriptFolder)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.saveSetting('scriptFolder', value, () => this.plugin.eta.bus.scriptLoader.directoryChanged());
            }));
            text.inputEl.cols = 30;
            return text;
        });
        this.makeToggle(containerEl, "autoReload", l["setting.autoReload.name"], l["setting.autoReload.desc"]);
        this.makeToggle(containerEl, "errorLogging", l["setting.errorLog.name"], l["setting.errorLog.desc"]);
        this.makeToggle(containerEl, "verboseLogging", l["setting.verbose.name"], l["setting.verbose.desc"]);
        this.makeToggle(containerEl, "templateSuggest", l["setting.templateSuggest.name"], l["setting.templateSuggest.desc"]);
        // this.makeToggle(containerEl, "shadowMode", "Shadow Mode", "Embed skribis in a shadow root", () => invokeMethodOf<SkribiChild>("rerender", ...this.plugin.children)) // hidden for now (this kills the skribichild)
    }
    makeToggle(el, setting, name, desc, cb) {
        return new obsidian.Setting(el)
            .setName(name)
            .setDesc(desc)
            .addToggle((toggle) => {
            toggle
                .setValue(!!this.plugin.settings[setting])
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings[setting] = value;
                yield this.plugin.saveSettings();
                if (cb)
                    cb(value);
            }));
        });
    }
}
const DEFAULT_SETTINGS = {
    templateFolder: "",
    scriptFolder: "",
    verboseLogging: false,
    devLogging: false,
    errorLogging: false,
    autoReload: true,
    templateSuggest: true,
    reflectStyleTagText: true,
    shadowMode: false,
};

function renderError(el, e) {
    return __awaiter(this, void 0, void 0, function* () {
        if ((e === null || e === void 0 ? void 0 : e.flag) && e.flag == "abort") {
            return renderRegent(el, Object.assign({}, {
                class: 'abort',
                label: 'sk',
                hover: 'Render Aborted'
            }, e));
        }
        else {
            return renderRegent(el, { class: 'error', label: 'sk', hover: (e === null || e === void 0 ? void 0 : e.msg) || "Unknown Error", clear: true });
        }
    });
}
function renderState(el, dataIn) {
    return __awaiter(this, void 0, void 0, function* () {
        let data = Object.assign({
            class: "state",
            label: "sk",
            clear: false,
            hover: ""
        }, dataIn || {});
        el.className = `skribi-regent ${data.class}`;
        el.setAttribute("title", data.hover);
    });
}
function createRegent(dataIn) {
    let data = Object.assign({
        class: "generic",
        label: "sk",
        clear: false,
        hover: ""
    }, dataIn || {});
    const pre = createEl("code", { cls: `skribi-regent ${data.class}`, text: data.label });
    pre.setAttribute("title", data.hover);
    return [pre, data];
}
function renderRegent(el, dataIn) {
    let [pre, data] = createRegent(dataIn);
    if (data.clear)
        el.className = "";
    el.replaceWith(pre);
    return pre;
}

const extImg = ["bmp", "png", "jpg", "jpeg", "gif", "svg"];
const extAud = ["mp3", "wav", "m4a", "3gp", "flac", "ogg", "oga"];
const extVid = ["mp4", "webm", "ogv"];
const extTxt = ["md"];
/* Repairs media embeds that have been rendered to markdown */
function embedMedia(el, srcPath, plugin, depth, self) {
    return __awaiter(this, void 0, void 0, function* () {
        dLog("embed self:", self);
        dLog("embed:", el);
        var proms = [];
        const catches = el.querySelectorAll("span.internal-embed");
        let elDepth = el.getAttribute("depth");
        let d = (isExtant(elDepth) ? parseInt(elDepth) : isExtant(depth) ? depth : 0);
        dLog("embedder depth:", d);
        for (let fish of Array.from(catches)) {
            if (fish.hasClass("is-loaded"))
                continue;
            let src = obsidian.normalizePath(fish.getAttribute("src"));
            let dest = plugin.app.metadataCache.getFirstLinkpathDest(src, srcPath);
            if (dest) {
                let path = plugin.app.vault.adapter.getResourcePath(dest.path);
                let ext = dest.extension;
                if (extImg.contains(ext)) { // Embed Image
                    fish.addClass("image-embed");
                    fish.childNodes.forEach((n) => { fish.removeChild(n); });
                    let nel = fish.createEl("img");
                    nel.setAttribute("src", path);
                }
                else if (extAud.contains(ext)) { // Embed Audio
                    fish.addClass("media-embed");
                    fish.childNodes.forEach((n) => { fish.removeChild(n); });
                    let nel = fish.createEl("audio", { "attr": { "controls": true } });
                    nel.setAttribute("src", path);
                }
                else if (extVid.contains(ext)) { // Embed Video
                    fish.childNodes.forEach((n) => { fish.removeChild(n); });
                    let vidiv = fish.createEl("video", { "attr": { "controls": true } });
                    vidiv.setAttribute("src", path);
                }
                else if (extTxt.contains(ext)) {
                    /* Embed Transclusion */
                    const createEmbedPromise = () => {
                        return new Promise(() => __awaiter(this, void 0, void 0, function* () {
                            dLog("new embed prom");
                            fish.childNodes.forEach((n) => { fish.removeChild(n); });
                            let cache = plugin.app.metadataCache.getCache(dest.path);
                            let read = yield plugin.app.vault.cachedRead(dest);
                            let classes = obsidian.parseFrontMatterStringArray(cache === null || cache === void 0 ? void 0 : cache.frontmatter, "cssclass");
                            let div = fish.createDiv({ cls: "markdown-embed" });
                            div.createDiv({ cls: "markdown-embed-title", text: dest.basename });
                            let content = div.createDiv({ cls: "markdown-embed-content" });
                            let link = div.createDiv({ cls: "markdown-embed-link" });
                            obsidian.setIcon(link, "link");
                            link.onClickEvent((e) => {
                                e.preventDefault();
                                plugin.app.workspace.openLinkText(src, srcPath);
                            });
                            let pv = content.createDiv({ cls: "markdown-preview-view" });
                            pv.addClazz(classes);
                            let ps = pv.createDiv({ cls: "markdown-preview-sizer markdown-preview-section" });
                            let mkh = createDiv({ attr: { "depth": depth.toString() } });
                            yield obsidian.MarkdownRenderer.renderMarkdown(read, mkh, srcPath, null);
                            const mke = (Array.from((mkh === null || mkh === void 0 ? void 0 : mkh.childNodes) || []).map((n) => {
                                // if (n.childNodes.length > 0) { let d = createDiv(); d.append(n.cloneNode(true)); return d;} else return n;}));
                                if (n.childNodes.length > 0) {
                                    let d = createDiv();
                                    d.append(n);
                                    return d;
                                }
                                else
                                    return n;
                            }));
                            ps.append(...mke); //ps.setAttribute("depth", d.toString())
                            return embedMedia(ps, srcPath, plugin, d - 1, true);
                        }));
                    };
                    if (d <= 0) {
                        let [l] = createRegent({ class: "depth-limit", hover: "It goes on forever..." });
                        fish.replaceWith(l);
                        dLog("embedder hit limit");
                    }
                    else {
                        proms.push(createEmbedPromise());
                    }
                }
            }
        }
        return Promise.allSettled(proms).then(values => {
            dLog("embedder done", proms);
            return Promise.resolve(proms.length);
        });
    });
}

/* Check if code block is that good good and if so what type of good good */
function preparseSkribi(el, str, flg) {
    return __awaiter(this, void 0, void 0, function* () {
        let text = isExtant(str) ? str : el.textContent;
        if (text.length < 3)
            return;
        let e = text.substr(text.length - 2);
        let s = text.substr(0, 2);
        if (s.startsWith("{") && e.endsWith("}")) {
            let f = s[1];
            let flag = (f == ":") ? 1 : (f == "=") ? 2 : (f == "~") ? 3 : (f == "{") ? 4 : (f == ".") ? 5 : -1;
            if ((flag > 0) && (flag != 4 || (e == "}}"))) {
                return { flag: flag, text: text.substring(2, text.length - (flag == 4 ? 2 : 1)) };
            }
            else
                return;
        }
        else
            return;
    });
}
/* Parse variables in template invocations */
function parseSkribi(src) {
    return __awaiter(this, void 0, void 0, function* () {
        let sa = src.split(/(?<![\\])\|/);
        let id = sa.splice(0, 1)[0].trim();
        let args = {};
        for (let seg of sa) {
            let si = seg.indexOf(":");
            if (si == -1)
                continue;
            args[seg.slice(0, si).trim()] = seg.slice(si + 1).trim();
        }
        return { id: id, args: { v: args } };
    });
}

/*
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * Modified from https://github.com/samthor/scoped (polyfill for deprecated HTML feature scoped styles)
 */
/** Prefixes all CSS selectors in a selector text string with prefix prefix */
function prefixSelectors(selectorText, prefix) {
    const found = [];
    while (selectorText) {
        const consumed = consumeSelector(selectorText, prefix);
        if (consumed === null) {
            return ':not(*)';
        }
        found.push(consumed.selector);
        selectorText = consumed.rest;
    }
    return found.join(', ');
}
// This monstrosity matches any valid `[foo="bar"]` block, with either quote style. Parenthesis
// have no special meaning within an attribute selector, and the complex regexp below mostly
// exists to allow \" or \' in string parts (e.g. `[foo="b\"ar"]`).
const attrRe = /^\[.*?(?:(["'])(?:.|\\\1)*\1.*)*\]/;
const walkSelectorRe = /([([,]|:scope\b)/; // "interesting" setups
const scopeRe = /^:scope\b/;
/**
 * Consumes a single selector from candidate selector text, which may contain many. */
function consumeSelector(raw, prefix) {
    let i = raw.search(walkSelectorRe);
    if (i === -1) {
        return { selector: `${prefix} ${raw}`, rest: '' };
    }
    else if (raw[i] === ',') {
        return { selector: `${prefix} ${raw.substr(0, i)}`, rest: raw.substr(i + 1) };
    }
    let leftmost = true; // whether we're past a descendant or similar selector
    let scope = false; // whether :scope has been found + replaced
    i = raw.search(/\S/); // place i after initial whitespace only
    let depth = 0;
    outer: for (; i < raw.length; ++i) {
        const char = raw[i];
        switch (char) {
            case '[':
                const match = attrRe.exec(raw.substr(i));
                i += (match ? match[0].length : 1) - 1; // we add 1 every loop
                continue;
            case '(':
                ++depth;
                continue;
            case ':':
                if (!leftmost) {
                    continue; // doesn't matter if :scope is here, it'll always be ignored
                }
                else if (!scopeRe.test(raw.substr(i))) {
                    continue; // not ':scope', ignore
                }
                else if (depth) {
                    return null;
                }
                // Replace ':scope' with our prefix. This can happen many times; ':scope:scope' is valid.
                // It will never apply to a descendant selector (e.g., ".foo :scope") as this is ignored
                // by browsers anyway (invalid).
                raw = raw.substring(0, i) + prefix + raw.substr(i + 6);
                i += prefix.length;
                scope = true;
                --i; // we'd skip over next character otherwise
                continue; // run loop again
            case ')':
                if (depth) {
                    --depth;
                }
                continue;
        }
        if (depth) {
            continue;
        }
        switch (char) {
            case ',':
                break outer;
            case ' ':
            case '>':
            case '~':
            case '+':
                if (!leftmost) {
                    continue;
                }
                leftmost = false;
        }
    }
    const selector = (scope ? '' : `${prefix} `) + raw.substr(0, i);
    return { selector, rest: raw.substr(i + 1) };
}

class SkribiProcessor {
    constructor(plugin) {
        this.queuedTemplates = [];
        this.plugin = plugin;
        this.eta = plugin.eta;
    }
    /**
     * Register our markdown processors. */
    registerProcessors() {
        const processCodeSpan = (el, ctx) => __awaiter(this, void 0, void 0, function* () { this.processEntry({ srcType: "GENERAL" /* general */ }, el, ctx); });
        this.plugin.registerMarkdownPostProcessor((el, ctx) => processCodeSpan(el, ctx));
        const processCodeBlock = (mode, str, el, ctx) => __awaiter(this, void 0, void 0, function* () { this.processEntry(mode, el, ctx, null, null, str.trimEnd()); });
        ([["normal", "", 0 /* none */], ["raw", "-raw", 3 /* raw */], ["literal", "-lit", 4 /* literal */], ["interpolate", "-int", 2 /* interp */], ["evaluate", "-eval", 5 /* eval */]])
            .forEach((v) => {
            this.plugin.registerMarkdownCodeBlockProcessor(`skribi${v[1]}`, processCodeBlock.bind(this, { srcType: "BLOCK" /* block */, flag: v[2] }));
            this.plugin.registerMarkdownCodeBlockProcessor(`sk${v[1]}`, processCodeBlock.bind(this, { srcType: "BLOCK" /* block */, flag: v[2] }));
        });
    }
    /** Entry to the Skribi process chain. Called:
     * - By MarkdownView on each block of a markdown preview
     * - By MarkdownView on code blocks of our register language types
     * - By renderSkribi to recurse nested skribis */
    processEntry(mode, // 0: codespan; 1: codeblock;
    doc, ctx, depth, self, srcIn) {
        return __awaiter(this, void 0, void 0, function* () {
            let nestExtant = isExtant(ctx.remainingNestLevel);
            let nestLevel = nestExtant ? ctx.remainingNestLevel : null;
            /* nestExtant means that we are inside of a natural transclusion */
            self = isExtant(self);
            depth = self ? depth : null;
            /* self means that we have been called by renderSkribi, to look for codeblocks */
            let elHasDepth = isExtant(doc.getAttribute("depth"));
            let elElHasDepth = isExtant(ctx.el.getAttribute("depth"));
            let elDepth = elHasDepth ? parseInt(doc.getAttribute("depth")) : elElHasDepth ? parseInt(ctx.el.getAttribute("depth")) : null;
            /* Used for passing depth to virtual elements (we may be in one even as we speak...)*/
            /* determine our depth condition type */
            let d = self ? depth : (elHasDepth || elElHasDepth) ? elDepth : nestExtant ? nestLevel : 0;
            if (!nestExtant && !(elHasDepth || elElHasDepth))
                dLog("processor sees no depth");
            if (elHasDepth) {
                dLog("elDepth", elDepth, "doc", doc, "el", ctx.el, "conEl", ctx.containerEl);
            }
            else {
                dLog("processor: ", "doc", doc, "el", ctx.el, "conEl", ctx.containerEl, "nest", ctx.remainingNestLevel);
            }
            /* Dispatch render promises */
            var proms = [];
            var temps = 0;
            const elCodes = (mode.srcType == "BLOCK" /* block */) ? [doc] : doc.querySelectorAll("code");
            if (!(d <= 0)) {
                window.performance.now();
                const elProms = Array.from(elCodes).map((el) => __awaiter(this, void 0, void 0, function* () {
                    let t = window.performance.now();
                    dLog("start:", t);
                    let src = (isExtant(mode.flag) && mode.flag != 0 /* none */) ?
                        { text: srcIn || doc.textContent, flag: mode.flag } : yield preparseSkribi(el);
                    let originalText = (mode.srcType == "BLOCK" /* block */) ? srcIn : el.textContent;
                    try {
                        if (src != null) {
                            let skCtx = { time: window.performance.now(), depth: d, flag: src.flag, source: originalText };
                            let nel = renderRegent(el, { class: 'sk-loading', hover: l['regent.loading.hover'] });
                            if (src.flag == 1) {
                                proms.push(this.awaitTemplatesLoaded({ el: nel, src: src.text, mdCtx: ctx, skCtx: skCtx })
                                    .catch(e => { console.warn(`Skribi: Dispatch Errored (Template)`, EBAR, e); }));
                                temps++;
                            }
                            else {
                                proms.push(this.processSkribi(nel, src.text, ctx, skCtx)
                                    .catch(e => { console.warn(`Skribi: Dispatch Errored`, EBAR, e); }));
                            }
                        }
                    }
                    catch (e) {
                        if (!e.flags.noRender) {
                            renderError(el, e);
                        }
                    }
                    return Promise.resolve();
                }));
                //TODO: Rewrite the logging logic for the new template queue
                yield Promise.allSettled(elProms);
                if (proms.length > 0) ;
                return proms;
            }
            else {
                /* Depth too high! */
                elCodes.forEach((el) => __awaiter(this, void 0, void 0, function* () {
                    preparseSkribi(el).then((src) => __awaiter(this, void 0, void 0, function* () {
                        if (src != null)
                            renderState(el, { hover: l['regent.stasis.hover'], class: 'stasis' });
                    }));
                }));
                dLog("processor hit limit");
                return Promise.resolve(null); // Postprocessor calls are not caught so we can't reject neatly.
            }
        });
    }
    /** Queues templates to process on initial template load completion, or processes them immediately if ready. */
    awaitTemplatesLoaded(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let el = renderRegent(args.el, { class: 'wait', label: 'sk', hover: 'Awaiting Template Cache', clear: true });
            return (this.plugin.initLoaded)
                ? yield this.processSkribiTemplate(el, args.src, args.mdCtx, args.skCtx)
                : new Promise((resolve, reject) => {
                    let activate = (ele, time) => {
                        resolve(this.processSkribiTemplate(ele, args.src, args.mdCtx, Object.assign(args.skCtx, { time: time })));
                    };
                    this.queuedTemplates.push({ function: activate, element: el });
                });
        });
    }
    /** Called on template init load complete. Fires off all of the queued templates. */
    templatesReady() {
        let proms = this.queuedTemplates.map((queued) => {
            let el = renderRegent(queued.element, { class: 'sk-loading', hover: l['regent.loading.hover'] });
            return queued.function(el, window.performance.now());
        });
        Promise.allSettled(proms).then(() => { this.queuedTemplates = []; });
    }
    /** Parse variables and prep the template */
    processSkribiTemplate(el, src, mdCtx, skCtx) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            let parsed = null;
            try {
                parsed = yield parseSkribi(src);
            }
            catch (e) {
                renderError(el, e);
                return Promise.reject('Parsing Error');
            }
            /* Abort if being rendered in its own definition */
            if (this.plugin.app.metadataCache.getFirstLinkpathDest("", mdCtx.sourcePath).basename == parsed.id) {
                renderRegent(el, { class: 'self', hover: l['regent.stasis.hover'] });
                return Promise.reject('Within Self Definition');
            }
            let template = (_a = this.eta.getPartial(parsed.id)) === null || _a === void 0 ? void 0 : _a.function;
            if (!isExtant(template)) {
                if (this.eta.failedTemplates.has(parsed.id)) {
                    el = yield renderError(el, { msg: `Template ${parsed.id} exists but failed to compile, with error:` + EBAR + this.eta.failedTemplates.get(parsed.id) });
                }
                else {
                    el = yield renderError(el, { msg: `SkribiError: Cannot read undefined template '${parsed.id}' (no such template exists)` });
                }
                /* We intentionally attempt to render the template even though we know it doesn't exist,
                because it will be caught and converted into a ghost listener. */
            }
            return this.renderSkribi(el, template, parsed.id, mdCtx, Object.assign({}, skCtx, { ctx: parsed.args }));
        });
    }
    /** Wrap non-template skribis in tags as determined by their type flag */
    processSkribi(el, src, mdCtx, skCtx) {
        return __awaiter(this, void 0, void 0, function* () {
            const prep = function (str, flag) {
                switch (flag) {
                    case 2: return `<%=${src}%>`;
                    case 3: return `<%~${src}%>`;
                    case 4: return str;
                    case 5: return `<%${src}%>`;
                }
            };
            return this.renderSkribi(el, prep(src, skCtx.flag), "literal", mdCtx, skCtx);
        });
    }
    /** Main skribi rendering function */
    renderSkribi(el, con, id, mdCtx, skCtx) {
        return __awaiter(this, void 0, void 0, function* () {
            let handled = false;
            let file = this.plugin.app.metadataCache.getFirstLinkpathDest("", mdCtx.sourcePath);
            let newElement = createDiv({ cls: "skribi-render-virtual" });
            let child = new SkribiChild(this.plugin, newElement);
            Object.assign(child, {
                /* We assign rerender here for the closure */
                rerender: ((templateToRetrieve) => {
                    var _a;
                    let nskCtx = Object.assign({}, skCtx, { time: window.performance.now() });
                    if (skCtx.flag == 1 && isExtant(templateToRetrieve)) {
                        let template = (_a = this.eta.getPartial(templateToRetrieve)) === null || _a === void 0 ? void 0 : _a.function;
                        child.unload();
                        this.renderSkribi(newElement, template, templateToRetrieve, mdCtx, nskCtx);
                    }
                    else {
                        child.unload();
                        this.renderSkribi(newElement, con, id, mdCtx, nskCtx);
                    }
                }).bind(this),
                templateKey: (skCtx.flag == 1) ? id : null,
                source: skCtx.source
            });
            let ctx = Object.assign({}, (skCtx === null || skCtx === void 0 ? void 0 : skCtx.ctx) || {}, { child: child.provideContext() });
            let [rendered, packet] = yield this.eta.renderAsync(con, ctx, file)
                .catch((err) => {
                /* If a template skribi's template does not exist (intentionally not caught until this point) */
                if (con === undefined && !this.eta.hasPartial(id)) {
                    con = skCtx.source;
                    err = `SkribiError: Cannot read undefined template '${id}'\n`;
                    let info = mdCtx.getSectionInfo(mdCtx.el);
                    if (info)
                        err += `   at (MarkdownSectionInfo) lineStart: ${info.lineStart}, lineEnd: ${info.lineEnd} (zero-indexed)`;
                }
                if (this.plugin.settings.errorLogging) {
                    console.warn(`Skribi render threw error! Displaying content and error...`, EBAR, con, EBAR, err);
                }
                renderError(el, (err === null || err === void 0 ? void 0 : err.hasData) ? err : { msg: (err === null || err === void 0 ? void 0 : err.msg) || err || "Render Error" }).then(errEl => {
                    /* Alter the child so that it may yet live (and listen for source updates) */
                    Object.assign(child, {
                        containerEl: errEl,
                        state: "error",
                        rerender: ((templateToRetrieve) => {
                            let nskCtx = Object.assign({}, skCtx, { time: window.performance.now() });
                            if (skCtx.flag == 1 && isExtant(templateToRetrieve)) {
                                let template = this.eta.getPartial(templateToRetrieve).function;
                                child.unload();
                                this.renderSkribi(errEl, template, templateToRetrieve, mdCtx, nskCtx);
                            }
                            else {
                                child.unload();
                                this.renderSkribi(errEl, con, id, mdCtx, nskCtx);
                            }
                        }).bind(this),
                    });
                    mdCtx.addChild(child);
                    this.plugin.children.push(child);
                });
                handled = true;
                return Promise.resolve([null, null]);
            });
            /* RENDERING */
            dLog("renderSkribi:", el, mdCtx, skCtx, id);
            if (isExtant(rendered)) {
                let d = isExtant(mdCtx.remainingNestLevel) ? mdCtx.remainingNestLevel : (skCtx.depth);
                let style = stripStyleFromString(rendered); // renderMarkdown ignores style nodes so we'll just yoink em 
                if (style[1]) {
                    rendered = style[0];
                }
                let render = ((packet === null || packet === void 0 ? void 0 : packet['noMarkdown'])
                    ? this.simpleRender(rendered, newElement)
                    : obsidian.MarkdownRenderer.renderMarkdown(rendered, newElement, mdCtx.sourcePath, null))
                    .then(() => {
                    /* this bit disabled because it kills other skribis rendering in the same block */
                    // if (el?.parentElement?.nodeName == "P") { // true when (mode == Mode.block)
                    // el.parentElement.replaceWith(el) // strip the superfluous P element
                    // }
                    newElement.setAttribute("skribi", (skCtx.flag == 1) ? 'template' : id);
                    if (skCtx.flag == 1) {
                        newElement.setAttribute("skribi-template", id);
                    }
                    newElement.removeClass("skribi-render-virtual");
                    if (!newElement.getAttr("class")) {
                        newElement.removeAttribute("class");
                    }
                    let shade;
                    if (this.plugin.settings.shadowMode) {
                        /* it seems that non-codeblock skribis do not survive this process */
                        let nel = createDiv();
                        el === null || el === void 0 ? void 0 : el.parentElement.prepend(nel);
                        nel.setAttr('skribi-host', '');
                        console.log(el);
                        shade = nel.attachShadow({ mode: 'open' });
                        shade.append(newElement);
                        el.remove();
                    }
                    else {
                        el.replaceWith(newElement);
                    }
                    dLog("finish: ", skCtx.time, window.performance.now());
                    if (style[1]) {
                        if (this.plugin.settings.shadowMode) {
                            shade.append(style[1]);
                            // newElement.prepend(style[1])
                        }
                        else {
                            newElement.prepend(style[1]);
                            scopeStyle(child, newElement, style[1]);
                        }
                    }
                    if (skCtx.flag == 1) {
                        vLog(`Rendered template "${id}" (${roundTo(window.performance.now() - skCtx.time, 4)} ms)`, newElement);
                    }
                    else
                        vLog(`Rendered literal (f: ${skCtx.flag}) (${roundTo(window.performance.now() - skCtx.time, 4)} ms)`, newElement);
                    return Promise.resolve(newElement);
                });
                child.setPacket(packet);
                mdCtx.addChild(child);
                this.plugin.children.push(child);
                render.then((e) => {
                    child.onPost();
                    // TODO: only restrict depth for transclusions
                    if (isExtant(mdCtx.remainingNestLevel) && (mdCtx.remainingNestLevel > 0) || !isExtant(mdCtx.remainingNestLevel)) {
                        return embedMedia(e, mdCtx.sourcePath, this.plugin, skCtx.depth);
                    }
                    else
                        return Promise.resolve();
                })
                    .then((x) => {
                    dLog("renderer final: ", d);
                    this.processEntry({ srcType: "GENERAL" /* general */ }, newElement, mdCtx, skCtx.depth - 1, true); /* Recurse the processor to parse skreeblings */
                });
                return [render, child];
            }
            else if (!handled) {
                child.clear();
                return Promise.reject("Unknown Render Error");
            }
        });
    }
    /* End of processor chain */
    simpleRender(content, el) {
        return __awaiter(this, void 0, void 0, function* () {
            el.innerHTML = content;
            console.log(el);
            return Promise.resolve();
        });
    }
}
/* STYLE FUNCTIONS */
function stripStyleFromString(str) {
    let x = createDiv();
    x.innerHTML = str;
    // console.log('prestrip', x)
    let style = x.querySelector('style');
    if (style)
        x.removeChild(style);
    return [x.innerHTML, style !== null && style !== void 0 ? style : null];
}
/* s must be attached to document or s.sheet will be null */
function scopeStyle(child, el, s) {
    var _a;
    child.hash = (_a = child.hash) !== null && _a !== void 0 ? _a : hash(child.source);
    child.containerEl.setAttr('sk-hash', child.hash);
    if (!s.sheet) {
        console.warn("Skribi: Could not scope style because it was not attached to the document!", EBAR, "Style: ", s, EBAR, "In element: ", el, EBAR, "Of child:", child);
        return;
    }
    const l = s.sheet.cssRules.length;
    for (let i = 0; i < l; ++i) {
        const rule = s.sheet.cssRules[i];
        if (!(rule instanceof CSSImportRule)) {
            scopeRule(rule, ['sk-hash', child.hash]);
        }
    }
    /* Changing the rule properties doesn't change the text of the style element, so we do it manually so make the resolved behavior visible for users in element panel */
    if (window.app.plugins.plugins['obsidian-skribi'].settings.reflectStyleTagText) {
        let rules = [];
        for (let i = 0; i < s.sheet.cssRules.length; i++) {
            rules.push(s.sheet.cssRules.item(i));
        }
        let str = rules.reduce((a, b) => { return a + `${b.cssText}` + '\n'; }, "");
        s.textContent = str;
    }
    return s;
}
/** Mutates a CSSRule's selectors to select elements with attribute 'sk-hash' equal to hash
/* @param rule CSSRule to scope
/* @param hash [attrKey, attrVal] to target */
function scopeRule(rule, target) {
    if (!(rule instanceof CSSStyleRule))
        return; // media and import rules ignored
    let b = prefixSelectors(rule.selectorText, `[${target[0]}='${target[1]}']`);
    rule.selectorText = b;
}

class SkribiChild extends obsidian.MarkdownRenderChild {
    constructor(plugin, el) {
        super(el);
        this.intervals = [];
        this.cbOnUnload = [];
        this.cbOnPost = [];
        this.isPost = false; // True when container has attached to document 
        this.state = "pre";
        this.sources = {
            templates: [],
            styles: []
        };
        this.plugin = plugin;
    }
    provideContext() {
        return {
            el: this.containerEl,
            registerInterval: this.skRegisterInterval.bind(this),
            registerUnload: this.skRegisterUnload.bind(this),
            registerEvent: this.skRegisterEvent.bind(this),
            registerPost: this.skRegisterPost.bind(this),
            addStyle: this.skAddStyle.bind(this),
            reload: this.rerender,
            _c: this
        };
    }
    scriptsUpdated() {
        this.rerender();
    }
    templatesUpdated(id, newId) {
        if (((this === null || this === void 0 ? void 0 : this.templateKey) == id) || this.sources.templates.contains(id)) {
            dLog("Child received template update notification that matched one of its sources", id, this);
            this.rerender((id == (this === null || this === void 0 ? void 0 : this.templateKey)) ? id : null);
        }
    }
    stylesUpdated(id) {
        if ((this.sources.styles).contains(id)) {
            dLog("Child received style update notification that matched one of its sources", id, this);
            this.rerender();
        }
    }
    listenFor(type, id) {
        let l = (type == "style" ? this.sources.styles : type == "template" ? this.sources.templates : null);
        if (l)
            l.push(id);
    }
    setPacket(packet) {
        if (this.packet == null) {
            this.packet = packet;
        }
    }
    onload() { }
    /* NOT called by child.unload() (except sometimes it is) */
    onunload() {
        dLog("skreeb unload", this.containerEl);
        this.clear();
    }
    /* Called by rerender. */
    clear() {
        vLog("clear", this.containerEl);
        for (let i of this.intervals)
            window.clearInterval(i); // there might be cases where this doesn't get called properly (?)
        for (let cb of this.cbOnUnload)
            cb[0](cb[1]);
        // this.containerEl.parentNode.removeChild(this.containerEl)
        this.plugin.children.remove(this);
    }
    /* Called after render fulfillment */
    onPost() {
        this.isPost = true;
        this.state = "post";
        for (let cb of this.cbOnPost)
            cb[0](cb[1]);
    }
    /*-- Provider Functions --*/
    // Asynchronously adds a scoped style element to the container, from string str
    // Will not resolve until post (when element is attached to document, which is required for scopeStyle())
    // Returns reference to the created element
    // TODO: if aborted before post, will promise persist in memory?
    skAddStyle(str) {
        let s = createEl('style');
        s.innerHTML = str;
        this.containerEl.prepend(s);
        let p = () => {
            return new Promise((resolve, reject) => {
                this.skRegisterPost(() => {
                    resolve(scopeStyle(this, this.containerEl, s));
                });
            });
        };
        return p();
    }
    skRegisterInterval(cb, time, ...args) {
        //@ts-ignore
        let x = window.setInterval((...a) => {
            if (this._loaded == false) {
                window.clearInterval(x);
            }
            cb(...a);
        }, time * 1000, ...args);
        this.intervals.push(x);
        return x;
    }
    skRegisterEvent(event) {
        dLog('SkChild registered event:', event);
        this.registerEvent(event);
    }
    skRegisterUnload(cb, ...args) {
        this.cbOnUnload.push([(...x) => cb(...x), args]);
    }
    skRegisterPost(cb, ...args) {
        if (!this.isPost) {
            this.cbOnPost.push([(...x) => cb(...x), args]);
        }
        else {
            ((...x) => cb(...x))(args);
        }
    }
    // Assigned in renderSkribi()
    rerender(...args) { }
}

class SuggestionModal extends obsidian.FuzzySuggestModal {
    constructor(plugin) {
        super(plugin.app);
        this.plugin = plugin;
    }
    getItems() {
        return this.plugin.eta.getCacheKeys();
    }
    getItemText(item) { return item; }
    onChooseItem(item, evt) {
        this.resolve(item);
    }
    openAndGetValue(resolve, reject) {
        return __awaiter(this, void 0, void 0, function* () {
            this.resolve = resolve;
            this.reject = reject;
            this.open();
        });
    }
}

var promptTypes;
(function (promptTypes) {
    promptTypes["string"] = "string";
})(promptTypes || (promptTypes = {}));

class InsertionModal extends obsidian.Modal {
    constructor(plugin, editor, id) {
        super(plugin.app);
        this.valFields = {};
        this.plugin = plugin;
        this.editor = editor;
        this.currentID = id.toString();
        this.containerEl.addClass("skribi-insertion-modal");
        this.titleEl.setText(l["modal.insert.title"]);
    }
    onOpen() {
        this.create();
    }
    create() {
        let s = new obsidian.Setting(this.contentEl);
        s.addDropdown((drop) => {
            drop
                .addOptions(toDupeRecord(this.plugin.eta.getCacheKeys()))
                .setValue(this.currentID)
                .onChange((v) => {
                this.currentID = v;
                let f = this.generateFields(fieldsDiv, this.currentID);
                ((f.length > 0) ? f[0] : this.textInput).inputEl.focus();
            });
        });
        let fieldsDiv = this.contentEl.createDiv({ cls: "skribi-modal-fields" });
        let t = new obsidian.Setting(this.contentEl);
        t.addText((te) => { this.textInput = te; return te; });
        t.setName(l["modal.insert.append"]);
        t.settingEl.addClass("skribi-modal-field-append");
        let f = this.generateFields(fieldsDiv, this.currentID);
        ((f.length > 0) ? f[0] : this.textInput).inputEl.focus();
        let confirm = new obsidian.Setting(this.contentEl);
        confirm.addButton((button) => button
            .setButtonText(l["modal.insert.insert"])
            .onClick(() => this.doInsert()));
        this.keypressRef = this.scope.register([], "Enter", this.doInsert.bind(this));
    }
    onClose() {
        this.scope.unregister(this.keypressRef);
    }
    generateFields(el, id) {
        var _a;
        el.empty();
        var arr = [];
        if ((_a = this.plugin.eta.templates.get(id)) === null || _a === void 0 ? void 0 : _a.frontmatter) {
            let fm = this.plugin.eta.templates.get(id).frontmatter;
            for (let v of Object.keys(fm)) {
                if (v.charAt(0) == "_") {
                    let vn = v.substring(1);
                    let fma = this.parsePromptVal(vn, fm[v]);
                    let s = new obsidian.Setting(el);
                    s.settingEl.addClass("skribi-modal-template-field");
                    if (fma.type == promptTypes.string) {
                        arr.push(this.createTextField(s, fma));
                    }
                    s.setName(fma.name);
                }
            }
        }
        return arr;
    }
    createTextField(set, fma) {
        let t;
        set.addText((text) => {
            text
                .setValue(fma.default)
                .setPlaceholder(fma.placeholder)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.valFields[fma.id] = value;
            }));
            text.inputEl.addClass("skribi-text-input");
            t = text;
        });
        if (fma.default.length > 0)
            this.valFields[fma.id] = fma.default;
        return t;
    }
    parsePromptVal(k, val) {
        let v = {
            id: k,
            type: promptTypes.string,
            name: isExtant(val === null || val === void 0 ? void 0 : val.name) ? val.name : k,
            placeholder: isExtant(val === null || val === void 0 ? void 0 : val.placeholder) ? val.placeholder : "",
            default: isExtant(val === null || val === void 0 ? void 0 : val.default) ? val.default : isExtant(val === null || val === void 0 ? void 0 : val.def) ? val.def : "",
        };
        return v;
    }
    doInsert() {
        let id = this.currentID;
        let osel = this.editor.listSelections();
        let toInsert = `\`{:${id}`;
        for (let e of Object.entries(this.valFields)) {
            toInsert += ` | ${e[0]}: ${e[1]}`;
        }
        toInsert += ((this === null || this === void 0 ? void 0 : this.textInput.getValue().length) > 0) ? " | " + this.textInput.getValue() : "";
        toInsert += `}\``;
        this.editor.getDoc().replaceSelection(toInsert);
        let nsel = [];
        for (let p of osel) {
            nsel.push({ from: { line: p.anchor.line, ch: p.anchor.ch + (toInsert.length) } });
        }
        this.editor.transaction({ selections: nsel });
        this.close();
    }
}

const maximumIterations = 10000;
class TestModal extends obsidian.Modal {
    constructor(plugin, autofill) {
        super(plugin.app);
        this.iterations = 10;
        this.multiBlock = false;
        this.valFields = {};
        this.autofill = null;
        this.plugin = plugin;
        this.autofill = autofill;
        this.containerEl.addClass("skribi-test-modal");
        this.titleEl.setText(l['modal.perf.title']);
        let desc = createDiv({ cls: 'skribi-modal-desc' });
        makeExternalLink(desc.createEl('a', { text: l['documentation'], attr: { 'href': linkDocs('commands/performance') } }));
        desc.insertAfter(this.titleEl);
    }
    onOpen() {
        this.create();
    }
    create() {
        let fieldTextToEval = new obsidian.Setting(this.contentEl);
        fieldTextToEval.addTextArea((text) => { this.textFieldToEval = text; return text; });
        fieldTextToEval.setName(l["modal.perf.textToEvaluate.name"]);
        fieldTextToEval.setDesc(l["modal.perf.textToEvaluate.desc"]);
        this.textFieldToEval.setPlaceholder(l["modal.perf.textToEvaluate.placeholder"]);
        if (this.autofill) {
            fieldTextToEval.infoEl.append(createDiv({ text: `Autofilled from ${this.autofill.type}`, cls: 'setting-item-description skribi-autofill-notification' }));
            this.textFieldToEval.setValue(this.autofill.value);
        }
        let fieldIterations = new obsidian.Setting(this.contentEl);
        let iters = fieldIterations.controlEl.createEl('input', { attr: { type: 'number' } });
        iters.defaultValue = this.iterations.toString();
        iters.onchange = (ev) => { this.iterations = iters.valueAsNumber; };
        fieldIterations.setName(l["modal.perf.evalIterations.name"]);
        fieldIterations.setDesc(l["modal.perf.textToEvaluate.desc"]);
        let blockSetting = new obsidian.Setting(this.contentEl);
        blockSetting.addToggle((tog) => {
            tog.setValue(this.multiBlock);
            tog.onChange((v) => this.multiBlock = v);
            return tog;
        });
        blockSetting.setName(l["modal.perf.evalBlocks"]);
        let confirm = new obsidian.Setting(this.contentEl).setClass('skribi-button-eval');
        confirm.addButton((button) => button
            .setButtonText(l["modal.perf.evaluate"])
            .onClick(() => this.doEval()));
        this.keypressRef = this.scope.register([], "Enter", this.doEval.bind(this));
        this.contentEl.createEl('hr');
        this.resultsField = this.contentEl.createDiv({ cls: "skribi-test-results-field" });
    }
    onClose() {
        this.scope.unregister(this.keypressRef);
    }
    doEval() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.plugin.initLoaded) {
                this.resultsField.setText("Template cache not ready!");
                return;
            }
            let container = createDiv();
            let el = createDiv();
            let blocksToProcess = [];
            let toIter = Math.min(this.iterations, maximumIterations);
            if (this.multiBlock) {
                for (let i = 0; i < toIter; i++) {
                    let d = createDiv();
                    d.createEl('code', { text: this.textFieldToEval.getValue() });
                    blocksToProcess.push(d);
                }
            }
            else {
                let singleDiv = createDiv();
                for (let i = 0; i < toIter; i++) {
                    singleDiv.createEl('code', { text: this.textFieldToEval.getValue() });
                }
                blocksToProcess.push(singleDiv);
            }
            let timeStart = window.performance.now();
            const proms = blocksToProcess.map((div) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let promiseStartTime = window.performance.now();
                let promise = yield this.plugin.processor.processEntry({ srcType: "GENERAL" /* general */ }, div, {
                    remainingNestLevel: 4,
                    docId: '55555555',
                    frontmatter: null,
                    sourcePath: ((_a = this.plugin.app.workspace.getActiveFile()) === null || _a === void 0 ? void 0 : _a.path) || "",
                    addChild: (child) => { },
                    getSectionInfo: () => { return null; },
                    containerEl: container,
                    el: el
                }, 4, false, null).catch(() => { });
                return [promise, window.performance.now(), promiseStartTime];
            }));
            this.resultsField.setText(l["modal.perf.evaluating"]);
            let settledValues = yield Promise.allSettled(proms);
            vLog(`Performance test settled in: ${roundTo(window.performance.now() - timeStart, 3)}ms`);
            let fullfilled = settledValues.map((v) => { if (v.status == 'fulfilled')
                return v.value; });
            let times = fullfilled.map((result) => (result[1] - result[2]));
            let avg = average(...times);
            let p = [];
            fullfilled.map(res => res[0].map((a) => p.push(a)));
            let children = (yield Promise.allSettled(p)).map((rez) => { if (rez.status == "fulfilled")
                return rez.value[1]; });
            this.resultsField.setText(`${l["modal.perf.results"]} (${children.length} children in ${l._((times.length > 1 ? "modal.perf.resultsBlockCount.plural" : "modal.perf.resultsBlockCount.single"), times.length.toString())}): ${roundTo(avg, 3)}ms`);
            // invokeMethodOf<SkribiChild>("clear", ...children) // Unload doesn't seem to be invoked consistently so let's just make sure everything is cleared
            Array.from(children).forEach((child) => child.clear());
            blocksToProcess.map(block => block.remove()); // Children are easier to collect when they lack shelter
            container.remove();
            el.remove(); // One day, the last person who remembers you will die, and you will be forgotten forever
        });
    }
}

class TemplateSuggest extends obsidian.EditorSuggest {
    constructor(plugin) {
        super(plugin.app);
        this.plugin = plugin;
    }
    onTrigger(cursor, editor, file) {
        var _a, _b, _c;
        if (this.plugin.settings.templateSuggest) {
            let soFar = editor.getLine(cursor.line).substr(0, cursor.ch);
            let match = (/^.*`{:([^}]*)$/gs).exec(soFar);
            // console.log(match)
            if (match === null || match === void 0 ? void 0 : match[0]) {
                let m = match[1].match(/\|([^\|]*)$/);
                // console.log("m", m)
                return {
                    end: cursor,
                    start: {
                        ch: isExtant(m === null || m === void 0 ? void 0 : m[1]) ? (cursor.ch - m[1].length) : (match[0].length - ((_b = (_a = match[1]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0)),
                        line: cursor.line
                    },
                    query: (_c = match === null || match === void 0 ? void 0 : match[1]) !== null && _c !== void 0 ? _c : ""
                };
            }
        }
    }
    getSuggestions(context) {
        var _a;
        let has = context.query.match(/^(.*)\|([^\:]*$)/s);
        // console.log(has)
        if (has) {
            let ind = context.query.indexOf("|");
            let key = context.query.substr(0, ind).trim();
            let tp = this.plugin.eta.templates.get(key);
            if (tp === null || tp === void 0 ? void 0 : tp.frontmatter) {
                (_a = has === null || has === void 0 ? void 0 : has[2]) === null || _a === void 0 ? void 0 : _a.trim();
                // console.log(pk)
                return Object.keys(tp.frontmatter)
                    .filter(k => { var _a; return (k.substr(1).startsWith((_a = has === null || has === void 0 ? void 0 : has[2]) === null || _a === void 0 ? void 0 : _a.trimStart()) && !(k.substring(1).trim() == (has === null || has === void 0 ? void 0 : has[2].trim()))); })
                    .map((v) => v.substr(1));
            }
        }
        else {
            let keys = this.plugin.eta.getCacheKeys();
            // console.log('query:', context?.query)
            let ret = (context === null || context === void 0 ? void 0 : context.query) ? keys.filter(key => (key.startsWith(context.query) && !(key == context.query))) : keys;
            // console.log(ret)
            return ret;
        }
    }
    renderSuggestion(value, el) {
        el.addClass("skribi-suggestion");
        el.createSpan({ text: value });
        // console.log(el.cloneNode(true))
        // console.log(el.parentElement.parentElement.cloneNode(true))
    }
    selectSuggestion(value, evt) {
        var _a;
        if (this.context) {
            // let conLength = this.context.end.ch - this.context.start.ch
            // let preLength = conLength - (this.context.query.length + 3)
            let line = this.context.editor.getLine(this.context.start.line);
            let bar = line.match(/^.*(\`\{\:([^\|]*\|)*)/s);
            // console.log('bar\n', bar)
            // console.log('query\n', this.context.query)
            // console.log('pre\n', line.substr(preLength, preLength + bar?.[0].length))
            // console.log('line\n', line)
            let ch = (_a = ((bar && (bar === null || bar === void 0 ? void 0 : bar[0])) ? bar[0].length : null)) !== null && _a !== void 0 ? _a : this.context.start.ch;
            // console.log(line.charAt(ch-1))
            this.context.editor.replaceRange(((line.charAt(ch - 1) == ":") ? "" : " ") + value, {
                line: this.context.start.line,
                ch: ch
            }, this.context.end);
        }
    }
}

class SkribosPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.varName = "sk";
        this.initLoaded = false;
        this.l = l;
        this.children = [];
        this.childProto = SkribiChild; // for dev memory querying 
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Skribi: Loading...');
            yield this.loadSettings();
            this.addSettingTab(new SkribosSettingTab(this.app, this));
            this.eta = new EtaHandler(this);
            this.processor = new SkribiProcessor(this);
            this.processor.registerProcessors();
            this.registerEvent(this.app.workspace.on('skribi:template-init-complete', () => {
                this.initLoaded = true;
                this.processor.templatesReady();
            }));
            this.defineCommands();
            this.registerExtensions(['eta'], 'markdown');
            this.suggest = new TemplateSuggest(this);
            this.registerEditorSuggest(this.suggest);
            // registerMirror(this);
            /* Rerender preview views */
            this.app.workspace.onLayoutReady(() => {
                this.app.workspace.getLeavesOfType("markdown").forEach((leaf) => {
                    if (leaf.view.currentMode.type == "preview") {
                        leaf.view.previewMode.rerender(true);
                    }
                });
            });
        });
    }
    /** Register our commands. */
    defineCommands() {
        this.addCommand({ id: "insert-skribi", name: l['command.insert'],
            editorCallback: (editor, view) => {
                if (!this.initLoaded)
                    return;
                let x = new SuggestionModal(this);
                new Promise((resolve, reject) => x.openAndGetValue(resolve, reject))
                    .then(result => {
                    if (this.eta.hasPartial(result)) {
                        let i = new InsertionModal(this, editor, result);
                        i.open();
                    }
                }, (r) => { });
            } });
        this.addCommand({ id: "reload-scripts", name: l['command.reloadScripts'], callback: () => {
                this.eta.bus.scriptLoader.reload().then(() => console.log("Skribi: Reloaded Scripts"));
            } });
        this.addCommand({ id: "reload-skribis", name: "Reload Skribis", callback: () => {
                Array.from(this.children).forEach(child => child.rerender(child === null || child === void 0 ? void 0 : child.templateKey));
            } });
        this.addCommand({ id: "test-performance", name: l['command.perfTest'], callback: () => __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                let sel = (_b = (_a = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor) === null || _b === void 0 ? void 0 : _b.getSelection();
                let clip = yield window.navigator.clipboard.readText();
                let fill = (sel || clip) ? {
                    type: l[sel ? 'modal.perf.autofill.selection' : 'modal.perf.autofill.clipboard'],
                    value: sel ? sel : clip
                } : null;
                new TestModal(this, fill).open();
            }) });
    }
    onunload() {
        this.eta.unload();
        console.log('Skribi: Unloading...', this.children);
        Array.from(this.children).forEach((child) => {
            let pre = createEl('code', { text: child.source });
            child.containerEl.replaceWith(pre);
            child.unload();
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = SkribosPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
